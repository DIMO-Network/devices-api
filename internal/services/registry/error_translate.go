// Code generated by github.com/DIMO-Network/solidity-error-gen. DO NOT EDIT.
//
// ABI source: DimoRegistry.json
// Translation source: translation.yaml

package registry

import (
	"encoding/binary"
	"fmt"
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

type DimoRegistryErrorDecoder struct {
	abi *abi.ABI
}

const DimoRegistryRawABI = "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AdNotClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AdPaired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"InvalidNode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"VehiclePaired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AdNotPaired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"attr\",\"type\":\"string\"}],\"name\":\"AttributeNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"DeviceAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"DeviceAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAdSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwnerSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"InvalidParentNode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnersDoNotMatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"VehicleNotPaired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSdSignature\",\"type\":\"error\"}]"

func NewDimoRegistryErrorDecoder() (*DimoRegistryErrorDecoder, error) {
	a, err := abi.JSON(strings.NewReader(DimoRegistryRawABI))
	if err != nil {
		return nil, err
	}
	return &DimoRegistryErrorDecoder{abi: &a}, nil
}

func (d *DimoRegistryErrorDecoder) Decode(data []byte) (string, error) {
	if len(data) < 4 {
		return "", fmt.Errorf("length %d is too short, must have length at least 4", len(data))
	}

	numSelector := binary.BigEndian.Uint32(data[:4])
	argsData := data[4:]

	switch numSelector {
	// DeviceAlreadyRegistered(addr address)
	case 0xcd76e845:
		values, err := d.abi.Errors["DeviceAlreadyRegistered"].Inputs.Unpack(argsData)
		if err != nil {
			return "", err
		}
		if l := len(values); l != 1 {
			return "", fmt.Errorf("unpacked into %d args instead of the expected 1", l)
		}
		return fmt.Sprintf("There is already a minted device with address %[1]s.", values[0]), nil
	// InvalidAdSignature()
	case 0xdbe5383b:
		return "Invalid aftermarket device signature.", nil
	// AttributeNotWhitelisted(attr string)
	case 0x1c48d49e:
		values, err := d.abi.Errors["AttributeNotWhitelisted"].Inputs.Unpack(argsData)
		if err != nil {
			return "", err
		}
		if l := len(values); l != 1 {
			return "", fmt.Errorf("unpacked into %d args instead of the expected 1", l)
		}
		return fmt.Sprintf("Attribute %[1]s not whitelisted.", values[0]), nil
	// InvalidOwnerSignature()
	case 0x38a85a8d:
		return "Invalid owner signature.", nil
	// OwnersDoNotMatch()
	case 0x4fc280ab:
		return "Vehicle and aftermarket device owners are not the same.", nil
	// VehicleNotPaired(id uint256)
	case 0x2d91fcb5:
		values, err := d.abi.Errors["VehicleNotPaired"].Inputs.Unpack(argsData)
		if err != nil {
			return "", err
		}
		if l := len(values); l != 1 {
			return "", fmt.Errorf("unpacked into %d args instead of the expected 1", l)
		}
		return fmt.Sprintf("Vehicle %[1]s is not paired.", values[0]), nil
	// AdNotPaired(id uint256)
	case 0xd11e35b4:
		values, err := d.abi.Errors["AdNotPaired"].Inputs.Unpack(argsData)
		if err != nil {
			return "", err
		}
		if l := len(values); l != 1 {
			return "", fmt.Errorf("unpacked into %d args instead of the expected 1", l)
		}
		return fmt.Sprintf("Aftermarket device %[1]s is not paired.", values[0]), nil
	// AdPaired(id uint256)
	case 0x762116ae:
		values, err := d.abi.Errors["AdPaired"].Inputs.Unpack(argsData)
		if err != nil {
			return "", err
		}
		if l := len(values); l != 1 {
			return "", fmt.Errorf("unpacked into %d args instead of the expected 1", l)
		}
		return fmt.Sprintf("Aftermarket device %[1]s is paired.", values[0]), nil
	// InvalidSigner()
	case 0x815e1d64:
		return "Signer is owner of neither the vehicle nor the device.", nil
	// DeviceAlreadyClaimed(id uint256)
	case 0x4dec88eb:
		values, err := d.abi.Errors["DeviceAlreadyClaimed"].Inputs.Unpack(argsData)
		if err != nil {
			return "", err
		}
		if l := len(values); l != 1 {
			return "", fmt.Errorf("unpacked into %d args instead of the expected 1", l)
		}
		return fmt.Sprintf("Aftermarket device %[1]s already claimed.", values[0]), nil
	// InvalidNode(proxy address, id uint256)
	case 0xe3ca9639:
		values, err := d.abi.Errors["InvalidNode"].Inputs.Unpack(argsData)
		if err != nil {
			return "", err
		}
		if l := len(values); l != 2 {
			return "", fmt.Errorf("unpacked into %d args instead of the expected 2", l)
		}
		return fmt.Sprintf("Token %[2]s does not exist at address %[1]s.", values[0], values[1]), nil
	// InvalidSdSignature()
	case 0xf8e95d55:
		return "Invalid synthetic device signature.", nil
	// VehiclePaired(id uint256)
	case 0xc46a5168:
		values, err := d.abi.Errors["VehiclePaired"].Inputs.Unpack(argsData)
		if err != nil {
			return "", err
		}
		if l := len(values); l != 1 {
			return "", fmt.Errorf("unpacked into %d args instead of the expected 1", l)
		}
		return fmt.Sprintf("Vehicle %[1]s is paired.", values[0]), nil
	// AdNotClaimed(id uint256)
	case 0x15bdaac1:
		values, err := d.abi.Errors["AdNotClaimed"].Inputs.Unpack(argsData)
		if err != nil {
			return "", err
		}
		if l := len(values); l != 1 {
			return "", fmt.Errorf("unpacked into %d args instead of the expected 1", l)
		}
		return fmt.Sprintf("Aftermarket device %[1]s not claimed.", values[0]), nil
	// InvalidParentNode(id uint256)
	case 0x5299bab7:
		values, err := d.abi.Errors["InvalidParentNode"].Inputs.Unpack(argsData)
		if err != nil {
			return "", err
		}
		if l := len(values); l != 1 {
			return "", fmt.Errorf("unpacked into %d args instead of the expected 1", l)
		}
		return fmt.Sprintf("Parent node %[1]s does not exist.", values[0]), nil
	default:
		return "", fmt.Errorf("unrecognized error selector %s", hexutil.Encode(data[:4]))
	}
}
