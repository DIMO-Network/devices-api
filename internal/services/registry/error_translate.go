// Code generated by github.com/DIMO-Network/solidity-error-gen. DO NOT EDIT.
//
// ABI source: DimoRegistry.json
// Translation source: translation.yaml

package registry

import (
	"encoding/binary"
	"fmt"
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

type DimoRegistryErrorDecoder struct {
	abi *abi.ABI
}

const DimoRegistryRawABI = "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AdNotClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AdPaired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"InvalidNode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"VehiclePaired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AdNotPaired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"attr\",\"type\":\"string\"}],\"name\":\"AttributeNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"DeviceAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"DeviceAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAdSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwnerSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"InvalidParentNode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnersDoNotMatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"VehicleNotPaired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSdSignature\",\"type\":\"error\"}]"

func NewDimoRegistryErrorDecoder() (*DimoRegistryErrorDecoder, error) {
	a, err := abi.JSON(strings.NewReader(DimoRegistryRawABI))
	if err != nil {
		return nil, err
	}
	return &DimoRegistryErrorDecoder{abi: &a}, nil
}

type pair struct {
	Name    string
	Message string
}

var DimoRegistryTranslations = map[uint32]pair{
	0x15bdaac1: {"AdNotClaimed", "Aftermarket device %[1]s not claimed."},                           // AdNotClaimed(id uint256)
	0xd11e35b4: {"AdNotPaired", "Aftermarket device %[1]s is not paired."},                          // AdNotPaired(id uint256)
	0x762116ae: {"AdPaired", "Aftermarket device %[1]s is paired."},                                 // AdPaired(id uint256)
	0x1c48d49e: {"AttributeNotWhitelisted", "Attribute %[1]s not whitelisted."},                     // AttributeNotWhitelisted(attr string)
	0x4dec88eb: {"DeviceAlreadyClaimed", "Aftermarket device %[1]s already claimed."},               // DeviceAlreadyClaimed(id uint256)
	0xcd76e845: {"DeviceAlreadyRegistered", "There is already a minted device with address %[1]s."}, // DeviceAlreadyRegistered(addr address)
	0xdbe5383b: {"InvalidAdSignature", "Invalid aftermarket device signature."},                     // InvalidAdSignature()
	0xe3ca9639: {"InvalidNode", "Token %[2]s does not exist at address %[1]s."},                     // InvalidNode(proxy address, id uint256)
	0x38a85a8d: {"InvalidOwnerSignature", "Invalid owner signature."},                               // InvalidOwnerSignature()
	0x5299bab7: {"InvalidParentNode", "Parent node %[1]s does not exist."},                          // InvalidParentNode(id uint256)
	0xf8e95d55: {"InvalidSdSignature", "Invalid synthetic device signature."},                       // InvalidSdSignature()
	0x815e1d64: {"InvalidSigner", "Signer is owner of neither the vehicle nor the device."},         // InvalidSigner()
	0x4fc280ab: {"OwnersDoNotMatch", "Vehicle and aftermarket device owners are not the same."},     // OwnersDoNotMatch()
	0x2d91fcb5: {"VehicleNotPaired", "Vehicle %[1]s is not paired."},                                // VehicleNotPaired(id uint256)
	0xc46a5168: {"VehiclePaired", "Vehicle %[1]s is paired."},                                       // VehiclePaired(id uint256)
}

func (d *DimoRegistryErrorDecoder) Decode(data []byte) (string, error) {
	if len(data) < 4 {
		return "", fmt.Errorf("length %d is too short, must have length at least 4", len(data))
	}

	numSelector := binary.BigEndian.Uint32(data[:4])
	argsData := data[4:]

	p, ok := DimoRegistryTranslations[numSelector]
	if !ok {
		return "", fmt.Errorf("unrecognized error with selector %s", hexutil.Encode(data[:4]))
	}

	values, err := d.abi.Errors[p.Name].Inputs.Unpack(argsData)
	if err != nil {
		return "", fmt.Errorf("error decoding event %s: %w", p.Name, err)
	}

	return fmt.Sprintf(p.Message, values...), nil
}
