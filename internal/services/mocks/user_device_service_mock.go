// Code generated by MockGen. DO NOT EDIT.
// Source: user_device_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	grpc "github.com/DIMO-Network/device-definitions-api/pkg/grpc"
	models "github.com/DIMO-Network/devices-api/models"
	gomock "go.uber.org/mock/gomock"
)

// MockUserDeviceService is a mock of UserDeviceService interface.
type MockUserDeviceService struct {
	ctrl     *gomock.Controller
	recorder *MockUserDeviceServiceMockRecorder
}

// MockUserDeviceServiceMockRecorder is the mock recorder for MockUserDeviceService.
type MockUserDeviceServiceMockRecorder struct {
	mock *MockUserDeviceService
}

// NewMockUserDeviceService creates a new mock instance.
func NewMockUserDeviceService(ctrl *gomock.Controller) *MockUserDeviceService {
	mock := &MockUserDeviceService{ctrl: ctrl}
	mock.recorder = &MockUserDeviceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDeviceService) EXPECT() *MockUserDeviceServiceMockRecorder {
	return m.recorder
}

// CreateUserDevice mocks base method.
func (m *MockUserDeviceService) CreateUserDevice(ctx context.Context, deviceDefID, styleID, countryCode, userID string, vin, canProtocol *string) (*models.UserDevice, *grpc.GetDeviceDefinitionItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserDevice", ctx, deviceDefID, styleID, countryCode, userID, vin, canProtocol)
	ret0, _ := ret[0].(*models.UserDevice)
	ret1, _ := ret[1].(*grpc.GetDeviceDefinitionItemResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUserDevice indicates an expected call of CreateUserDevice.
func (mr *MockUserDeviceServiceMockRecorder) CreateUserDevice(ctx, deviceDefID, styleID, countryCode, userID, vin, canProtocol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserDevice", reflect.TypeOf((*MockUserDeviceService)(nil).CreateUserDevice), ctx, deviceDefID, styleID, countryCode, userID, vin, canProtocol)
}
