// Code generated by MockGen. DO NOT EDIT.
// Source: device_definitions_service.go
//
// Generated by this command:
//
//	mockgen -source device_definitions_service.go -destination mocks/device_definitions_service_mock.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	big "math/big"
	reflect "reflect"

	grpc "github.com/DIMO-Network/device-definitions-api/pkg/grpc"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
	gomock "go.uber.org/mock/gomock"
)

// MockDeviceDefinitionService is a mock of DeviceDefinitionService interface.
type MockDeviceDefinitionService struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceDefinitionServiceMockRecorder
	isgomock struct{}
}

// MockDeviceDefinitionServiceMockRecorder is the mock recorder for MockDeviceDefinitionService.
type MockDeviceDefinitionServiceMockRecorder struct {
	mock *MockDeviceDefinitionService
}

// NewMockDeviceDefinitionService creates a new mock instance.
func NewMockDeviceDefinitionService(ctrl *gomock.Controller) *MockDeviceDefinitionService {
	mock := &MockDeviceDefinitionService{ctrl: ctrl}
	mock.recorder = &MockDeviceDefinitionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceDefinitionService) EXPECT() *MockDeviceDefinitionServiceMockRecorder {
	return m.recorder
}

// CreateIntegration mocks base method.
func (m *MockDeviceDefinitionService) CreateIntegration(ctx context.Context, integrationType, vendor, style string) (*grpc.Integration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIntegration", ctx, integrationType, vendor, style)
	ret0, _ := ret[0].(*grpc.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIntegration indicates an expected call of CreateIntegration.
func (mr *MockDeviceDefinitionServiceMockRecorder) CreateIntegration(ctx, integrationType, vendor, style any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntegration", reflect.TypeOf((*MockDeviceDefinitionService)(nil).CreateIntegration), ctx, integrationType, vendor, style)
}

// DecodeVIN mocks base method.
func (m *MockDeviceDefinitionService) DecodeVIN(ctx context.Context, vin, model string, year int, countryCode string) (*grpc.DecodeVinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeVIN", ctx, vin, model, year, countryCode)
	ret0, _ := ret[0].(*grpc.DecodeVinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeVIN indicates an expected call of DecodeVIN.
func (mr *MockDeviceDefinitionServiceMockRecorder) DecodeVIN(ctx, vin, model, year, countryCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeVIN", reflect.TypeOf((*MockDeviceDefinitionService)(nil).DecodeVIN), ctx, vin, model, year, countryCode)
}

// FindDeviceDefinitionByMMY mocks base method.
func (m *MockDeviceDefinitionService) FindDeviceDefinitionByMMY(ctx context.Context, mk, model string, year int) (*grpc.GetDeviceDefinitionItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDeviceDefinitionByMMY", ctx, mk, model, year)
	ret0, _ := ret[0].(*grpc.GetDeviceDefinitionItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeviceDefinitionByMMY indicates an expected call of FindDeviceDefinitionByMMY.
func (mr *MockDeviceDefinitionServiceMockRecorder) FindDeviceDefinitionByMMY(ctx, mk, model, year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeviceDefinitionByMMY", reflect.TypeOf((*MockDeviceDefinitionService)(nil).FindDeviceDefinitionByMMY), ctx, mk, model, year)
}

// GetDeviceDefinitionBySlug mocks base method.
func (m *MockDeviceDefinitionService) GetDeviceDefinitionBySlug(ctx context.Context, definitionID string) (*grpc.GetDeviceDefinitionItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceDefinitionBySlug", ctx, definitionID)
	ret0, _ := ret[0].(*grpc.GetDeviceDefinitionItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceDefinitionBySlug indicates an expected call of GetDeviceDefinitionBySlug.
func (mr *MockDeviceDefinitionServiceMockRecorder) GetDeviceDefinitionBySlug(ctx, definitionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceDefinitionBySlug", reflect.TypeOf((*MockDeviceDefinitionService)(nil).GetDeviceDefinitionBySlug), ctx, definitionID)
}

// GetDeviceStyleByID mocks base method.
func (m *MockDeviceDefinitionService) GetDeviceStyleByID(ctx context.Context, id string) (*grpc.DeviceStyle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceStyleByID", ctx, id)
	ret0, _ := ret[0].(*grpc.DeviceStyle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceStyleByID indicates an expected call of GetDeviceStyleByID.
func (mr *MockDeviceDefinitionServiceMockRecorder) GetDeviceStyleByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceStyleByID", reflect.TypeOf((*MockDeviceDefinitionService)(nil).GetDeviceStyleByID), ctx, id)
}

// GetIntegrationByFilter mocks base method.
func (m *MockDeviceDefinitionService) GetIntegrationByFilter(ctx context.Context, integrationType, vendor, style string) (*grpc.Integration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrationByFilter", ctx, integrationType, vendor, style)
	ret0, _ := ret[0].(*grpc.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrationByFilter indicates an expected call of GetIntegrationByFilter.
func (mr *MockDeviceDefinitionServiceMockRecorder) GetIntegrationByFilter(ctx, integrationType, vendor, style any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationByFilter", reflect.TypeOf((*MockDeviceDefinitionService)(nil).GetIntegrationByFilter), ctx, integrationType, vendor, style)
}

// GetIntegrationByID mocks base method.
func (m *MockDeviceDefinitionService) GetIntegrationByID(ctx context.Context, id string) (*grpc.Integration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrationByID", ctx, id)
	ret0, _ := ret[0].(*grpc.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrationByID indicates an expected call of GetIntegrationByID.
func (mr *MockDeviceDefinitionServiceMockRecorder) GetIntegrationByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationByID", reflect.TypeOf((*MockDeviceDefinitionService)(nil).GetIntegrationByID), ctx, id)
}

// GetIntegrationByTokenID mocks base method.
func (m *MockDeviceDefinitionService) GetIntegrationByTokenID(ctx context.Context, tokenID uint64) (*grpc.Integration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrationByTokenID", ctx, tokenID)
	ret0, _ := ret[0].(*grpc.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrationByTokenID indicates an expected call of GetIntegrationByTokenID.
func (mr *MockDeviceDefinitionServiceMockRecorder) GetIntegrationByTokenID(ctx, tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationByTokenID", reflect.TypeOf((*MockDeviceDefinitionService)(nil).GetIntegrationByTokenID), ctx, tokenID)
}

// GetIntegrationByVendor mocks base method.
func (m *MockDeviceDefinitionService) GetIntegrationByVendor(ctx context.Context, vendor string) (*grpc.Integration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrationByVendor", ctx, vendor)
	ret0, _ := ret[0].(*grpc.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrationByVendor indicates an expected call of GetIntegrationByVendor.
func (mr *MockDeviceDefinitionServiceMockRecorder) GetIntegrationByVendor(ctx, vendor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationByVendor", reflect.TypeOf((*MockDeviceDefinitionService)(nil).GetIntegrationByVendor), ctx, vendor)
}

// GetIntegrations mocks base method.
func (m *MockDeviceDefinitionService) GetIntegrations(ctx context.Context) ([]*grpc.Integration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrations", ctx)
	ret0, _ := ret[0].([]*grpc.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrations indicates an expected call of GetIntegrations.
func (mr *MockDeviceDefinitionServiceMockRecorder) GetIntegrations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrations", reflect.TypeOf((*MockDeviceDefinitionService)(nil).GetIntegrations), ctx)
}

// GetMakeByTokenID mocks base method.
func (m *MockDeviceDefinitionService) GetMakeByTokenID(ctx context.Context, tokenID *big.Int) (*grpc.DeviceMake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMakeByTokenID", ctx, tokenID)
	ret0, _ := ret[0].(*grpc.DeviceMake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMakeByTokenID indicates an expected call of GetMakeByTokenID.
func (mr *MockDeviceDefinitionServiceMockRecorder) GetMakeByTokenID(ctx, tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMakeByTokenID", reflect.TypeOf((*MockDeviceDefinitionService)(nil).GetMakeByTokenID), ctx, tokenID)
}

// GetOrCreateMake mocks base method.
func (m *MockDeviceDefinitionService) GetOrCreateMake(ctx context.Context, tx boil.ContextExecutor, makeName string) (*grpc.DeviceMake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateMake", ctx, tx, makeName)
	ret0, _ := ret[0].(*grpc.DeviceMake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateMake indicates an expected call of GetOrCreateMake.
func (mr *MockDeviceDefinitionServiceMockRecorder) GetOrCreateMake(ctx, tx, makeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateMake", reflect.TypeOf((*MockDeviceDefinitionService)(nil).GetOrCreateMake), ctx, tx, makeName)
}
