// Code generated by MockGen. DO NOT EDIT.
// Source: device_definition_integration_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	grpc "github.com/DIMO-Network/device-definitions-api/pkg/grpc"
	services "github.com/DIMO-Network/devices-api/internal/services"
	models "github.com/DIMO-Network/devices-api/models"
	gomock "github.com/golang/mock/gomock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
)

// MockDeviceDefinitionIntegrationService is a mock of DeviceDefinitionIntegrationService interface.
type MockDeviceDefinitionIntegrationService struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceDefinitionIntegrationServiceMockRecorder
}

// MockDeviceDefinitionIntegrationServiceMockRecorder is the mock recorder for MockDeviceDefinitionIntegrationService.
type MockDeviceDefinitionIntegrationServiceMockRecorder struct {
	mock *MockDeviceDefinitionIntegrationService
}

// NewMockDeviceDefinitionIntegrationService creates a new mock instance.
func NewMockDeviceDefinitionIntegrationService(ctrl *gomock.Controller) *MockDeviceDefinitionIntegrationService {
	mock := &MockDeviceDefinitionIntegrationService{ctrl: ctrl}
	mock.recorder = &MockDeviceDefinitionIntegrationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceDefinitionIntegrationService) EXPECT() *MockDeviceDefinitionIntegrationServiceMockRecorder {
	return m.recorder
}

// AppendAutoPiCompatibility mocks base method.
func (m *MockDeviceDefinitionIntegrationService) AppendAutoPiCompatibility(ctx context.Context, dcs []services.DeviceCompatibility, deviceDefinitionID string) ([]services.DeviceCompatibility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendAutoPiCompatibility", ctx, dcs, deviceDefinitionID)
	ret0, _ := ret[0].([]services.DeviceCompatibility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendAutoPiCompatibility indicates an expected call of AppendAutoPiCompatibility.
func (mr *MockDeviceDefinitionIntegrationServiceMockRecorder) AppendAutoPiCompatibility(ctx, dcs, deviceDefinitionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendAutoPiCompatibility", reflect.TypeOf((*MockDeviceDefinitionIntegrationService)(nil).AppendAutoPiCompatibility), ctx, dcs, deviceDefinitionID)
}

// CreateDeviceDefinitionIntegration mocks base method.
func (m *MockDeviceDefinitionIntegrationService) CreateDeviceDefinitionIntegration(ctx context.Context, integrationID, deviceDefinitionID, region string) (*grpc.Integration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeviceDefinitionIntegration", ctx, integrationID, deviceDefinitionID, region)
	ret0, _ := ret[0].(*grpc.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeviceDefinitionIntegration indicates an expected call of CreateDeviceDefinitionIntegration.
func (mr *MockDeviceDefinitionIntegrationServiceMockRecorder) CreateDeviceDefinitionIntegration(ctx, integrationID, deviceDefinitionID, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeviceDefinitionIntegration", reflect.TypeOf((*MockDeviceDefinitionIntegrationService)(nil).CreateDeviceDefinitionIntegration), ctx, integrationID, deviceDefinitionID, region)
}

// FindUserDeviceAutoPiIntegration mocks base method.
func (m *MockDeviceDefinitionIntegrationService) FindUserDeviceAutoPiIntegration(ctx context.Context, exec boil.ContextExecutor, userDeviceID, userID string) (*models.UserDeviceAPIIntegration, *services.UserDeviceAPIIntegrationsMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserDeviceAutoPiIntegration", ctx, exec, userDeviceID, userID)
	ret0, _ := ret[0].(*models.UserDeviceAPIIntegration)
	ret1, _ := ret[1].(*services.UserDeviceAPIIntegrationsMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindUserDeviceAutoPiIntegration indicates an expected call of FindUserDeviceAutoPiIntegration.
func (mr *MockDeviceDefinitionIntegrationServiceMockRecorder) FindUserDeviceAutoPiIntegration(ctx, exec, userDeviceID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserDeviceAutoPiIntegration", reflect.TypeOf((*MockDeviceDefinitionIntegrationService)(nil).FindUserDeviceAutoPiIntegration), ctx, exec, userDeviceID, userID)
}

// GetAutoPiIntegration mocks base method.
func (m *MockDeviceDefinitionIntegrationService) GetAutoPiIntegration(ctx context.Context) (*grpc.Integration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoPiIntegration", ctx)
	ret0, _ := ret[0].(*grpc.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutoPiIntegration indicates an expected call of GetAutoPiIntegration.
func (mr *MockDeviceDefinitionIntegrationServiceMockRecorder) GetAutoPiIntegration(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoPiIntegration", reflect.TypeOf((*MockDeviceDefinitionIntegrationService)(nil).GetAutoPiIntegration), ctx)
}

// GetDeviceDefinitionIntegration mocks base method.
func (m *MockDeviceDefinitionIntegrationService) GetDeviceDefinitionIntegration(ctx context.Context, deviceDefinitionID string) ([]*grpc.DeviceIntegration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceDefinitionIntegration", ctx, deviceDefinitionID)
	ret0, _ := ret[0].([]*grpc.DeviceIntegration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceDefinitionIntegration indicates an expected call of GetDeviceDefinitionIntegration.
func (mr *MockDeviceDefinitionIntegrationServiceMockRecorder) GetDeviceDefinitionIntegration(ctx, deviceDefinitionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceDefinitionIntegration", reflect.TypeOf((*MockDeviceDefinitionIntegrationService)(nil).GetDeviceDefinitionIntegration), ctx, deviceDefinitionID)
}
