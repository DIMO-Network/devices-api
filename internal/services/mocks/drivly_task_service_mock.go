// Code generated by MockGen. DO NOT EDIT.
// Source: drivly_task_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	services "github.com/DIMO-Network/devices-api/internal/services"
	gomock "github.com/golang/mock/gomock"
)

// MockDrivlyTaskService is a mock of DrivlyTaskService interface.
type MockDrivlyTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockDrivlyTaskServiceMockRecorder
}

// MockDrivlyTaskServiceMockRecorder is the mock recorder for MockDrivlyTaskService.
type MockDrivlyTaskServiceMockRecorder struct {
	mock *MockDrivlyTaskService
}

// NewMockDrivlyTaskService creates a new mock instance.
func NewMockDrivlyTaskService(ctrl *gomock.Controller) *MockDrivlyTaskService {
	mock := &MockDrivlyTaskService{ctrl: ctrl}
	mock.recorder = &MockDrivlyTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrivlyTaskService) EXPECT() *MockDrivlyTaskServiceMockRecorder {
	return m.recorder
}

// GetTaskStatus mocks base method.
func (m *MockDrivlyTaskService) GetTaskStatus(ctx context.Context, taskID string) (*services.DrivlyTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskStatus", ctx, taskID)
	ret0, _ := ret[0].(*services.DrivlyTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskStatus indicates an expected call of GetTaskStatus.
func (mr *MockDrivlyTaskServiceMockRecorder) GetTaskStatus(ctx, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskStatus", reflect.TypeOf((*MockDrivlyTaskService)(nil).GetTaskStatus), ctx, taskID)
}

// StartConsumer mocks base method.
func (m *MockDrivlyTaskService) StartConsumer(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartConsumer", ctx)
}

// StartConsumer indicates an expected call of StartConsumer.
func (mr *MockDrivlyTaskServiceMockRecorder) StartConsumer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConsumer", reflect.TypeOf((*MockDrivlyTaskService)(nil).StartConsumer), ctx)
}

// StartDrivlyUpdate mocks base method.
func (m *MockDrivlyTaskService) StartDrivlyUpdate(deviceDefinitionID, userDeviceID, vin string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDrivlyUpdate", deviceDefinitionID, userDeviceID, vin)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDrivlyUpdate indicates an expected call of StartDrivlyUpdate.
func (mr *MockDrivlyTaskServiceMockRecorder) StartDrivlyUpdate(deviceDefinitionID, userDeviceID, vin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDrivlyUpdate", reflect.TypeOf((*MockDrivlyTaskService)(nil).StartDrivlyUpdate), deviceDefinitionID, userDeviceID, vin)
}
