// Code generated by MockGen. DO NOT EDIT.
// Source: device_data_service.go
//
// Generated by this command:
//
//	mockgen -source device_data_service.go -destination mocks/device_data_service_mock.go
//
// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	grpc "github.com/DIMO-Network/device-data-api/pkg/grpc"
	privileges "github.com/DIMO-Network/shared/privileges"
	gomock "go.uber.org/mock/gomock"
)

// MockDeviceDataService is a mock of DeviceDataService interface.
type MockDeviceDataService struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceDataServiceMockRecorder
}

// MockDeviceDataServiceMockRecorder is the mock recorder for MockDeviceDataService.
type MockDeviceDataServiceMockRecorder struct {
	mock *MockDeviceDataService
}

// NewMockDeviceDataService creates a new mock instance.
func NewMockDeviceDataService(ctrl *gomock.Controller) *MockDeviceDataService {
	mock := &MockDeviceDataService{ctrl: ctrl}
	mock.recorder = &MockDeviceDataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceDataService) EXPECT() *MockDeviceDataServiceMockRecorder {
	return m.recorder
}

// GetDeviceData mocks base method.
func (m *MockDeviceDataService) GetDeviceData(ctx context.Context, userDeviceID, deviceDefinitionID, deviceStyleID string, privilegeIDs []privileges.Privilege) (*grpc.UserDeviceDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceData", ctx, userDeviceID, deviceDefinitionID, deviceStyleID, privilegeIDs)
	ret0, _ := ret[0].(*grpc.UserDeviceDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceData indicates an expected call of GetDeviceData.
func (mr *MockDeviceDataServiceMockRecorder) GetDeviceData(ctx, userDeviceID, deviceDefinitionID, deviceStyleID, privilegeIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceData", reflect.TypeOf((*MockDeviceDataService)(nil).GetDeviceData), ctx, userDeviceID, deviceDefinitionID, deviceStyleID, privilegeIDs)
}

// GetRawDeviceData mocks base method.
func (m *MockDeviceDataService) GetRawDeviceData(ctx context.Context, userDeviceID, integrationID string) (*grpc.RawDeviceDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawDeviceData", ctx, userDeviceID, integrationID)
	ret0, _ := ret[0].(*grpc.RawDeviceDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawDeviceData indicates an expected call of GetRawDeviceData.
func (mr *MockDeviceDataServiceMockRecorder) GetRawDeviceData(ctx, userDeviceID, integrationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawDeviceData", reflect.TypeOf((*MockDeviceDataService)(nil).GetRawDeviceData), ctx, userDeviceID, integrationID)
}
