// Code generated by MockGen. DO NOT EDIT.
// Source: device_definition_registrar.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	services "github.com/DIMO-Network/devices-api/internal/services"
	gomock "github.com/golang/mock/gomock"
)

// MockDeviceDefinitionRegistrar is a mock of DeviceDefinitionRegistrar interface.
type MockDeviceDefinitionRegistrar struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceDefinitionRegistrarMockRecorder
}

// MockDeviceDefinitionRegistrarMockRecorder is the mock recorder for MockDeviceDefinitionRegistrar.
type MockDeviceDefinitionRegistrarMockRecorder struct {
	mock *MockDeviceDefinitionRegistrar
}

// NewMockDeviceDefinitionRegistrar creates a new mock instance.
func NewMockDeviceDefinitionRegistrar(ctrl *gomock.Controller) *MockDeviceDefinitionRegistrar {
	mock := &MockDeviceDefinitionRegistrar{ctrl: ctrl}
	mock.recorder = &MockDeviceDefinitionRegistrarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceDefinitionRegistrar) EXPECT() *MockDeviceDefinitionRegistrarMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockDeviceDefinitionRegistrar) Register(d services.DeviceDefinitionDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockDeviceDefinitionRegistrarMockRecorder) Register(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockDeviceDefinitionRegistrar)(nil).Register), d)
}
