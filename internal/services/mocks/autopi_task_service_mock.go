// Code generated by MockGen. DO NOT EDIT.
// Source: autopi_task_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"
	time "time"

	services "github.com/DIMO-Network/devices-api/internal/services"
	redis "github.com/go-redis/redis/v8"
	gomock "github.com/golang/mock/gomock"
)

// MockAutoPiTaskService is a mock of AutoPiTaskService interface.
type MockAutoPiTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockAutoPiTaskServiceMockRecorder
}

// MockAutoPiTaskServiceMockRecorder is the mock recorder for MockAutoPiTaskService.
type MockAutoPiTaskServiceMockRecorder struct {
	mock *MockAutoPiTaskService
}

// NewMockAutoPiTaskService creates a new mock instance.
func NewMockAutoPiTaskService(ctrl *gomock.Controller) *MockAutoPiTaskService {
	mock := &MockAutoPiTaskService{ctrl: ctrl}
	mock.recorder = &MockAutoPiTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAutoPiTaskService) EXPECT() *MockAutoPiTaskServiceMockRecorder {
	return m.recorder
}

// GetTaskStatus mocks base method.
func (m *MockAutoPiTaskService) GetTaskStatus(ctx context.Context, taskID string) (*services.AutoPiTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskStatus", ctx, taskID)
	ret0, _ := ret[0].(*services.AutoPiTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskStatus indicates an expected call of GetTaskStatus.
func (mr *MockAutoPiTaskServiceMockRecorder) GetTaskStatus(ctx, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskStatus", reflect.TypeOf((*MockAutoPiTaskService)(nil).GetTaskStatus), ctx, taskID)
}

// StartAutoPiUpdate mocks base method.
func (m *MockAutoPiTaskService) StartAutoPiUpdate(deviceID, userID, unitID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAutoPiUpdate", deviceID, userID, unitID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAutoPiUpdate indicates an expected call of StartAutoPiUpdate.
func (mr *MockAutoPiTaskServiceMockRecorder) StartAutoPiUpdate(deviceID, userID, unitID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAutoPiUpdate", reflect.TypeOf((*MockAutoPiTaskService)(nil).StartAutoPiUpdate), deviceID, userID, unitID)
}

// StartConsumer mocks base method.
func (m *MockAutoPiTaskService) StartConsumer(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartConsumer", ctx)
}

// StartConsumer indicates an expected call of StartConsumer.
func (mr *MockAutoPiTaskServiceMockRecorder) StartConsumer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConsumer", reflect.TypeOf((*MockAutoPiTaskService)(nil).StartConsumer), ctx)
}

// StartQueryAndUpdateVIN mocks base method.
func (m *MockAutoPiTaskService) StartQueryAndUpdateVIN(deviceID, unitID, userDeviceID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartQueryAndUpdateVIN", deviceID, unitID, userDeviceID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartQueryAndUpdateVIN indicates an expected call of StartQueryAndUpdateVIN.
func (mr *MockAutoPiTaskServiceMockRecorder) StartQueryAndUpdateVIN(deviceID, unitID, userDeviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartQueryAndUpdateVIN", reflect.TypeOf((*MockAutoPiTaskService)(nil).StartQueryAndUpdateVIN), deviceID, unitID, userDeviceID)
}

// MockStandardRedis is a mock of StandardRedis interface.
type MockStandardRedis struct {
	ctrl     *gomock.Controller
	recorder *MockStandardRedisMockRecorder
}

// MockStandardRedisMockRecorder is the mock recorder for MockStandardRedis.
type MockStandardRedisMockRecorder struct {
	mock *MockStandardRedis
}

// NewMockStandardRedis creates a new mock instance.
func NewMockStandardRedis(ctrl *gomock.Controller) *MockStandardRedis {
	mock := &MockStandardRedis{ctrl: ctrl}
	mock.recorder = &MockStandardRedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStandardRedis) EXPECT() *MockStandardRedisMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockStandardRedis) Del(ctx context.Context, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockStandardRedisMockRecorder) Del(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockStandardRedis)(nil).Del), varargs...)
}

// Eval mocks base method.
func (m *MockStandardRedis) Eval(ctx context.Context, script string, keys []string, args ...interface{}) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, script, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Eval", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// Eval indicates an expected call of Eval.
func (mr *MockStandardRedisMockRecorder) Eval(ctx, script, keys interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, script, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockStandardRedis)(nil).Eval), varargs...)
}

// EvalSha mocks base method.
func (m *MockStandardRedis) EvalSha(ctx context.Context, sha1 string, keys []string, args ...interface{}) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sha1, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvalSha", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// EvalSha indicates an expected call of EvalSha.
func (mr *MockStandardRedisMockRecorder) EvalSha(ctx, sha1, keys interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sha1, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalSha", reflect.TypeOf((*MockStandardRedis)(nil).EvalSha), varargs...)
}

// Get mocks base method.
func (m *MockStandardRedis) Get(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockStandardRedisMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStandardRedis)(nil).Get), ctx, key)
}

// Pipelined mocks base method.
func (m *MockStandardRedis) Pipelined(ctx context.Context, fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipelined", ctx, fn)
	ret0, _ := ret[0].([]redis.Cmder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pipelined indicates an expected call of Pipelined.
func (mr *MockStandardRedisMockRecorder) Pipelined(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipelined", reflect.TypeOf((*MockStandardRedis)(nil).Pipelined), ctx, fn)
}

// ScriptExists mocks base method.
func (m *MockStandardRedis) ScriptExists(ctx context.Context, scripts ...string) *redis.BoolSliceCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range scripts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScriptExists", varargs...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// ScriptExists indicates an expected call of ScriptExists.
func (mr *MockStandardRedisMockRecorder) ScriptExists(ctx interface{}, scripts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, scripts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptExists", reflect.TypeOf((*MockStandardRedis)(nil).ScriptExists), varargs...)
}

// ScriptLoad mocks base method.
func (m *MockStandardRedis) ScriptLoad(ctx context.Context, script string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScriptLoad", ctx, script)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ScriptLoad indicates an expected call of ScriptLoad.
func (mr *MockStandardRedisMockRecorder) ScriptLoad(ctx, script interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptLoad", reflect.TypeOf((*MockStandardRedis)(nil).ScriptLoad), ctx, script)
}

// Set mocks base method.
func (m *MockStandardRedis) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStandardRedisMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStandardRedis)(nil).Set), ctx, key, value, expiration)
}

// SetNX mocks base method.
func (m *MockStandardRedis) SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNX", ctx, key, value, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// SetNX indicates an expected call of SetNX.
func (mr *MockStandardRedisMockRecorder) SetNX(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNX", reflect.TypeOf((*MockStandardRedis)(nil).SetNX), ctx, key, value, expiration)
}
