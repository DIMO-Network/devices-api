// Code generated by MockGen. DO NOT EDIT.
// Source: ./contracts_events_consumer.go
//
// Generated by this command:
//
//	mockgen -source=./contracts_events_consumer.go -destination=./contract_events_consumer_mocks_test.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	big "math/big"
	reflect "reflect"

	models "github.com/DIMO-Network/devices-api/models"
	gomock "go.uber.org/mock/gomock"
)

// MockIntegration is a mock of Integration interface.
type MockIntegration struct {
	ctrl     *gomock.Controller
	recorder *MockIntegrationMockRecorder
	isgomock struct{}
}

// MockIntegrationMockRecorder is the mock recorder for MockIntegration.
type MockIntegrationMockRecorder struct {
	mock *MockIntegration
}

// NewMockIntegration creates a new mock instance.
func NewMockIntegration(ctrl *gomock.Controller) *MockIntegration {
	mock := &MockIntegration{ctrl: ctrl}
	mock.recorder = &MockIntegrationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntegration) EXPECT() *MockIntegrationMockRecorder {
	return m.recorder
}

// Pair mocks base method.
func (m *MockIntegration) Pair(ctx context.Context, autoPiTokenID, vehicleTokenID *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pair", ctx, autoPiTokenID, vehicleTokenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pair indicates an expected call of Pair.
func (mr *MockIntegrationMockRecorder) Pair(ctx, autoPiTokenID, vehicleTokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pair", reflect.TypeOf((*MockIntegration)(nil).Pair), ctx, autoPiTokenID, vehicleTokenID)
}

// Unpair mocks base method.
func (m *MockIntegration) Unpair(ctx context.Context, autoPiTokenID, vehicleTokenID *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unpair", ctx, autoPiTokenID, vehicleTokenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unpair indicates an expected call of Unpair.
func (mr *MockIntegrationMockRecorder) Unpair(ctx, autoPiTokenID, vehicleTokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unpair", reflect.TypeOf((*MockIntegration)(nil).Unpair), ctx, autoPiTokenID, vehicleTokenID)
}

// MockSyntheticTaskService is a mock of SyntheticTaskService interface.
type MockSyntheticTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockSyntheticTaskServiceMockRecorder
	isgomock struct{}
}

// MockSyntheticTaskServiceMockRecorder is the mock recorder for MockSyntheticTaskService.
type MockSyntheticTaskServiceMockRecorder struct {
	mock *MockSyntheticTaskService
}

// NewMockSyntheticTaskService creates a new mock instance.
func NewMockSyntheticTaskService(ctrl *gomock.Controller) *MockSyntheticTaskService {
	mock := &MockSyntheticTaskService{ctrl: ctrl}
	mock.recorder = &MockSyntheticTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyntheticTaskService) EXPECT() *MockSyntheticTaskServiceMockRecorder {
	return m.recorder
}

// StopPoll mocks base method.
func (m *MockSyntheticTaskService) StopPoll(udai *models.UserDeviceAPIIntegration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPoll", udai)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopPoll indicates an expected call of StopPoll.
func (mr *MockSyntheticTaskServiceMockRecorder) StopPoll(udai any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPoll", reflect.TypeOf((*MockSyntheticTaskService)(nil).StopPoll), udai)
}
