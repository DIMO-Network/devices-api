// Code generated by MockGen. DO NOT EDIT.
// Source: synthetic_devices_controller.go
//
// Generated by this command:
//
//	mockgen -source synthetic_devices_controller.go -destination synthetic_devices_controller_mock_test.go -package controllers
//

// Package controllers is a generated GoMock package.
package controllers

import (
	context "context"
	reflect "reflect"

	grpc "github.com/DIMO-Network/tesla-oracle/pkg/grpc"
	gomock "go.uber.org/mock/gomock"
	grpc0 "google.golang.org/grpc"
)

// MockTeslaOracleClient is a mock of TeslaOracleClient interface.
type MockTeslaOracleClient struct {
	ctrl     *gomock.Controller
	recorder *MockTeslaOracleClientMockRecorder
	isgomock struct{}
}

// MockTeslaOracleClientMockRecorder is the mock recorder for MockTeslaOracleClient.
type MockTeslaOracleClientMockRecorder struct {
	mock *MockTeslaOracleClient
}

// NewMockTeslaOracleClient creates a new mock instance.
func NewMockTeslaOracleClient(ctrl *gomock.Controller) *MockTeslaOracleClient {
	mock := &MockTeslaOracleClient{ctrl: ctrl}
	mock.recorder = &MockTeslaOracleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeslaOracleClient) EXPECT() *MockTeslaOracleClientMockRecorder {
	return m.recorder
}

// RegisterNewSyntheticDeviceV2 mocks base method.
func (m *MockTeslaOracleClient) RegisterNewSyntheticDeviceV2(ctx context.Context, in *grpc.RegisterNewSyntheticDeviceV2Request, opts ...grpc0.CallOption) (*grpc.RegisterNewSyntheticDeviceV2Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterNewSyntheticDeviceV2", varargs...)
	ret0, _ := ret[0].(*grpc.RegisterNewSyntheticDeviceV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterNewSyntheticDeviceV2 indicates an expected call of RegisterNewSyntheticDeviceV2.
func (mr *MockTeslaOracleClientMockRecorder) RegisterNewSyntheticDeviceV2(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNewSyntheticDeviceV2", reflect.TypeOf((*MockTeslaOracleClient)(nil).RegisterNewSyntheticDeviceV2), varargs...)
}
