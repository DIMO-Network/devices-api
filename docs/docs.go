// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/aftermarket/device/by-address/{address}": {
            "get": {
                "description": "Retrieves NFT metadata for a given aftermarket device, using the device's\nEthereum address.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nfts"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ethereum address for the device.",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.NFTMetadataResp"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/aftermarket/device/by-serial/{serial}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Gets the information about the aftermarket device by serial number.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "integrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "AutoPi unit id or Macaron serial number",
                        "name": "serial",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.AutoPiDeviceInfo"
                        }
                    }
                }
            }
        },
        "/aftermarket/device/by-serial/{serial}/commands/claim": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Return the EIP-712 payload to be signed for Aftermarket device claiming.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "AutoPi unit id",
                        "name": "serial",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apitypes.TypedData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Return the EIP-712 payload to be signed for Aftermarket device claiming.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "AutoPi unit id",
                        "name": "serial",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Signatures from the user and device.",
                        "name": "claimRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.AftermarketDeviceClaimRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/aftermarket/device/by-serial/{serial}/commands/unclaim": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Dev-only endpoint for removing a claim. Removes the flag on-chain and clears\nthe owner in the database.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "AutoPi unit id",
                        "name": "serial",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/aftermarket/device/by-serial/{serial}/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "checks to see if aftermarket device needs to be updated, and starts update process if so.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "integrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "autopi unit id",
                        "name": "serial",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_services.AutoPiTask"
                        }
                    }
                }
            }
        },
        "/aftermarket/device/{tokenId}": {
            "get": {
                "description": "Retrieves NFT metadata for a given aftermarket device.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nfts"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.NFTMetadataResp"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/aftermarket/device/{tokenId}/image": {
            "get": {
                "description": "Returns the image for the given aftermarket device NFT.",
                "produces": [
                    "image/png"
                ],
                "tags": [
                    "nfts"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/countries": {
            "get": {
                "description": "Returns all the supported countries",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "countries"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_constants.CountryInfo"
                        }
                    }
                }
            }
        },
        "/countries/{countryCode}": {
            "get": {
                "description": "Returns a specific country by 3-letter ISO country code",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "countries"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "3-letter country code",
                        "name": "countryCode",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_constants.CountryInfo"
                        }
                    },
                    "400": {
                        "description": "invalid country code"
                    },
                    "404": {
                        "description": "country not found with that country code"
                    }
                }
            }
        },
        "/documents": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "gets all documents associated with current user - pulled from token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_controllers.DocumentResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "post document by id associated with current user - pulled from token",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "parameters": [
                    {
                        "type": "file",
                        "description": "The file to upload. file is required",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The document name. name is required",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The document type. type is required",
                        "name": "type",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The user device ID, optional",
                        "name": "userDeviceID",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.DocumentResponse"
                        }
                    }
                }
            }
        },
        "/documents/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "get document by id associated with current user - pulled from token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.DocumentResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "delete document associated with current user - pulled from token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/documents/{id}/download": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "download document associated with current user - pulled from token",
                "produces": [
                    "application/octet-stream",
                    "image/png",
                    "image/jpeg"
                ],
                "tags": [
                    "documents"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/integration/{tokenID}": {
            "get": {
                "description": "gets an integration using its tokenID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "integrations"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_controllers.NFTMetadataResp"
                            }
                        }
                    }
                }
            }
        },
        "/integration/{tokenID}/credentials": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Complete Tesla auth and get devices for authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "token id for integration",
                        "name": "tokenID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "all fields are required",
                        "name": "user_device",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CompleteOAuthExchangeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CompleteOAuthExchangeResponseWrapper"
                        }
                    }
                }
            }
        },
        "/user/devices": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "adds a device to a user. can add with only device_definition_id or with MMY, which will create a device_definition on the fly",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "description": "add device to user. either MMY or id are required",
                        "name": "user_device",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.RegisterUserDevice"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.RegisterUserDeviceResponse"
                        }
                    }
                }
            }
        },
        "/user/devices/fromsmartcar": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "adds a device to a user by decoding VIN from Smartcar. If cannot decode returns 424 or 500 if error.\nIf the user device already exists from a different integration, for the same user, this will return a 200 with the full user device object",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "description": "add device to user. all fields required",
                        "name": "user_device",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.RegisterUserDeviceSmartcar"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.UserDeviceFull"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.UserDeviceFull"
                        }
                    },
                    "400": {
                        "description": "validation failure"
                    },
                    "409": {
                        "description": "VIN already exists either for different a user"
                    },
                    "424": {
                        "description": "unable to decode VIN"
                    },
                    "500": {
                        "description": "server error, dependency error"
                    }
                }
            }
        },
        "/user/devices/fromvin": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "adds a device to a user by decoding a VIN. If cannot decode returns 424 or 500 if error. Can optionally include the can bus protocol.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "description": "add device to user. VIN is required and so is country",
                        "name": "user_device",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.RegisterUserDeviceVIN"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.UserDeviceFull"
                        }
                    },
                    "400": {
                        "description": "validation failure"
                    },
                    "424": {
                        "description": "unable to decode VIN"
                    },
                    "500": {
                        "description": "server error, dependency error"
                    }
                }
            }
        },
        "/user/devices/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "gets all devices associated with current user - pulled from token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.MyDevicesResp"
                        }
                    }
                }
            }
        },
        "/user/devices/shared": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "gets all devices shared with current user - pulled from token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.MyDevicesResp"
                        }
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "delete the user device record (hard delete)",
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "device id",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/aftermarket/commands/cloud-repair": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Re-apply AutoPi cloud actions in an attempt to get the device transmitting data again.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device id",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/aftermarket/commands/pair": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Return the EIP-712 payload to be signed for Aftermarket device pairing. The device must\neither already be integrated with the vehicle, or you must provide its unit id\nas a query parameter. In the latter case, the integration process will start\nonce the transaction confirms.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device id",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "External id, for now AutoPi unit id",
                        "name": "external_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "EIP-712 message for pairing.",
                        "schema": {
                            "$ref": "#/definitions/apitypes.TypedData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Submit the signature for pairing this device with its attached Aftermarket.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device id",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User signature.",
                        "name": "userSignature",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.AftermarketDevicePairRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/user/devices/{userDeviceID}/aftermarket/commands/unpair": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Return the EIP-712 payload to be signed for aftermarket device unpairing.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device id",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apitypes.TypedData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Submit the signature for unpairing this user device from its attached aftermarket device.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device id",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User signature.",
                        "name": "userSignature",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.AftermarketDevicePairRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/user/devices/{userDeviceID}/commands/mint": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns the data the user must sign in order to mint this device.",
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "user device ID",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apitypes.TypedData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends a mint device request to the blockchain",
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "user device ID",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Signature and NFT data",
                        "name": "mintRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.VehicleMintRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/commands/opt-in": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Opts the device into data-sharing, and hence rewards.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "user device id",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/commands/refresh": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Starts the process of refreshing device status from Smartcar",
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "user device ID",
                        "name": "user_device_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "429": {
                        "description": "rate limit hit for integration"
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/country_code": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "updates the CountryCode on the user device record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "description": "Country code",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.UpdateCountryCodeReq"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/error-codes": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "error-codes"
                ],
                "summary": "List all error code queries made for this vehicle.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user device id",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.GetUserDeviceErrorCodeQueriesResponse"
                        }
                    },
                    "404": {
                        "description": "Vehicle not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_controllers_helpers.ErrorRes"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "error-codes"
                ],
                "summary": "Obtain, store, and return descriptions for a list of error codes from this vehicle.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user device id",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "error codes",
                        "name": "queryDeviceErrorCodes",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.QueryDeviceErrorCodesReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.QueryDeviceErrorCodesResponse"
                        }
                    },
                    "404": {
                        "description": "Vehicle not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_controllers_helpers.ErrorRes"
                        }
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/error-codes/clear": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "error-codes"
                ],
                "summary": "Mark the most recent set of error codes as having been cleared.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.QueryDeviceErrorCodesResponse"
                        }
                    },
                    "404": {
                        "description": "Vehicle not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_controllers_helpers.ErrorRes"
                        }
                    },
                    "429": {
                        "description": "Last query already cleared",
                        "schema": {
                            "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_controllers_helpers.ErrorRes"
                        }
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/integrations/{integrationID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Receive status updates about a Smartcar integration",
                "tags": [
                    "integrations"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.GetUserDeviceIntegrationResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Submit credentials for registering a device with a given integration.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "integrations"
                ],
                "parameters": [
                    {
                        "description": "Integration credentials",
                        "name": "userDeviceIntegrationRegistration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.RegisterDeviceIntegrationRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove an integration from a device.",
                "tags": [
                    "integrations"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/integrations/{integrationID}/commands/burn": {
            "get": {
                "description": "Produces the payload that the user signs and submits to burn a synthetic device.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user device KSUID, must be minted",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "integration KSUD, must be software-based and active",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apitypes.TypedData"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Submit the signature required for the synthetic device burning meta-transaction.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user device KSUID, must be minted",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "integration KSUD, must be software-based and active",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "only field is the signed EIP-712",
                        "name": "signed",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.BurnSyntheticDeviceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apitypes.TypedData"
                            }
                        }
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/integrations/{integrationID}/commands/doors/lock": {
            "post": {
                "description": "Lock the device's doors.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device",
                    "integration",
                    "command"
                ],
                "summary": "Lock the device's doors",
                "operationId": "lock-doors",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Integration ID",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CommandResponse"
                        }
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/integrations/{integrationID}/commands/doors/unlock": {
            "post": {
                "description": "Unlock the device's doors.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device",
                    "integration",
                    "command"
                ],
                "summary": "Unlock the device's doors",
                "operationId": "unlock-doors",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Integration ID",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CommandResponse"
                        }
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/integrations/{integrationID}/commands/frunk/open": {
            "post": {
                "description": "Open the device's front trunk. Currently, this only works for Teslas connected through Tesla.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device",
                    "integration",
                    "command"
                ],
                "summary": "Open the device's front trunk",
                "operationId": "open-frunk",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Integration ID",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CommandResponse"
                        }
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/integrations/{integrationID}/commands/mint": {
            "get": {
                "description": "Produces the payload that the user signs and submits to mint a synthetic device for\nthe given vehicle and integration.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "integrations"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user device KSUID",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "integration KSUD, must be software-based",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/apitypes.TypedData"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Submit a metadata",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "integrations"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user device KSUID, must be minted",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "integration KSUD, must be software-based",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "only field is the signed EIP-712",
                        "name": "signed",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.MintSyntheticDeviceRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/integrations/{integrationID}/commands/telemetry/subscribe": {
            "post": {
                "description": "Subscribe vehicle for Telemetry Data. Currently, this only works for Teslas connected through Tesla.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device",
                    "integration",
                    "command"
                ],
                "summary": "Subscribe vehicle for Telemetry Data",
                "operationId": "telemetry-subscribe",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Integration ID",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/user/devices/{userDeviceID}/integrations/{integrationID}/commands/trunk/open": {
            "post": {
                "description": "Open the device's front trunk. Currently, this only works for Teslas connected through Tesla.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device",
                    "integration",
                    "command"
                ],
                "summary": "Open the device's rear trunk",
                "operationId": "open-trunk",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Integration ID",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CommandResponse"
                        }
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/integrations/{integrationID}/commands/{requestID}": {
            "get": {
                "description": "Get the status of a submitted command by request id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device",
                    "integration",
                    "command"
                ],
                "summary": "Get the status of a submitted command.",
                "operationId": "get-command-request-status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Integration ID",
                        "name": "integrationID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Command request ID",
                        "name": "requestID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CommandRequestStatusResp"
                        }
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/name": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "updates the Name on the user device record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "description": "Name",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.UpdateNameReq"
                        }
                    },
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "user_device_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/vin": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "updates the VIN on the user device record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "description": "VIN",
                        "name": "vin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.UpdateVINReq"
                        }
                    },
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user/devices/{userDeviceId}/commands/update-nft-image": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a user's NFT image.",
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "user device id",
                        "name": "userDeviceId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "base64-encoded NFT image data",
                        "name": "nftIamges",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.NFTImageData"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user/geofences": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "gets all geofences for the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "geofence"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_controllers.GetGeofence"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "adds a new geofence to the user's account, optionally attached to specific user_devices",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "geofence"
                ],
                "parameters": [
                    {
                        "description": "add geofence to user.",
                        "name": "geofence",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CreateGeofence"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_controllers_helpers.CreateResponse"
                        }
                    }
                }
            }
        },
        "/user/geofences/{geofenceID}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "updates an existing geofence for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "geofence"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "geofence id",
                        "name": "geofenceID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "add geofence to user.",
                        "name": "geofence",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CreateGeofence"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "hard deletes a geofence from db",
                "tags": [
                    "geofence"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "geofence id",
                        "name": "geofenceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/user/vehicle/{tokenID}/commands/burn": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns the data the user must sign in order to burn the device.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apitypes.TypedData"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sends a burn device request to the blockchain",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Signature",
                        "name": "burnRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.BurnRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/vehicle/{tokenID}/commands/doors/lock": {
            "post": {
                "description": "Lock the device's doors.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device",
                    "integration",
                    "command"
                ],
                "summary": "Lock the device's doors",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token ID",
                        "name": "tokenID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CommandResponse"
                        }
                    }
                }
            }
        },
        "/vehicle/{tokenID}/commands/doors/unlock": {
            "post": {
                "description": "Unlock the device's doors.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device",
                    "integration",
                    "command"
                ],
                "summary": "Unlock the device's doors",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token ID",
                        "name": "tokenID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CommandResponse"
                        }
                    }
                }
            }
        },
        "/vehicle/{tokenID}/commands/frunk/open": {
            "post": {
                "description": "Open the device's front trunk. Currently, this only works for Teslas connected through Tesla.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device",
                    "integration",
                    "command"
                ],
                "summary": "Open the device's front trunk",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token ID",
                        "name": "tokenID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CommandResponse"
                        }
                    }
                }
            }
        },
        "/vehicle/{tokenID}/commands/trunk/open": {
            "post": {
                "description": "Open the device's front trunk. Currently, this only works for Teslas connected through Tesla.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device",
                    "integration",
                    "command"
                ],
                "summary": "Open the device's rear trunk",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token ID",
                        "name": "tokenID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.CommandResponse"
                        }
                    }
                }
            }
        },
        "/vehicle/{tokenId}": {
            "get": {
                "description": "retrieves NFT metadata for a given tokenID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nfts"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.NFTMetadataResp"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/vehicle/{tokenId}/image": {
            "get": {
                "description": "Returns the image for the given vehicle NFT.",
                "produces": [
                    "image/png"
                ],
                "tags": [
                    "nfts"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "whether to remove the image background",
                        "name": "transparent",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/vehicle/{tokenId}/vin-credential": {
            "get": {
                "description": "Returns the vin credential for the vehicle with a given token id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "permission"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "token id",
                        "name": "tokenId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        }
    },
    "definitions": {
        "apitypes.Type": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "apitypes.TypedData": {
            "type": "object",
            "properties": {
                "domain": {
                    "$ref": "#/definitions/apitypes.TypedDataDomain"
                },
                "message": {
                    "$ref": "#/definitions/apitypes.TypedDataMessage"
                },
                "primaryType": {
                    "type": "string"
                },
                "types": {
                    "$ref": "#/definitions/apitypes.Types"
                }
            }
        },
        "apitypes.TypedDataDomain": {
            "type": "object",
            "properties": {
                "chainId": {
                    "$ref": "#/definitions/math.HexOrDecimal256"
                },
                "name": {
                    "type": "string"
                },
                "salt": {
                    "type": "string"
                },
                "verifyingContract": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "apitypes.TypedDataMessage": {
            "type": "object",
            "additionalProperties": true
        },
        "apitypes.Types": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/apitypes.Type"
                }
            }
        },
        "big.Int": {
            "type": "object"
        },
        "github_com_DIMO-Network_devices-api_internal_constants.CountryInfo": {
            "type": "object",
            "properties": {
                "alpha_2": {
                    "type": "string"
                },
                "alpha_3": {
                    "type": "string"
                },
                "lora_region": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "region_code": {
                    "type": "integer"
                },
                "sub_region": {
                    "type": "string"
                },
                "sub_region_code": {
                    "type": "integer"
                }
            }
        },
        "github_com_DIMO-Network_devices-api_internal_controllers_helpers.CreateResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "github_com_DIMO-Network_devices-api_internal_controllers_helpers.ErrorRes": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "github_com_DIMO-Network_devices-api_internal_services.AutoPiTask": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "taskId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "updates": {
                    "description": "Updates increments every time the job was updated.",
                    "type": "integer"
                }
            }
        },
        "github_com_DIMO-Network_devices-api_internal_services.DeviceAttribute": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "github_com_DIMO-Network_devices-api_internal_services.DeviceCompatibility": {
            "type": "object",
            "properties": {
                "capabilities": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "country": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "style": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "vendor": {
                    "type": "string"
                }
            }
        },
        "github_com_DIMO-Network_devices-api_internal_services.DeviceDefinition": {
            "type": "object",
            "properties": {
                "compatibleIntegrations": {
                    "description": "CompatibleIntegrations has systems this vehicle can integrate with",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_services.DeviceCompatibility"
                    }
                },
                "deviceAttributes": {
                    "description": "DeviceAttributes is a list of attributes for the device type as defined in device_types.properties",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_services.DeviceAttribute"
                    }
                },
                "deviceDefinitionId": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "make": {
                    "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_services.DeviceMake"
                },
                "metadata": {},
                "name": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_services.DeviceType"
                },
                "vehicleData": {
                    "description": "VehicleInfo will be empty if not a vehicle type",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_services.DeviceVehicleInfo"
                        }
                    ]
                },
                "verified": {
                    "type": "boolean"
                }
            }
        },
        "github_com_DIMO-Network_devices-api_internal_services.DeviceMake": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "logo_url": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "oem_platform_name": {
                    "type": "string"
                }
            }
        },
        "github_com_DIMO-Network_devices-api_internal_services.DeviceType": {
            "type": "object",
            "properties": {
                "make": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "subModels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "Type is eg. Vehicle, E-bike, roomba",
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "github_com_DIMO-Network_devices-api_internal_services.DeviceVehicleInfo": {
            "type": "object",
            "properties": {
                "base_msrp": {
                    "type": "integer"
                },
                "driven_wheels": {
                    "type": "string"
                },
                "epa_class": {
                    "type": "string"
                },
                "fuel_tank_capacity_gal": {
                    "type": "string"
                },
                "fuel_type": {
                    "type": "string"
                },
                "mpg": {
                    "type": "string"
                },
                "mpg_city": {
                    "type": "string"
                },
                "mpg_highway": {
                    "type": "string"
                },
                "number_of_doors": {
                    "type": "string"
                },
                "vehicle_type": {
                    "description": "VehicleType PASSENGER CAR, from NHTSA",
                    "type": "string"
                }
            }
        },
        "github_com_DIMO-Network_devices-api_internal_services.ErrorCodesResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "P0148"
                },
                "description": {
                    "type": "string",
                    "example": "Fuel delivery error"
                }
            }
        },
        "github_com_DIMO-Network_devices-api_internal_services.PowertrainType": {
            "type": "string",
            "enum": [
                "ICE",
                "HEV",
                "PHEV",
                "BEV",
                "FCEV"
            ],
            "x-enum-varnames": [
                "ICE",
                "HEV",
                "PHEV",
                "BEV",
                "FCEV"
            ]
        },
        "github_com_DIMO-Network_devices-api_internal_services.UserDeviceMetadata": {
            "type": "object",
            "properties": {
                "canProtocol": {
                    "description": "CANProtocol is the protocol that was detected by edge-network from the autopi.",
                    "type": "string"
                },
                "elasticDefinitionSynced": {
                    "type": "boolean"
                },
                "elasticRegionSynced": {
                    "type": "boolean"
                },
                "geoDecodedCountry": {
                    "type": "string"
                },
                "geoDecodedStateProv": {
                    "type": "string"
                },
                "postal_code": {
                    "type": "string"
                },
                "powertrainType": {
                    "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_services.PowertrainType"
                }
            }
        },
        "internal_controllers.AftermarketDeviceClaimRequest": {
            "type": "object",
            "properties": {
                "aftermarketDeviceSignature": {
                    "description": "AftermarketDeviceSignature is the signature from the aftermarket device.",
                    "type": "string"
                },
                "userSignature": {
                    "description": "UserSignature is the signature from the user, using their private key.",
                    "type": "string"
                }
            }
        },
        "internal_controllers.AftermarketDevicePairRequest": {
            "type": "object",
            "properties": {
                "aftermarketDeviceSignature": {
                    "description": "AftermarketDeviceSignature is the 65-byte, hex-encoded Ethereum signature of\nthe pairing payload by the device. Only needed if the vehicle owner and aftermarket\ndevice owner are not the same.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "externalId": {
                    "description": "ExternalID is the serial number of the aftermarket device.",
                    "type": "string"
                },
                "signature": {
                    "description": "Signature is the 65-byte, hex-encoded Ethereum signature of the pairing payload\nby the vehicle owner.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "internal_controllers.AutoPiDeviceInfo": {
            "type": "object",
            "properties": {
                "beneficiaryAddress": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "claim": {
                    "description": "Claim contains the status of the on-chain claiming meta-transaction.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/internal_controllers.TransactionStatus"
                        }
                    ]
                },
                "deviceId": {
                    "type": "string"
                },
                "dockerReleases": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "ethereumAddress": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "hwRevision": {
                    "type": "string"
                },
                "isUpdated": {
                    "type": "boolean"
                },
                "lastCommunication": {
                    "type": "string"
                },
                "manufacturer": {
                    "$ref": "#/definitions/internal_controllers.ManufacturerInfo"
                },
                "ownerAddress": {
                    "type": "string"
                },
                "pair": {
                    "description": "Pair contains the status of the on-chain pairing meta-transaction.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/internal_controllers.TransactionStatus"
                        }
                    ]
                },
                "releaseVersion": {
                    "type": "string"
                },
                "shouldUpdate": {
                    "type": "boolean"
                },
                "template": {
                    "type": "integer"
                },
                "tokenId": {
                    "$ref": "#/definitions/big.Int"
                },
                "unitId": {
                    "type": "string"
                },
                "unpair": {
                    "description": "Unpair contains the status of the on-chain unpairing meta-transaction.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/internal_controllers.TransactionStatus"
                        }
                    ]
                }
            }
        },
        "internal_controllers.BurnRequest": {
            "type": "object",
            "required": [
                "signature"
            ],
            "properties": {
                "signature": {
                    "description": "Signature is the hex encoding of the EIP-712 signature result.",
                    "type": "string"
                }
            }
        },
        "internal_controllers.BurnSyntheticDeviceRequest": {
            "type": "object",
            "properties": {
                "signature": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.CommandRequestStatusResp": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string",
                    "example": "doors/unlock"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2022-08-09T19:38:39Z"
                },
                "id": {
                    "type": "string",
                    "example": "2D8LqUHQtaMHH6LYPqznmJMBeZm"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "Complete",
                        "Failed"
                    ],
                    "example": "Complete"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2022-08-09T19:39:22Z"
                }
            }
        },
        "internal_controllers.CommandResponse": {
            "type": "object",
            "properties": {
                "requestId": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.CompleteOAuthExchangeRequest": {
            "type": "object",
            "properties": {
                "authorizationCode": {
                    "type": "string"
                },
                "redirectUri": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.CompleteOAuthExchangeResponse": {
            "type": "object",
            "properties": {
                "definition": {
                    "$ref": "#/definitions/internal_controllers.DeviceDefinition"
                },
                "externalId": {
                    "type": "string"
                },
                "vin": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.CompleteOAuthExchangeResponseWrapper": {
            "type": "object",
            "properties": {
                "vehicles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_controllers.CompleteOAuthExchangeResponse"
                    }
                }
            }
        },
        "internal_controllers.CreateGeofence": {
            "type": "object",
            "properties": {
                "h3Indexes": {
                    "description": "required: false",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "required: true",
                    "type": "string"
                },
                "type": {
                    "description": "one of following: \"PrivacyFence\", \"TriggerEntry\", \"TriggerExit\"\nrequired: true",
                    "type": "string"
                },
                "userDeviceIds": {
                    "description": "Optionally link the geofence with a list of user device ID",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "internal_controllers.DeviceDefinition": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "make": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "internal_controllers.DocumentResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "ext": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/internal_controllers.DocumentTypeEnum"
                },
                "url": {
                    "type": "string"
                },
                "userDeviceId": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.DocumentTypeEnum": {
            "type": "string",
            "enum": [
                "DriversLicense",
                "Other",
                "VehicleTitle",
                "VehicleRegistration",
                "VehicleInsurance",
                "VehicleMaintenance",
                "VehicleCustomImage"
            ],
            "x-enum-varnames": [
                "DriversLicense",
                "Other",
                "VehicleTitle",
                "VehicleRegistration",
                "VehicleInsurance",
                "VehicleMaintenance",
                "VehicleCustomImage"
            ]
        },
        "internal_controllers.GeoFenceUserDevice": {
            "type": "object",
            "properties": {
                "mmy": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "userDeviceId": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.GetGeofence": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "h3Indexes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_controllers.GeoFenceUserDevice"
                    }
                }
            }
        },
        "internal_controllers.GetUserDeviceErrorCodeQueriesResponse": {
            "type": "object",
            "properties": {
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_controllers.GetUserDeviceErrorCodeQueriesResponseItem"
                    }
                }
            }
        },
        "internal_controllers.GetUserDeviceErrorCodeQueriesResponseItem": {
            "type": "object",
            "properties": {
                "clearedAt": {
                    "description": "ClearedAt is the time at which the user cleared the codes from this query.\nMay be null.",
                    "type": "string",
                    "example": "2023-05-23T12:57:05Z"
                },
                "errorCodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_services.ErrorCodesResponse"
                    }
                },
                "requestedAt": {
                    "type": "string",
                    "example": "2023-05-23T12:56:36Z"
                }
            }
        },
        "internal_controllers.GetUserDeviceIntegrationResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt is the creation time of this integration for this device.",
                    "type": "string"
                },
                "externalId": {
                    "description": "ExternalID is the identifier used by the third party for the device. It may be absent if we\nhaven't authorized yet.",
                    "type": "string"
                },
                "status": {
                    "description": "Status is one of \"Pending\", \"PendingFirstData\", \"Active\", \"Failed\", \"DuplicateIntegration\".",
                    "type": "string"
                },
                "tesla": {
                    "description": "Contains further details about tesla integration status",
                    "allOf": [
                        {
                            "$ref": "#/definitions/internal_controllers.TeslaIntegrationInfo"
                        }
                    ]
                }
            }
        },
        "internal_controllers.ManufacturerInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "tokenId": {
                    "$ref": "#/definitions/big.Int"
                }
            }
        },
        "internal_controllers.MintSyntheticDeviceRequest": {
            "type": "object",
            "properties": {
                "signature": {
                    "type": "string",
                    "example": "0xc565d38982e1a5004efb5ee390fba0a08bb5e72b3f3e91094c66bc395c324f785425d58d5c1a601372d9c16164e380c63e89f1e0ea95fdefdf7b2854c4f938e81b"
                }
            }
        },
        "internal_controllers.MyDevicesResp": {
            "type": "object",
            "properties": {
                "sharedDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_controllers.UserDeviceFull"
                    }
                },
                "userDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_controllers.UserDeviceFull"
                    }
                }
            }
        },
        "internal_controllers.NFTAttribute": {
            "type": "object",
            "properties": {
                "trait_type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.NFTImageData": {
            "type": "object",
            "required": [
                "imageData"
            ],
            "properties": {
                "imageData": {
                    "description": "ImageData contains the base64-encoded NFT PNG image.",
                    "type": "string"
                },
                "imageDataTransparent": {
                    "description": "ImageDataTransparent contains the base64-encoded NFT PNG image\nwith a transparent background, for use in the app. For compatibility\nwith older versions it is not required.",
                    "type": "string"
                }
            }
        },
        "internal_controllers.NFTMetadataResp": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_controllers.NFTAttribute"
                    }
                },
                "description": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.Privilege": {
            "type": "object",
            "properties": {
                "expiry": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.PrivilegeUser": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_controllers.Privilege"
                    }
                }
            }
        },
        "internal_controllers.QueryDeviceErrorCodesReq": {
            "type": "object",
            "properties": {
                "errorCodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "P0106",
                        "P0279"
                    ]
                }
            }
        },
        "internal_controllers.QueryDeviceErrorCodesResponse": {
            "type": "object",
            "properties": {
                "clearedAt": {
                    "type": "string"
                },
                "errorCodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_services.ErrorCodesResponse"
                    }
                }
            }
        },
        "internal_controllers.RegisterDeviceIntegrationRequest": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "code": {
                    "description": "Code is an OAuth authorization code. Not used in all integrations.",
                    "type": "string"
                },
                "expiresIn": {
                    "type": "integer"
                },
                "externalId": {
                    "description": "ExternalID specifies which vehicle on the account to select. It is only used for\nsoftware integrations.",
                    "type": "string"
                },
                "redirectURI": {
                    "description": "RedirectURI is the OAuth redirect URI used by the frontend. Not used in all integrations.",
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "internal_controllers.RegisterUserDevice": {
            "type": "object",
            "properties": {
                "countryCode": {
                    "type": "string"
                },
                "deviceDefinitionId": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.RegisterUserDeviceResponse": {
            "type": "object",
            "properties": {
                "deviceDefinitionId": {
                    "type": "string"
                },
                "integrationCapabilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_services.DeviceCompatibility"
                    }
                },
                "userDeviceId": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.RegisterUserDeviceSmartcar": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code refers to the auth code provided by smartcar when user logs in",
                    "type": "string"
                },
                "countryCode": {
                    "type": "string"
                },
                "redirectURI": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.RegisterUserDeviceVIN": {
            "type": "object",
            "properties": {
                "canProtocol": {
                    "description": "CANProtocol is the protocol that was detected by edge-network from the autopi.",
                    "type": "string"
                },
                "countryCode": {
                    "type": "string"
                },
                "vin": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.SyntheticDeviceStatus": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address is the Ethereum address of the synthetic device.",
                    "type": "string",
                    "example": "0xAED7EA8035eEc47E657B34eF5D020c7005487443"
                },
                "burnTransaction": {
                    "description": "BurnTransaction contains the status of the synthetic device burning meta-transaction,\nif one is in flight or has failed.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/internal_controllers.TransactionStatus"
                        }
                    ]
                },
                "failureReason": {
                    "description": "FailureReason is populated with a human-readable error message if the status\nis \"Failed\" because of an on-chain revert and we were able to decode the reason.",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the status of the minting meta-transaction.",
                    "type": "string",
                    "enum": [
                        "Unstarted",
                        "Submitted",
                        "Mined",
                        "Confirmed",
                        "Failed"
                    ],
                    "example": "Confirmed"
                },
                "tokenId": {
                    "description": "TokenID is the token id of the minted device.",
                    "type": "number",
                    "example": 15
                },
                "txHash": {
                    "description": "TxHash is the hash of the submitted transaction.",
                    "type": "string",
                    "example": "0x30bce3da6985897224b29a0fe064fd2b426bb85a394cc09efe823b5c83326a8e"
                }
            }
        },
        "internal_controllers.TeslaIntegrationInfo": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion is the version of the Tesla API being used. There are currently two valid values:\n1 is the old \"Owner API\", 2 is the new \"Fleet API\".",
                    "type": "integer"
                },
                "telemetrySubscribed": {
                    "description": "TelemetrySubscribed is true if DIMO has subscribed to the vehicle's telemetry stream.",
                    "type": "boolean"
                },
                "virtualKeyAdded": {
                    "description": "VirtualKeyAdded is true if the DIMO virtual key has been added to the vehicle.",
                    "type": "boolean"
                }
            }
        },
        "internal_controllers.TransactionStatus": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt is the timestamp of the creation of the meta-transaction.",
                    "type": "string",
                    "example": "2022-10-01T09:22:21.002Z"
                },
                "failureReason": {
                    "description": "FailureReason is populated with a human-readable error message if the status\nis \"Failed\" because of an on-chain revert and we were able to decode the reason.",
                    "type": "string"
                },
                "hash": {
                    "description": "Hash is the hexidecimal transaction hash, available for any transaction at the Submitted stage or greater.",
                    "type": "string",
                    "example": "0x28b4662f1e1b15083261a4a5077664f4003d58cb528826b7aab7fad466c28e70"
                },
                "status": {
                    "description": "Status is the state of the transaction performing this operation.",
                    "type": "string",
                    "enum": [
                        "Unsubmitted",
                        "Submitted",
                        "Mined",
                        "Confirmed",
                        "Failed"
                    ],
                    "example": "Mined"
                },
                "updatedAt": {
                    "description": "UpdatedAt is the last time we updated the status of the transaction.",
                    "type": "string",
                    "example": "2022-10-01T09:22:26.337Z"
                }
            }
        },
        "internal_controllers.UpdateCountryCodeReq": {
            "type": "object",
            "properties": {
                "countryCode": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.UpdateNameReq": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.UpdateVINReq": {
            "type": "object",
            "required": [
                "vin"
            ],
            "properties": {
                "signature": {
                    "description": "Signature is the hex-encoded result of the AutoPi signing the VIN. It must\nbe present to verify the VIN.",
                    "type": "string",
                    "example": "16b15f88bbd2e0a22d1d0084b8b7080f2003ea83eab1a00f80d8c18446c9c1b6224f17aa09eaf167717ca4f355bb6dc94356e037edf3adf6735a86fc3741f5231b"
                },
                "vin": {
                    "description": "VIN is a vehicle identification number. At the very least, it must be\n17 characters in length and contain only letters and numbers.",
                    "type": "string",
                    "example": "4Y1SL65848Z411439"
                }
            }
        },
        "internal_controllers.UserDeviceFull": {
            "type": "object",
            "properties": {
                "countryCode": {
                    "type": "string"
                },
                "customImageUrl": {
                    "type": "string"
                },
                "deviceDefinition": {
                    "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_services.DeviceDefinition"
                },
                "id": {
                    "type": "string"
                },
                "integrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_controllers.UserDeviceIntegrationStatus"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/github_com_DIMO-Network_devices-api_internal_services.UserDeviceMetadata"
                },
                "name": {
                    "type": "string"
                },
                "nft": {
                    "$ref": "#/definitions/internal_controllers.VehicleNFTData"
                },
                "optedInAt": {
                    "type": "string"
                },
                "privilegedUsers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_controllers.PrivilegeUser"
                    }
                },
                "vin": {
                    "type": "string"
                },
                "vinConfirmed": {
                    "type": "boolean"
                },
                "vinCredential": {
                    "$ref": "#/definitions/internal_controllers.VINCredentialData"
                }
            }
        },
        "internal_controllers.UserDeviceIntegrationStatus": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "integrationId": {
                    "type": "string"
                },
                "integrationVendor": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "syntheticDevice": {
                    "$ref": "#/definitions/internal_controllers.SyntheticDeviceStatus"
                },
                "tokenId": {
                    "$ref": "#/definitions/big.Int"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.VINCredentialData": {
            "type": "object",
            "properties": {
                "expiresAt": {
                    "type": "string"
                },
                "issuedAt": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                },
                "vin": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.VehicleMintRequest": {
            "type": "object",
            "required": [
                "imageData",
                "signature"
            ],
            "properties": {
                "imageData": {
                    "description": "ImageData contains the base64-encoded NFT PNG image.",
                    "type": "string"
                },
                "imageDataTransparent": {
                    "description": "ImageDataTransparent contains the base64-encoded NFT PNG image\nwith a transparent background, for use in the app. For compatibility\nwith older versions it is not required.",
                    "type": "string"
                },
                "signature": {
                    "description": "Signature is the hex encoding of the EIP-712 signature result.",
                    "type": "string"
                }
            }
        },
        "internal_controllers.VehicleNFTData": {
            "type": "object",
            "properties": {
                "burnTransaction": {
                    "description": "BurnTransaction contains the status of the vehicle burning meta-transaction, if one\nis in flight or has failed.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/internal_controllers.TransactionStatus"
                        }
                    ]
                },
                "failureReason": {
                    "description": "FailureReason is populated if the status is \"Failed\" because of an on-chain revert and\nwe were able to decode the reason.",
                    "type": "string"
                },
                "ownerAddress": {
                    "description": "OwnerAddress is the Ethereum address of the NFT owner.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "status": {
                    "description": "Status is the minting status of the NFT.",
                    "type": "string",
                    "enum": [
                        "Unstarted",
                        "Submitted",
                        "Mined",
                        "Confirmed",
                        "Failed"
                    ],
                    "example": "Confirmed"
                },
                "tokenId": {
                    "type": "number",
                    "example": 37
                },
                "tokenUri": {
                    "type": "string",
                    "example": "https://nft.dimo.zone/37"
                },
                "txHash": {
                    "description": "TxHash is the hash of the minting transaction.",
                    "type": "string",
                    "example": "0x30bce3da6985897224b29a0fe064fd2b426bb85a394cc09efe823b5c83326a8e"
                }
            }
        },
        "math.HexOrDecimal256": {
            "type": "object"
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "DIMO Devices API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
