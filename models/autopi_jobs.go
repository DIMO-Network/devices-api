// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AutopiJob is an object representing the database table.
type AutopiJob struct {
	ID                 string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	AutopiDeviceID     string      `boil:"autopi_device_id" json:"autopi_device_id" toml:"autopi_device_id" yaml:"autopi_device_id"`
	Command            string      `boil:"command" json:"command" toml:"command" yaml:"command"`
	State              string      `boil:"state" json:"state" toml:"state" yaml:"state"`
	CommandLastUpdated null.Time   `boil:"command_last_updated" json:"command_last_updated,omitempty" toml:"command_last_updated" yaml:"command_last_updated,omitempty"`
	UserDeviceID       null.String `boil:"user_device_id" json:"user_device_id,omitempty" toml:"user_device_id" yaml:"user_device_id,omitempty"`
	CreatedAt          time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	AutopiUnitID       null.String `boil:"autopi_unit_id" json:"autopi_unit_id,omitempty" toml:"autopi_unit_id" yaml:"autopi_unit_id,omitempty"`
	CommandResult      null.JSON   `boil:"command_result" json:"command_result,omitempty" toml:"command_result" yaml:"command_result,omitempty"`

	R *autopiJobR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L autopiJobL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AutopiJobColumns = struct {
	ID                 string
	AutopiDeviceID     string
	Command            string
	State              string
	CommandLastUpdated string
	UserDeviceID       string
	CreatedAt          string
	UpdatedAt          string
	AutopiUnitID       string
	CommandResult      string
}{
	ID:                 "id",
	AutopiDeviceID:     "autopi_device_id",
	Command:            "command",
	State:              "state",
	CommandLastUpdated: "command_last_updated",
	UserDeviceID:       "user_device_id",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	AutopiUnitID:       "autopi_unit_id",
	CommandResult:      "command_result",
}

var AutopiJobTableColumns = struct {
	ID                 string
	AutopiDeviceID     string
	Command            string
	State              string
	CommandLastUpdated string
	UserDeviceID       string
	CreatedAt          string
	UpdatedAt          string
	AutopiUnitID       string
	CommandResult      string
}{
	ID:                 "autopi_jobs.id",
	AutopiDeviceID:     "autopi_jobs.autopi_device_id",
	Command:            "autopi_jobs.command",
	State:              "autopi_jobs.state",
	CommandLastUpdated: "autopi_jobs.command_last_updated",
	UserDeviceID:       "autopi_jobs.user_device_id",
	CreatedAt:          "autopi_jobs.created_at",
	UpdatedAt:          "autopi_jobs.updated_at",
	AutopiUnitID:       "autopi_jobs.autopi_unit_id",
	CommandResult:      "autopi_jobs.command_result",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AutopiJobWhere = struct {
	ID                 whereHelperstring
	AutopiDeviceID     whereHelperstring
	Command            whereHelperstring
	State              whereHelperstring
	CommandLastUpdated whereHelpernull_Time
	UserDeviceID       whereHelpernull_String
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	AutopiUnitID       whereHelpernull_String
	CommandResult      whereHelpernull_JSON
}{
	ID:                 whereHelperstring{field: "\"devices_api\".\"autopi_jobs\".\"id\""},
	AutopiDeviceID:     whereHelperstring{field: "\"devices_api\".\"autopi_jobs\".\"autopi_device_id\""},
	Command:            whereHelperstring{field: "\"devices_api\".\"autopi_jobs\".\"command\""},
	State:              whereHelperstring{field: "\"devices_api\".\"autopi_jobs\".\"state\""},
	CommandLastUpdated: whereHelpernull_Time{field: "\"devices_api\".\"autopi_jobs\".\"command_last_updated\""},
	UserDeviceID:       whereHelpernull_String{field: "\"devices_api\".\"autopi_jobs\".\"user_device_id\""},
	CreatedAt:          whereHelpertime_Time{field: "\"devices_api\".\"autopi_jobs\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"devices_api\".\"autopi_jobs\".\"updated_at\""},
	AutopiUnitID:       whereHelpernull_String{field: "\"devices_api\".\"autopi_jobs\".\"autopi_unit_id\""},
	CommandResult:      whereHelpernull_JSON{field: "\"devices_api\".\"autopi_jobs\".\"command_result\""},
}

// AutopiJobRels is where relationship names are stored.
var AutopiJobRels = struct {
	AutopiUnit string
	UserDevice string
}{
	AutopiUnit: "AutopiUnit",
	UserDevice: "UserDevice",
}

// autopiJobR is where relationships are stored.
type autopiJobR struct {
	AutopiUnit *AutopiUnit `boil:"AutopiUnit" json:"AutopiUnit" toml:"AutopiUnit" yaml:"AutopiUnit"`
	UserDevice *UserDevice `boil:"UserDevice" json:"UserDevice" toml:"UserDevice" yaml:"UserDevice"`
}

// NewStruct creates a new relationship struct
func (*autopiJobR) NewStruct() *autopiJobR {
	return &autopiJobR{}
}

func (r *autopiJobR) GetAutopiUnit() *AutopiUnit {
	if r == nil {
		return nil
	}
	return r.AutopiUnit
}

func (r *autopiJobR) GetUserDevice() *UserDevice {
	if r == nil {
		return nil
	}
	return r.UserDevice
}

// autopiJobL is where Load methods for each relationship are stored.
type autopiJobL struct{}

var (
	autopiJobAllColumns            = []string{"id", "autopi_device_id", "command", "state", "command_last_updated", "user_device_id", "created_at", "updated_at", "autopi_unit_id", "command_result"}
	autopiJobColumnsWithoutDefault = []string{"id", "autopi_device_id", "command"}
	autopiJobColumnsWithDefault    = []string{"state", "command_last_updated", "user_device_id", "created_at", "updated_at", "autopi_unit_id", "command_result"}
	autopiJobPrimaryKeyColumns     = []string{"id"}
	autopiJobGeneratedColumns      = []string{}
)

type (
	// AutopiJobSlice is an alias for a slice of pointers to AutopiJob.
	// This should almost always be used instead of []AutopiJob.
	AutopiJobSlice []*AutopiJob
	// AutopiJobHook is the signature for custom AutopiJob hook methods
	AutopiJobHook func(context.Context, boil.ContextExecutor, *AutopiJob) error

	autopiJobQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	autopiJobType                 = reflect.TypeOf(&AutopiJob{})
	autopiJobMapping              = queries.MakeStructMapping(autopiJobType)
	autopiJobPrimaryKeyMapping, _ = queries.BindMapping(autopiJobType, autopiJobMapping, autopiJobPrimaryKeyColumns)
	autopiJobInsertCacheMut       sync.RWMutex
	autopiJobInsertCache          = make(map[string]insertCache)
	autopiJobUpdateCacheMut       sync.RWMutex
	autopiJobUpdateCache          = make(map[string]updateCache)
	autopiJobUpsertCacheMut       sync.RWMutex
	autopiJobUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var autopiJobAfterSelectHooks []AutopiJobHook

var autopiJobBeforeInsertHooks []AutopiJobHook
var autopiJobAfterInsertHooks []AutopiJobHook

var autopiJobBeforeUpdateHooks []AutopiJobHook
var autopiJobAfterUpdateHooks []AutopiJobHook

var autopiJobBeforeDeleteHooks []AutopiJobHook
var autopiJobAfterDeleteHooks []AutopiJobHook

var autopiJobBeforeUpsertHooks []AutopiJobHook
var autopiJobAfterUpsertHooks []AutopiJobHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AutopiJob) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autopiJobAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AutopiJob) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autopiJobBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AutopiJob) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autopiJobAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AutopiJob) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autopiJobBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AutopiJob) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autopiJobAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AutopiJob) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autopiJobBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AutopiJob) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autopiJobAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AutopiJob) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autopiJobBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AutopiJob) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autopiJobAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAutopiJobHook registers your hook function for all future operations.
func AddAutopiJobHook(hookPoint boil.HookPoint, autopiJobHook AutopiJobHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		autopiJobAfterSelectHooks = append(autopiJobAfterSelectHooks, autopiJobHook)
	case boil.BeforeInsertHook:
		autopiJobBeforeInsertHooks = append(autopiJobBeforeInsertHooks, autopiJobHook)
	case boil.AfterInsertHook:
		autopiJobAfterInsertHooks = append(autopiJobAfterInsertHooks, autopiJobHook)
	case boil.BeforeUpdateHook:
		autopiJobBeforeUpdateHooks = append(autopiJobBeforeUpdateHooks, autopiJobHook)
	case boil.AfterUpdateHook:
		autopiJobAfterUpdateHooks = append(autopiJobAfterUpdateHooks, autopiJobHook)
	case boil.BeforeDeleteHook:
		autopiJobBeforeDeleteHooks = append(autopiJobBeforeDeleteHooks, autopiJobHook)
	case boil.AfterDeleteHook:
		autopiJobAfterDeleteHooks = append(autopiJobAfterDeleteHooks, autopiJobHook)
	case boil.BeforeUpsertHook:
		autopiJobBeforeUpsertHooks = append(autopiJobBeforeUpsertHooks, autopiJobHook)
	case boil.AfterUpsertHook:
		autopiJobAfterUpsertHooks = append(autopiJobAfterUpsertHooks, autopiJobHook)
	}
}

// One returns a single autopiJob record from the query.
func (q autopiJobQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AutopiJob, error) {
	o := &AutopiJob{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for autopi_jobs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AutopiJob records from the query.
func (q autopiJobQuery) All(ctx context.Context, exec boil.ContextExecutor) (AutopiJobSlice, error) {
	var o []*AutopiJob

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AutopiJob slice")
	}

	if len(autopiJobAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AutopiJob records in the query.
func (q autopiJobQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count autopi_jobs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q autopiJobQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if autopi_jobs exists")
	}

	return count > 0, nil
}

// AutopiUnit pointed to by the foreign key.
func (o *AutopiJob) AutopiUnit(mods ...qm.QueryMod) autopiUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"autopi_unit_id\" = ?", o.AutopiUnitID),
	}

	queryMods = append(queryMods, mods...)

	return AutopiUnits(queryMods...)
}

// UserDevice pointed to by the foreign key.
func (o *AutopiJob) UserDevice(mods ...qm.QueryMod) userDeviceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserDeviceID),
	}

	queryMods = append(queryMods, mods...)

	return UserDevices(queryMods...)
}

// LoadAutopiUnit allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (autopiJobL) LoadAutopiUnit(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutopiJob interface{}, mods queries.Applicator) error {
	var slice []*AutopiJob
	var object *AutopiJob

	if singular {
		var ok bool
		object, ok = maybeAutopiJob.(*AutopiJob)
		if !ok {
			object = new(AutopiJob)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutopiJob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutopiJob))
			}
		}
	} else {
		s, ok := maybeAutopiJob.(*[]*AutopiJob)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutopiJob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutopiJob))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &autopiJobR{}
		}
		if !queries.IsNil(object.AutopiUnitID) {
			args = append(args, object.AutopiUnitID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autopiJobR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AutopiUnitID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AutopiUnitID) {
				args = append(args, obj.AutopiUnitID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.autopi_units`),
		qm.WhereIn(`devices_api.autopi_units.autopi_unit_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AutopiUnit")
	}

	var resultSlice []*AutopiUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AutopiUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for autopi_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for autopi_units")
	}

	if len(autopiJobAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AutopiUnit = foreign
		if foreign.R == nil {
			foreign.R = &autopiUnitR{}
		}
		foreign.R.AutopiJobs = append(foreign.R.AutopiJobs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AutopiUnitID, foreign.AutopiUnitID) {
				local.R.AutopiUnit = foreign
				if foreign.R == nil {
					foreign.R = &autopiUnitR{}
				}
				foreign.R.AutopiJobs = append(foreign.R.AutopiJobs, local)
				break
			}
		}
	}

	return nil
}

// LoadUserDevice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (autopiJobL) LoadUserDevice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutopiJob interface{}, mods queries.Applicator) error {
	var slice []*AutopiJob
	var object *AutopiJob

	if singular {
		var ok bool
		object, ok = maybeAutopiJob.(*AutopiJob)
		if !ok {
			object = new(AutopiJob)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutopiJob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutopiJob))
			}
		}
	} else {
		s, ok := maybeAutopiJob.(*[]*AutopiJob)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutopiJob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutopiJob))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &autopiJobR{}
		}
		if !queries.IsNil(object.UserDeviceID) {
			args = append(args, object.UserDeviceID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autopiJobR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserDeviceID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserDeviceID) {
				args = append(args, obj.UserDeviceID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.user_devices`),
		qm.WhereIn(`devices_api.user_devices.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserDevice")
	}

	var resultSlice []*UserDevice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserDevice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_devices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_devices")
	}

	if len(autopiJobAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserDevice = foreign
		if foreign.R == nil {
			foreign.R = &userDeviceR{}
		}
		foreign.R.AutopiJobs = append(foreign.R.AutopiJobs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserDeviceID, foreign.ID) {
				local.R.UserDevice = foreign
				if foreign.R == nil {
					foreign.R = &userDeviceR{}
				}
				foreign.R.AutopiJobs = append(foreign.R.AutopiJobs, local)
				break
			}
		}
	}

	return nil
}

// SetAutopiUnit of the autopiJob to the related item.
// Sets o.R.AutopiUnit to related.
// Adds o to related.R.AutopiJobs.
func (o *AutopiJob) SetAutopiUnit(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AutopiUnit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"autopi_jobs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"autopi_unit_id"}),
		strmangle.WhereClause("\"", "\"", 2, autopiJobPrimaryKeyColumns),
	)
	values := []interface{}{related.AutopiUnitID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AutopiUnitID, related.AutopiUnitID)
	if o.R == nil {
		o.R = &autopiJobR{
			AutopiUnit: related,
		}
	} else {
		o.R.AutopiUnit = related
	}

	if related.R == nil {
		related.R = &autopiUnitR{
			AutopiJobs: AutopiJobSlice{o},
		}
	} else {
		related.R.AutopiJobs = append(related.R.AutopiJobs, o)
	}

	return nil
}

// RemoveAutopiUnit relationship.
// Sets o.R.AutopiUnit to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AutopiJob) RemoveAutopiUnit(ctx context.Context, exec boil.ContextExecutor, related *AutopiUnit) error {
	var err error

	queries.SetScanner(&o.AutopiUnitID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("autopi_unit_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AutopiUnit = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AutopiJobs {
		if queries.Equal(o.AutopiUnitID, ri.AutopiUnitID) {
			continue
		}

		ln := len(related.R.AutopiJobs)
		if ln > 1 && i < ln-1 {
			related.R.AutopiJobs[i] = related.R.AutopiJobs[ln-1]
		}
		related.R.AutopiJobs = related.R.AutopiJobs[:ln-1]
		break
	}
	return nil
}

// SetUserDevice of the autopiJob to the related item.
// Sets o.R.UserDevice to related.
// Adds o to related.R.AutopiJobs.
func (o *AutopiJob) SetUserDevice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserDevice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"autopi_jobs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_device_id"}),
		strmangle.WhereClause("\"", "\"", 2, autopiJobPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserDeviceID, related.ID)
	if o.R == nil {
		o.R = &autopiJobR{
			UserDevice: related,
		}
	} else {
		o.R.UserDevice = related
	}

	if related.R == nil {
		related.R = &userDeviceR{
			AutopiJobs: AutopiJobSlice{o},
		}
	} else {
		related.R.AutopiJobs = append(related.R.AutopiJobs, o)
	}

	return nil
}

// RemoveUserDevice relationship.
// Sets o.R.UserDevice to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AutopiJob) RemoveUserDevice(ctx context.Context, exec boil.ContextExecutor, related *UserDevice) error {
	var err error

	queries.SetScanner(&o.UserDeviceID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_device_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UserDevice = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AutopiJobs {
		if queries.Equal(o.UserDeviceID, ri.UserDeviceID) {
			continue
		}

		ln := len(related.R.AutopiJobs)
		if ln > 1 && i < ln-1 {
			related.R.AutopiJobs[i] = related.R.AutopiJobs[ln-1]
		}
		related.R.AutopiJobs = related.R.AutopiJobs[:ln-1]
		break
	}
	return nil
}

// AutopiJobs retrieves all the records using an executor.
func AutopiJobs(mods ...qm.QueryMod) autopiJobQuery {
	mods = append(mods, qm.From("\"devices_api\".\"autopi_jobs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"devices_api\".\"autopi_jobs\".*"})
	}

	return autopiJobQuery{q}
}

// FindAutopiJob retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAutopiJob(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AutopiJob, error) {
	autopiJobObj := &AutopiJob{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"devices_api\".\"autopi_jobs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, autopiJobObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from autopi_jobs")
	}

	if err = autopiJobObj.doAfterSelectHooks(ctx, exec); err != nil {
		return autopiJobObj, err
	}

	return autopiJobObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AutopiJob) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no autopi_jobs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(autopiJobColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	autopiJobInsertCacheMut.RLock()
	cache, cached := autopiJobInsertCache[key]
	autopiJobInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			autopiJobAllColumns,
			autopiJobColumnsWithDefault,
			autopiJobColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(autopiJobType, autopiJobMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(autopiJobType, autopiJobMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"devices_api\".\"autopi_jobs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"devices_api\".\"autopi_jobs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into autopi_jobs")
	}

	if !cached {
		autopiJobInsertCacheMut.Lock()
		autopiJobInsertCache[key] = cache
		autopiJobInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AutopiJob.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AutopiJob) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	autopiJobUpdateCacheMut.RLock()
	cache, cached := autopiJobUpdateCache[key]
	autopiJobUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			autopiJobAllColumns,
			autopiJobPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update autopi_jobs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"devices_api\".\"autopi_jobs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, autopiJobPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(autopiJobType, autopiJobMapping, append(wl, autopiJobPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update autopi_jobs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for autopi_jobs")
	}

	if !cached {
		autopiJobUpdateCacheMut.Lock()
		autopiJobUpdateCache[key] = cache
		autopiJobUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q autopiJobQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for autopi_jobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for autopi_jobs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AutopiJobSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autopiJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"devices_api\".\"autopi_jobs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, autopiJobPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in autopiJob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all autopiJob")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AutopiJob) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no autopi_jobs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(autopiJobColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	autopiJobUpsertCacheMut.RLock()
	cache, cached := autopiJobUpsertCache[key]
	autopiJobUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			autopiJobAllColumns,
			autopiJobColumnsWithDefault,
			autopiJobColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			autopiJobAllColumns,
			autopiJobPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert autopi_jobs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(autopiJobPrimaryKeyColumns))
			copy(conflict, autopiJobPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"devices_api\".\"autopi_jobs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(autopiJobType, autopiJobMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(autopiJobType, autopiJobMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert autopi_jobs")
	}

	if !cached {
		autopiJobUpsertCacheMut.Lock()
		autopiJobUpsertCache[key] = cache
		autopiJobUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AutopiJob record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AutopiJob) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AutopiJob provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), autopiJobPrimaryKeyMapping)
	sql := "DELETE FROM \"devices_api\".\"autopi_jobs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from autopi_jobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for autopi_jobs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q autopiJobQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no autopiJobQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from autopi_jobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for autopi_jobs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AutopiJobSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(autopiJobBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autopiJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"devices_api\".\"autopi_jobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, autopiJobPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from autopiJob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for autopi_jobs")
	}

	if len(autopiJobAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AutopiJob) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAutopiJob(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AutopiJobSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AutopiJobSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autopiJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"devices_api\".\"autopi_jobs\".* FROM \"devices_api\".\"autopi_jobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, autopiJobPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AutopiJobSlice")
	}

	*o = slice

	return nil
}

// AutopiJobExists checks if the AutopiJob row exists.
func AutopiJobExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"devices_api\".\"autopi_jobs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if autopi_jobs exists")
	}

	return exists, nil
}
