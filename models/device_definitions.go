// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeviceDefinition is an object representing the database table.
type DeviceDefinition struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	VinFirst10 null.String `boil:"vin_first_10" json:"vin_first_10,omitempty" toml:"vin_first_10" yaml:"vin_first_10,omitempty"`
	Make       string      `boil:"make" json:"make" toml:"make" yaml:"make"`
	Model      string      `boil:"model" json:"model" toml:"model" yaml:"model"`
	Year       int16       `boil:"year" json:"year" toml:"year" yaml:"year"`
	SubModel   null.String `boil:"sub_model" json:"sub_model,omitempty" toml:"sub_model" yaml:"sub_model,omitempty"`
	ImageURL   null.String `boil:"image_url" json:"image_url,omitempty" toml:"image_url" yaml:"image_url,omitempty"`
	Metadata   null.JSON   `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *deviceDefinitionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deviceDefinitionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeviceDefinitionColumns = struct {
	ID         string
	VinFirst10 string
	Make       string
	Model      string
	Year       string
	SubModel   string
	ImageURL   string
	Metadata   string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	VinFirst10: "vin_first_10",
	Make:       "make",
	Model:      "model",
	Year:       "year",
	SubModel:   "sub_model",
	ImageURL:   "image_url",
	Metadata:   "metadata",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var DeviceDefinitionTableColumns = struct {
	ID         string
	VinFirst10 string
	Make       string
	Model      string
	Year       string
	SubModel   string
	ImageURL   string
	Metadata   string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "device_definitions.id",
	VinFirst10: "device_definitions.vin_first_10",
	Make:       "device_definitions.make",
	Model:      "device_definitions.model",
	Year:       "device_definitions.year",
	SubModel:   "device_definitions.sub_model",
	ImageURL:   "device_definitions.image_url",
	Metadata:   "device_definitions.metadata",
	CreatedAt:  "device_definitions.created_at",
	UpdatedAt:  "device_definitions.updated_at",
}

// Generated where

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var DeviceDefinitionWhere = struct {
	ID         whereHelperstring
	VinFirst10 whereHelpernull_String
	Make       whereHelperstring
	Model      whereHelperstring
	Year       whereHelperint16
	SubModel   whereHelpernull_String
	ImageURL   whereHelpernull_String
	Metadata   whereHelpernull_JSON
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "\"devices_api\".\"device_definitions\".\"id\""},
	VinFirst10: whereHelpernull_String{field: "\"devices_api\".\"device_definitions\".\"vin_first_10\""},
	Make:       whereHelperstring{field: "\"devices_api\".\"device_definitions\".\"make\""},
	Model:      whereHelperstring{field: "\"devices_api\".\"device_definitions\".\"model\""},
	Year:       whereHelperint16{field: "\"devices_api\".\"device_definitions\".\"year\""},
	SubModel:   whereHelpernull_String{field: "\"devices_api\".\"device_definitions\".\"sub_model\""},
	ImageURL:   whereHelpernull_String{field: "\"devices_api\".\"device_definitions\".\"image_url\""},
	Metadata:   whereHelpernull_JSON{field: "\"devices_api\".\"device_definitions\".\"metadata\""},
	CreatedAt:  whereHelpertime_Time{field: "\"devices_api\".\"device_definitions\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"devices_api\".\"device_definitions\".\"updated_at\""},
}

// DeviceDefinitionRels is where relationship names are stored.
var DeviceDefinitionRels = struct {
}{}

// deviceDefinitionR is where relationships are stored.
type deviceDefinitionR struct {
}

// NewStruct creates a new relationship struct
func (*deviceDefinitionR) NewStruct() *deviceDefinitionR {
	return &deviceDefinitionR{}
}

// deviceDefinitionL is where Load methods for each relationship are stored.
type deviceDefinitionL struct{}

var (
	deviceDefinitionAllColumns            = []string{"id", "vin_first_10", "make", "model", "year", "sub_model", "image_url", "metadata", "created_at", "updated_at"}
	deviceDefinitionColumnsWithoutDefault = []string{"id", "make", "model", "year"}
	deviceDefinitionColumnsWithDefault    = []string{"vin_first_10", "sub_model", "image_url", "metadata", "created_at", "updated_at"}
	deviceDefinitionPrimaryKeyColumns     = []string{"id"}
	deviceDefinitionGeneratedColumns      = []string{}
)

type (
	// DeviceDefinitionSlice is an alias for a slice of pointers to DeviceDefinition.
	// This should almost always be used instead of []DeviceDefinition.
	DeviceDefinitionSlice []*DeviceDefinition
	// DeviceDefinitionHook is the signature for custom DeviceDefinition hook methods
	DeviceDefinitionHook func(context.Context, boil.ContextExecutor, *DeviceDefinition) error

	deviceDefinitionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deviceDefinitionType                 = reflect.TypeOf(&DeviceDefinition{})
	deviceDefinitionMapping              = queries.MakeStructMapping(deviceDefinitionType)
	deviceDefinitionPrimaryKeyMapping, _ = queries.BindMapping(deviceDefinitionType, deviceDefinitionMapping, deviceDefinitionPrimaryKeyColumns)
	deviceDefinitionInsertCacheMut       sync.RWMutex
	deviceDefinitionInsertCache          = make(map[string]insertCache)
	deviceDefinitionUpdateCacheMut       sync.RWMutex
	deviceDefinitionUpdateCache          = make(map[string]updateCache)
	deviceDefinitionUpsertCacheMut       sync.RWMutex
	deviceDefinitionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deviceDefinitionAfterSelectHooks []DeviceDefinitionHook

var deviceDefinitionBeforeInsertHooks []DeviceDefinitionHook
var deviceDefinitionAfterInsertHooks []DeviceDefinitionHook

var deviceDefinitionBeforeUpdateHooks []DeviceDefinitionHook
var deviceDefinitionAfterUpdateHooks []DeviceDefinitionHook

var deviceDefinitionBeforeDeleteHooks []DeviceDefinitionHook
var deviceDefinitionAfterDeleteHooks []DeviceDefinitionHook

var deviceDefinitionBeforeUpsertHooks []DeviceDefinitionHook
var deviceDefinitionAfterUpsertHooks []DeviceDefinitionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeviceDefinition) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceDefinitionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeviceDefinition) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceDefinitionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeviceDefinition) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceDefinitionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeviceDefinition) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceDefinitionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeviceDefinition) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceDefinitionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeviceDefinition) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceDefinitionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeviceDefinition) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceDefinitionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeviceDefinition) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceDefinitionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeviceDefinition) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceDefinitionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeviceDefinitionHook registers your hook function for all future operations.
func AddDeviceDefinitionHook(hookPoint boil.HookPoint, deviceDefinitionHook DeviceDefinitionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deviceDefinitionAfterSelectHooks = append(deviceDefinitionAfterSelectHooks, deviceDefinitionHook)
	case boil.BeforeInsertHook:
		deviceDefinitionBeforeInsertHooks = append(deviceDefinitionBeforeInsertHooks, deviceDefinitionHook)
	case boil.AfterInsertHook:
		deviceDefinitionAfterInsertHooks = append(deviceDefinitionAfterInsertHooks, deviceDefinitionHook)
	case boil.BeforeUpdateHook:
		deviceDefinitionBeforeUpdateHooks = append(deviceDefinitionBeforeUpdateHooks, deviceDefinitionHook)
	case boil.AfterUpdateHook:
		deviceDefinitionAfterUpdateHooks = append(deviceDefinitionAfterUpdateHooks, deviceDefinitionHook)
	case boil.BeforeDeleteHook:
		deviceDefinitionBeforeDeleteHooks = append(deviceDefinitionBeforeDeleteHooks, deviceDefinitionHook)
	case boil.AfterDeleteHook:
		deviceDefinitionAfterDeleteHooks = append(deviceDefinitionAfterDeleteHooks, deviceDefinitionHook)
	case boil.BeforeUpsertHook:
		deviceDefinitionBeforeUpsertHooks = append(deviceDefinitionBeforeUpsertHooks, deviceDefinitionHook)
	case boil.AfterUpsertHook:
		deviceDefinitionAfterUpsertHooks = append(deviceDefinitionAfterUpsertHooks, deviceDefinitionHook)
	}
}

// One returns a single deviceDefinition record from the query.
func (q deviceDefinitionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeviceDefinition, error) {
	o := &DeviceDefinition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for device_definitions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DeviceDefinition records from the query.
func (q deviceDefinitionQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeviceDefinitionSlice, error) {
	var o []*DeviceDefinition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DeviceDefinition slice")
	}

	if len(deviceDefinitionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DeviceDefinition records in the query.
func (q deviceDefinitionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count device_definitions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deviceDefinitionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if device_definitions exists")
	}

	return count > 0, nil
}

// DeviceDefinitions retrieves all the records using an executor.
func DeviceDefinitions(mods ...qm.QueryMod) deviceDefinitionQuery {
	mods = append(mods, qm.From("\"devices_api\".\"device_definitions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"devices_api\".\"device_definitions\".*"})
	}

	return deviceDefinitionQuery{q}
}

// FindDeviceDefinition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeviceDefinition(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*DeviceDefinition, error) {
	deviceDefinitionObj := &DeviceDefinition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"devices_api\".\"device_definitions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, deviceDefinitionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from device_definitions")
	}

	if err = deviceDefinitionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deviceDefinitionObj, err
	}

	return deviceDefinitionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeviceDefinition) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no device_definitions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceDefinitionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deviceDefinitionInsertCacheMut.RLock()
	cache, cached := deviceDefinitionInsertCache[key]
	deviceDefinitionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deviceDefinitionAllColumns,
			deviceDefinitionColumnsWithDefault,
			deviceDefinitionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deviceDefinitionType, deviceDefinitionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deviceDefinitionType, deviceDefinitionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"devices_api\".\"device_definitions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"devices_api\".\"device_definitions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into device_definitions")
	}

	if !cached {
		deviceDefinitionInsertCacheMut.Lock()
		deviceDefinitionInsertCache[key] = cache
		deviceDefinitionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DeviceDefinition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeviceDefinition) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deviceDefinitionUpdateCacheMut.RLock()
	cache, cached := deviceDefinitionUpdateCache[key]
	deviceDefinitionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deviceDefinitionAllColumns,
			deviceDefinitionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update device_definitions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"devices_api\".\"device_definitions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deviceDefinitionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deviceDefinitionType, deviceDefinitionMapping, append(wl, deviceDefinitionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update device_definitions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for device_definitions")
	}

	if !cached {
		deviceDefinitionUpdateCacheMut.Lock()
		deviceDefinitionUpdateCache[key] = cache
		deviceDefinitionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q deviceDefinitionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for device_definitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for device_definitions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeviceDefinitionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceDefinitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"devices_api\".\"device_definitions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deviceDefinitionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in deviceDefinition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all deviceDefinition")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeviceDefinition) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no device_definitions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceDefinitionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deviceDefinitionUpsertCacheMut.RLock()
	cache, cached := deviceDefinitionUpsertCache[key]
	deviceDefinitionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			deviceDefinitionAllColumns,
			deviceDefinitionColumnsWithDefault,
			deviceDefinitionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deviceDefinitionAllColumns,
			deviceDefinitionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert device_definitions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(deviceDefinitionPrimaryKeyColumns))
			copy(conflict, deviceDefinitionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"devices_api\".\"device_definitions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(deviceDefinitionType, deviceDefinitionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deviceDefinitionType, deviceDefinitionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert device_definitions")
	}

	if !cached {
		deviceDefinitionUpsertCacheMut.Lock()
		deviceDefinitionUpsertCache[key] = cache
		deviceDefinitionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DeviceDefinition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeviceDefinition) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DeviceDefinition provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deviceDefinitionPrimaryKeyMapping)
	sql := "DELETE FROM \"devices_api\".\"device_definitions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from device_definitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for device_definitions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deviceDefinitionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no deviceDefinitionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from device_definitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for device_definitions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeviceDefinitionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deviceDefinitionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceDefinitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"devices_api\".\"device_definitions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deviceDefinitionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from deviceDefinition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for device_definitions")
	}

	if len(deviceDefinitionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeviceDefinition) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeviceDefinition(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeviceDefinitionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeviceDefinitionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceDefinitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"devices_api\".\"device_definitions\".* FROM \"devices_api\".\"device_definitions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deviceDefinitionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DeviceDefinitionSlice")
	}

	*o = slice

	return nil
}

// DeviceDefinitionExists checks if the DeviceDefinition row exists.
func DeviceDefinitionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"devices_api\".\"device_definitions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if device_definitions exists")
	}

	return exists, nil
}

// Exists checks if the DeviceDefinition row exists.
func (o *DeviceDefinition) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeviceDefinitionExists(ctx, exec, o.ID)
}
