// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// AutopiUnit is an object representing the database table.
type AutopiUnit struct {
	AutopiUnitID                  string            `boil:"autopi_unit_id" json:"autopi_unit_id" toml:"autopi_unit_id" yaml:"autopi_unit_id"`
	AutopiDeviceID                null.String       `boil:"autopi_device_id" json:"autopi_device_id,omitempty" toml:"autopi_device_id" yaml:"autopi_device_id,omitempty"`
	UserID                        null.String       `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	EthereumAddress               null.Bytes        `boil:"ethereum_address" json:"ethereum_address,omitempty" toml:"ethereum_address" yaml:"ethereum_address,omitempty"`
	CreatedAt                     time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                     time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	TokenID                       types.NullDecimal `boil:"token_id" json:"token_id,omitempty" toml:"token_id" yaml:"token_id,omitempty"`
	ClaimMetaTransactionRequestID null.String       `boil:"claim_meta_transaction_request_id" json:"claim_meta_transaction_request_id,omitempty" toml:"claim_meta_transaction_request_id" yaml:"claim_meta_transaction_request_id,omitempty"`
	OwnerAddress                  null.Bytes        `boil:"owner_address" json:"owner_address,omitempty" toml:"owner_address" yaml:"owner_address,omitempty"`
	PairRequestID                 null.String       `boil:"pair_request_id" json:"pair_request_id,omitempty" toml:"pair_request_id" yaml:"pair_request_id,omitempty"`
	UnpairRequestID               null.String       `boil:"unpair_request_id" json:"unpair_request_id,omitempty" toml:"unpair_request_id" yaml:"unpair_request_id,omitempty"`
	VehicleTokenID                types.NullDecimal `boil:"vehicle_token_id" json:"vehicle_token_id,omitempty" toml:"vehicle_token_id" yaml:"vehicle_token_id,omitempty"`

	R *autopiUnitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L autopiUnitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AutopiUnitColumns = struct {
	AutopiUnitID                  string
	AutopiDeviceID                string
	UserID                        string
	EthereumAddress               string
	CreatedAt                     string
	UpdatedAt                     string
	TokenID                       string
	ClaimMetaTransactionRequestID string
	OwnerAddress                  string
	PairRequestID                 string
	UnpairRequestID               string
	VehicleTokenID                string
}{
	AutopiUnitID:                  "autopi_unit_id",
	AutopiDeviceID:                "autopi_device_id",
	UserID:                        "user_id",
	EthereumAddress:               "ethereum_address",
	CreatedAt:                     "created_at",
	UpdatedAt:                     "updated_at",
	TokenID:                       "token_id",
	ClaimMetaTransactionRequestID: "claim_meta_transaction_request_id",
	OwnerAddress:                  "owner_address",
	PairRequestID:                 "pair_request_id",
	UnpairRequestID:               "unpair_request_id",
	VehicleTokenID:                "vehicle_token_id",
}

var AutopiUnitTableColumns = struct {
	AutopiUnitID                  string
	AutopiDeviceID                string
	UserID                        string
	EthereumAddress               string
	CreatedAt                     string
	UpdatedAt                     string
	TokenID                       string
	ClaimMetaTransactionRequestID string
	OwnerAddress                  string
	PairRequestID                 string
	UnpairRequestID               string
	VehicleTokenID                string
}{
	AutopiUnitID:                  "autopi_units.autopi_unit_id",
	AutopiDeviceID:                "autopi_units.autopi_device_id",
	UserID:                        "autopi_units.user_id",
	EthereumAddress:               "autopi_units.ethereum_address",
	CreatedAt:                     "autopi_units.created_at",
	UpdatedAt:                     "autopi_units.updated_at",
	TokenID:                       "autopi_units.token_id",
	ClaimMetaTransactionRequestID: "autopi_units.claim_meta_transaction_request_id",
	OwnerAddress:                  "autopi_units.owner_address",
	PairRequestID:                 "autopi_units.pair_request_id",
	UnpairRequestID:               "autopi_units.unpair_request_id",
	VehicleTokenID:                "autopi_units.vehicle_token_id",
}

// Generated where

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var AutopiUnitWhere = struct {
	AutopiUnitID                  whereHelperstring
	AutopiDeviceID                whereHelpernull_String
	UserID                        whereHelpernull_String
	EthereumAddress               whereHelpernull_Bytes
	CreatedAt                     whereHelpertime_Time
	UpdatedAt                     whereHelpertime_Time
	TokenID                       whereHelpertypes_NullDecimal
	ClaimMetaTransactionRequestID whereHelpernull_String
	OwnerAddress                  whereHelpernull_Bytes
	PairRequestID                 whereHelpernull_String
	UnpairRequestID               whereHelpernull_String
	VehicleTokenID                whereHelpertypes_NullDecimal
}{
	AutopiUnitID:                  whereHelperstring{field: "\"devices_api\".\"autopi_units\".\"autopi_unit_id\""},
	AutopiDeviceID:                whereHelpernull_String{field: "\"devices_api\".\"autopi_units\".\"autopi_device_id\""},
	UserID:                        whereHelpernull_String{field: "\"devices_api\".\"autopi_units\".\"user_id\""},
	EthereumAddress:               whereHelpernull_Bytes{field: "\"devices_api\".\"autopi_units\".\"ethereum_address\""},
	CreatedAt:                     whereHelpertime_Time{field: "\"devices_api\".\"autopi_units\".\"created_at\""},
	UpdatedAt:                     whereHelpertime_Time{field: "\"devices_api\".\"autopi_units\".\"updated_at\""},
	TokenID:                       whereHelpertypes_NullDecimal{field: "\"devices_api\".\"autopi_units\".\"token_id\""},
	ClaimMetaTransactionRequestID: whereHelpernull_String{field: "\"devices_api\".\"autopi_units\".\"claim_meta_transaction_request_id\""},
	OwnerAddress:                  whereHelpernull_Bytes{field: "\"devices_api\".\"autopi_units\".\"owner_address\""},
	PairRequestID:                 whereHelpernull_String{field: "\"devices_api\".\"autopi_units\".\"pair_request_id\""},
	UnpairRequestID:               whereHelpernull_String{field: "\"devices_api\".\"autopi_units\".\"unpair_request_id\""},
	VehicleTokenID:                whereHelpertypes_NullDecimal{field: "\"devices_api\".\"autopi_units\".\"vehicle_token_id\""},
}

// AutopiUnitRels is where relationship names are stored.
var AutopiUnitRels = struct {
	ClaimMetaTransactionRequest string
	PairRequest                 string
	UnpairRequest               string
	VehicleToken                string
	AutopiJobs                  string
	UserDeviceAPIIntegrations   string
}{
	ClaimMetaTransactionRequest: "ClaimMetaTransactionRequest",
	PairRequest:                 "PairRequest",
	UnpairRequest:               "UnpairRequest",
	VehicleToken:                "VehicleToken",
	AutopiJobs:                  "AutopiJobs",
	UserDeviceAPIIntegrations:   "UserDeviceAPIIntegrations",
}

// autopiUnitR is where relationships are stored.
type autopiUnitR struct {
	ClaimMetaTransactionRequest *MetaTransactionRequest       `boil:"ClaimMetaTransactionRequest" json:"ClaimMetaTransactionRequest" toml:"ClaimMetaTransactionRequest" yaml:"ClaimMetaTransactionRequest"`
	PairRequest                 *MetaTransactionRequest       `boil:"PairRequest" json:"PairRequest" toml:"PairRequest" yaml:"PairRequest"`
	UnpairRequest               *MetaTransactionRequest       `boil:"UnpairRequest" json:"UnpairRequest" toml:"UnpairRequest" yaml:"UnpairRequest"`
	VehicleToken                *VehicleNFT                   `boil:"VehicleToken" json:"VehicleToken" toml:"VehicleToken" yaml:"VehicleToken"`
	AutopiJobs                  AutopiJobSlice                `boil:"AutopiJobs" json:"AutopiJobs" toml:"AutopiJobs" yaml:"AutopiJobs"`
	UserDeviceAPIIntegrations   UserDeviceAPIIntegrationSlice `boil:"UserDeviceAPIIntegrations" json:"UserDeviceAPIIntegrations" toml:"UserDeviceAPIIntegrations" yaml:"UserDeviceAPIIntegrations"`
}

// NewStruct creates a new relationship struct
func (*autopiUnitR) NewStruct() *autopiUnitR {
	return &autopiUnitR{}
}

func (r *autopiUnitR) GetClaimMetaTransactionRequest() *MetaTransactionRequest {
	if r == nil {
		return nil
	}
	return r.ClaimMetaTransactionRequest
}

func (r *autopiUnitR) GetPairRequest() *MetaTransactionRequest {
	if r == nil {
		return nil
	}
	return r.PairRequest
}

func (r *autopiUnitR) GetUnpairRequest() *MetaTransactionRequest {
	if r == nil {
		return nil
	}
	return r.UnpairRequest
}

func (r *autopiUnitR) GetVehicleToken() *VehicleNFT {
	if r == nil {
		return nil
	}
	return r.VehicleToken
}

func (r *autopiUnitR) GetAutopiJobs() AutopiJobSlice {
	if r == nil {
		return nil
	}
	return r.AutopiJobs
}

func (r *autopiUnitR) GetUserDeviceAPIIntegrations() UserDeviceAPIIntegrationSlice {
	if r == nil {
		return nil
	}
	return r.UserDeviceAPIIntegrations
}

// autopiUnitL is where Load methods for each relationship are stored.
type autopiUnitL struct{}

var (
	autopiUnitAllColumns            = []string{"autopi_unit_id", "autopi_device_id", "user_id", "ethereum_address", "created_at", "updated_at", "token_id", "claim_meta_transaction_request_id", "owner_address", "pair_request_id", "unpair_request_id", "vehicle_token_id"}
	autopiUnitColumnsWithoutDefault = []string{"autopi_unit_id"}
	autopiUnitColumnsWithDefault    = []string{"autopi_device_id", "user_id", "ethereum_address", "created_at", "updated_at", "token_id", "claim_meta_transaction_request_id", "owner_address", "pair_request_id", "unpair_request_id", "vehicle_token_id"}
	autopiUnitPrimaryKeyColumns     = []string{"autopi_unit_id"}
	autopiUnitGeneratedColumns      = []string{}
)

type (
	// AutopiUnitSlice is an alias for a slice of pointers to AutopiUnit.
	// This should almost always be used instead of []AutopiUnit.
	AutopiUnitSlice []*AutopiUnit
	// AutopiUnitHook is the signature for custom AutopiUnit hook methods
	AutopiUnitHook func(context.Context, boil.ContextExecutor, *AutopiUnit) error

	autopiUnitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	autopiUnitType                 = reflect.TypeOf(&AutopiUnit{})
	autopiUnitMapping              = queries.MakeStructMapping(autopiUnitType)
	autopiUnitPrimaryKeyMapping, _ = queries.BindMapping(autopiUnitType, autopiUnitMapping, autopiUnitPrimaryKeyColumns)
	autopiUnitInsertCacheMut       sync.RWMutex
	autopiUnitInsertCache          = make(map[string]insertCache)
	autopiUnitUpdateCacheMut       sync.RWMutex
	autopiUnitUpdateCache          = make(map[string]updateCache)
	autopiUnitUpsertCacheMut       sync.RWMutex
	autopiUnitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var autopiUnitAfterSelectHooks []AutopiUnitHook

var autopiUnitBeforeInsertHooks []AutopiUnitHook
var autopiUnitAfterInsertHooks []AutopiUnitHook

var autopiUnitBeforeUpdateHooks []AutopiUnitHook
var autopiUnitAfterUpdateHooks []AutopiUnitHook

var autopiUnitBeforeDeleteHooks []AutopiUnitHook
var autopiUnitAfterDeleteHooks []AutopiUnitHook

var autopiUnitBeforeUpsertHooks []AutopiUnitHook
var autopiUnitAfterUpsertHooks []AutopiUnitHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AutopiUnit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autopiUnitAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AutopiUnit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autopiUnitBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AutopiUnit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autopiUnitAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AutopiUnit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autopiUnitBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AutopiUnit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autopiUnitAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AutopiUnit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autopiUnitBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AutopiUnit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autopiUnitAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AutopiUnit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autopiUnitBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AutopiUnit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autopiUnitAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAutopiUnitHook registers your hook function for all future operations.
func AddAutopiUnitHook(hookPoint boil.HookPoint, autopiUnitHook AutopiUnitHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		autopiUnitAfterSelectHooks = append(autopiUnitAfterSelectHooks, autopiUnitHook)
	case boil.BeforeInsertHook:
		autopiUnitBeforeInsertHooks = append(autopiUnitBeforeInsertHooks, autopiUnitHook)
	case boil.AfterInsertHook:
		autopiUnitAfterInsertHooks = append(autopiUnitAfterInsertHooks, autopiUnitHook)
	case boil.BeforeUpdateHook:
		autopiUnitBeforeUpdateHooks = append(autopiUnitBeforeUpdateHooks, autopiUnitHook)
	case boil.AfterUpdateHook:
		autopiUnitAfterUpdateHooks = append(autopiUnitAfterUpdateHooks, autopiUnitHook)
	case boil.BeforeDeleteHook:
		autopiUnitBeforeDeleteHooks = append(autopiUnitBeforeDeleteHooks, autopiUnitHook)
	case boil.AfterDeleteHook:
		autopiUnitAfterDeleteHooks = append(autopiUnitAfterDeleteHooks, autopiUnitHook)
	case boil.BeforeUpsertHook:
		autopiUnitBeforeUpsertHooks = append(autopiUnitBeforeUpsertHooks, autopiUnitHook)
	case boil.AfterUpsertHook:
		autopiUnitAfterUpsertHooks = append(autopiUnitAfterUpsertHooks, autopiUnitHook)
	}
}

// One returns a single autopiUnit record from the query.
func (q autopiUnitQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AutopiUnit, error) {
	o := &AutopiUnit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for autopi_units")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AutopiUnit records from the query.
func (q autopiUnitQuery) All(ctx context.Context, exec boil.ContextExecutor) (AutopiUnitSlice, error) {
	var o []*AutopiUnit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AutopiUnit slice")
	}

	if len(autopiUnitAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AutopiUnit records in the query.
func (q autopiUnitQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count autopi_units rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q autopiUnitQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if autopi_units exists")
	}

	return count > 0, nil
}

// ClaimMetaTransactionRequest pointed to by the foreign key.
func (o *AutopiUnit) ClaimMetaTransactionRequest(mods ...qm.QueryMod) metaTransactionRequestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ClaimMetaTransactionRequestID),
	}

	queryMods = append(queryMods, mods...)

	return MetaTransactionRequests(queryMods...)
}

// PairRequest pointed to by the foreign key.
func (o *AutopiUnit) PairRequest(mods ...qm.QueryMod) metaTransactionRequestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PairRequestID),
	}

	queryMods = append(queryMods, mods...)

	return MetaTransactionRequests(queryMods...)
}

// UnpairRequest pointed to by the foreign key.
func (o *AutopiUnit) UnpairRequest(mods ...qm.QueryMod) metaTransactionRequestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UnpairRequestID),
	}

	queryMods = append(queryMods, mods...)

	return MetaTransactionRequests(queryMods...)
}

// VehicleToken pointed to by the foreign key.
func (o *AutopiUnit) VehicleToken(mods ...qm.QueryMod) vehicleNFTQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"token_id\" = ?", o.VehicleTokenID),
	}

	queryMods = append(queryMods, mods...)

	return VehicleNFTS(queryMods...)
}

// AutopiJobs retrieves all the autopi_job's AutopiJobs with an executor.
func (o *AutopiUnit) AutopiJobs(mods ...qm.QueryMod) autopiJobQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"devices_api\".\"autopi_jobs\".\"autopi_unit_id\"=?", o.AutopiUnitID),
	)

	return AutopiJobs(queryMods...)
}

// UserDeviceAPIIntegrations retrieves all the user_device_api_integration's UserDeviceAPIIntegrations with an executor.
func (o *AutopiUnit) UserDeviceAPIIntegrations(mods ...qm.QueryMod) userDeviceAPIIntegrationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"devices_api\".\"user_device_api_integrations\".\"autopi_unit_id\"=?", o.AutopiUnitID),
	)

	return UserDeviceAPIIntegrations(queryMods...)
}

// LoadClaimMetaTransactionRequest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (autopiUnitL) LoadClaimMetaTransactionRequest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutopiUnit interface{}, mods queries.Applicator) error {
	var slice []*AutopiUnit
	var object *AutopiUnit

	if singular {
		var ok bool
		object, ok = maybeAutopiUnit.(*AutopiUnit)
		if !ok {
			object = new(AutopiUnit)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutopiUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutopiUnit))
			}
		}
	} else {
		s, ok := maybeAutopiUnit.(*[]*AutopiUnit)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutopiUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutopiUnit))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &autopiUnitR{}
		}
		if !queries.IsNil(object.ClaimMetaTransactionRequestID) {
			args = append(args, object.ClaimMetaTransactionRequestID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autopiUnitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ClaimMetaTransactionRequestID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ClaimMetaTransactionRequestID) {
				args = append(args, obj.ClaimMetaTransactionRequestID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.meta_transaction_requests`),
		qm.WhereIn(`devices_api.meta_transaction_requests.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MetaTransactionRequest")
	}

	var resultSlice []*MetaTransactionRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MetaTransactionRequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for meta_transaction_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for meta_transaction_requests")
	}

	if len(autopiUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ClaimMetaTransactionRequest = foreign
		if foreign.R == nil {
			foreign.R = &metaTransactionRequestR{}
		}
		foreign.R.ClaimMetaTransactionRequestAutopiUnit = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ClaimMetaTransactionRequestID, foreign.ID) {
				local.R.ClaimMetaTransactionRequest = foreign
				if foreign.R == nil {
					foreign.R = &metaTransactionRequestR{}
				}
				foreign.R.ClaimMetaTransactionRequestAutopiUnit = local
				break
			}
		}
	}

	return nil
}

// LoadPairRequest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (autopiUnitL) LoadPairRequest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutopiUnit interface{}, mods queries.Applicator) error {
	var slice []*AutopiUnit
	var object *AutopiUnit

	if singular {
		var ok bool
		object, ok = maybeAutopiUnit.(*AutopiUnit)
		if !ok {
			object = new(AutopiUnit)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutopiUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutopiUnit))
			}
		}
	} else {
		s, ok := maybeAutopiUnit.(*[]*AutopiUnit)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutopiUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutopiUnit))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &autopiUnitR{}
		}
		if !queries.IsNil(object.PairRequestID) {
			args = append(args, object.PairRequestID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autopiUnitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PairRequestID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PairRequestID) {
				args = append(args, obj.PairRequestID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.meta_transaction_requests`),
		qm.WhereIn(`devices_api.meta_transaction_requests.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MetaTransactionRequest")
	}

	var resultSlice []*MetaTransactionRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MetaTransactionRequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for meta_transaction_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for meta_transaction_requests")
	}

	if len(autopiUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PairRequest = foreign
		if foreign.R == nil {
			foreign.R = &metaTransactionRequestR{}
		}
		foreign.R.PairRequestAutopiUnit = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PairRequestID, foreign.ID) {
				local.R.PairRequest = foreign
				if foreign.R == nil {
					foreign.R = &metaTransactionRequestR{}
				}
				foreign.R.PairRequestAutopiUnit = local
				break
			}
		}
	}

	return nil
}

// LoadUnpairRequest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (autopiUnitL) LoadUnpairRequest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutopiUnit interface{}, mods queries.Applicator) error {
	var slice []*AutopiUnit
	var object *AutopiUnit

	if singular {
		var ok bool
		object, ok = maybeAutopiUnit.(*AutopiUnit)
		if !ok {
			object = new(AutopiUnit)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutopiUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutopiUnit))
			}
		}
	} else {
		s, ok := maybeAutopiUnit.(*[]*AutopiUnit)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutopiUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutopiUnit))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &autopiUnitR{}
		}
		if !queries.IsNil(object.UnpairRequestID) {
			args = append(args, object.UnpairRequestID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autopiUnitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UnpairRequestID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UnpairRequestID) {
				args = append(args, obj.UnpairRequestID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.meta_transaction_requests`),
		qm.WhereIn(`devices_api.meta_transaction_requests.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MetaTransactionRequest")
	}

	var resultSlice []*MetaTransactionRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MetaTransactionRequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for meta_transaction_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for meta_transaction_requests")
	}

	if len(autopiUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UnpairRequest = foreign
		if foreign.R == nil {
			foreign.R = &metaTransactionRequestR{}
		}
		foreign.R.UnpairRequestAutopiUnit = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UnpairRequestID, foreign.ID) {
				local.R.UnpairRequest = foreign
				if foreign.R == nil {
					foreign.R = &metaTransactionRequestR{}
				}
				foreign.R.UnpairRequestAutopiUnit = local
				break
			}
		}
	}

	return nil
}

// LoadVehicleToken allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (autopiUnitL) LoadVehicleToken(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutopiUnit interface{}, mods queries.Applicator) error {
	var slice []*AutopiUnit
	var object *AutopiUnit

	if singular {
		var ok bool
		object, ok = maybeAutopiUnit.(*AutopiUnit)
		if !ok {
			object = new(AutopiUnit)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutopiUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutopiUnit))
			}
		}
	} else {
		s, ok := maybeAutopiUnit.(*[]*AutopiUnit)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutopiUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutopiUnit))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &autopiUnitR{}
		}
		if !queries.IsNil(object.VehicleTokenID) {
			args = append(args, object.VehicleTokenID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autopiUnitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.VehicleTokenID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.VehicleTokenID) {
				args = append(args, obj.VehicleTokenID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.vehicle_nfts`),
		qm.WhereIn(`devices_api.vehicle_nfts.token_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VehicleNFT")
	}

	var resultSlice []*VehicleNFT
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VehicleNFT")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vehicle_nfts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vehicle_nfts")
	}

	if len(autopiUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VehicleToken = foreign
		if foreign.R == nil {
			foreign.R = &vehicleNFTR{}
		}
		foreign.R.VehicleTokenAutopiUnit = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.VehicleTokenID, foreign.TokenID) {
				local.R.VehicleToken = foreign
				if foreign.R == nil {
					foreign.R = &vehicleNFTR{}
				}
				foreign.R.VehicleTokenAutopiUnit = local
				break
			}
		}
	}

	return nil
}

// LoadAutopiJobs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (autopiUnitL) LoadAutopiJobs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutopiUnit interface{}, mods queries.Applicator) error {
	var slice []*AutopiUnit
	var object *AutopiUnit

	if singular {
		var ok bool
		object, ok = maybeAutopiUnit.(*AutopiUnit)
		if !ok {
			object = new(AutopiUnit)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutopiUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutopiUnit))
			}
		}
	} else {
		s, ok := maybeAutopiUnit.(*[]*AutopiUnit)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutopiUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutopiUnit))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &autopiUnitR{}
		}
		args = append(args, object.AutopiUnitID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autopiUnitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AutopiUnitID) {
					continue Outer
				}
			}

			args = append(args, obj.AutopiUnitID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.autopi_jobs`),
		qm.WhereIn(`devices_api.autopi_jobs.autopi_unit_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load autopi_jobs")
	}

	var resultSlice []*AutopiJob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice autopi_jobs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on autopi_jobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for autopi_jobs")
	}

	if len(autopiJobAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AutopiJobs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &autopiJobR{}
			}
			foreign.R.AutopiUnit = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AutopiUnitID, foreign.AutopiUnitID) {
				local.R.AutopiJobs = append(local.R.AutopiJobs, foreign)
				if foreign.R == nil {
					foreign.R = &autopiJobR{}
				}
				foreign.R.AutopiUnit = local
				break
			}
		}
	}

	return nil
}

// LoadUserDeviceAPIIntegrations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (autopiUnitL) LoadUserDeviceAPIIntegrations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAutopiUnit interface{}, mods queries.Applicator) error {
	var slice []*AutopiUnit
	var object *AutopiUnit

	if singular {
		var ok bool
		object, ok = maybeAutopiUnit.(*AutopiUnit)
		if !ok {
			object = new(AutopiUnit)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAutopiUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAutopiUnit))
			}
		}
	} else {
		s, ok := maybeAutopiUnit.(*[]*AutopiUnit)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAutopiUnit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAutopiUnit))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &autopiUnitR{}
		}
		args = append(args, object.AutopiUnitID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &autopiUnitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AutopiUnitID) {
					continue Outer
				}
			}

			args = append(args, obj.AutopiUnitID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.user_device_api_integrations`),
		qm.WhereIn(`devices_api.user_device_api_integrations.autopi_unit_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_device_api_integrations")
	}

	var resultSlice []*UserDeviceAPIIntegration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_device_api_integrations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_device_api_integrations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_device_api_integrations")
	}

	if len(userDeviceAPIIntegrationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserDeviceAPIIntegrations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userDeviceAPIIntegrationR{}
			}
			foreign.R.AutopiUnit = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AutopiUnitID, foreign.AutopiUnitID) {
				local.R.UserDeviceAPIIntegrations = append(local.R.UserDeviceAPIIntegrations, foreign)
				if foreign.R == nil {
					foreign.R = &userDeviceAPIIntegrationR{}
				}
				foreign.R.AutopiUnit = local
				break
			}
		}
	}

	return nil
}

// SetClaimMetaTransactionRequest of the autopiUnit to the related item.
// Sets o.R.ClaimMetaTransactionRequest to related.
// Adds o to related.R.ClaimMetaTransactionRequestAutopiUnit.
func (o *AutopiUnit) SetClaimMetaTransactionRequest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MetaTransactionRequest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"autopi_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"claim_meta_transaction_request_id"}),
		strmangle.WhereClause("\"", "\"", 2, autopiUnitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.AutopiUnitID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ClaimMetaTransactionRequestID, related.ID)
	if o.R == nil {
		o.R = &autopiUnitR{
			ClaimMetaTransactionRequest: related,
		}
	} else {
		o.R.ClaimMetaTransactionRequest = related
	}

	if related.R == nil {
		related.R = &metaTransactionRequestR{
			ClaimMetaTransactionRequestAutopiUnit: o,
		}
	} else {
		related.R.ClaimMetaTransactionRequestAutopiUnit = o
	}

	return nil
}

// RemoveClaimMetaTransactionRequest relationship.
// Sets o.R.ClaimMetaTransactionRequest to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AutopiUnit) RemoveClaimMetaTransactionRequest(ctx context.Context, exec boil.ContextExecutor, related *MetaTransactionRequest) error {
	var err error

	queries.SetScanner(&o.ClaimMetaTransactionRequestID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("claim_meta_transaction_request_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ClaimMetaTransactionRequest = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.ClaimMetaTransactionRequestAutopiUnit = nil
	return nil
}

// SetPairRequest of the autopiUnit to the related item.
// Sets o.R.PairRequest to related.
// Adds o to related.R.PairRequestAutopiUnit.
func (o *AutopiUnit) SetPairRequest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MetaTransactionRequest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"autopi_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pair_request_id"}),
		strmangle.WhereClause("\"", "\"", 2, autopiUnitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.AutopiUnitID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PairRequestID, related.ID)
	if o.R == nil {
		o.R = &autopiUnitR{
			PairRequest: related,
		}
	} else {
		o.R.PairRequest = related
	}

	if related.R == nil {
		related.R = &metaTransactionRequestR{
			PairRequestAutopiUnit: o,
		}
	} else {
		related.R.PairRequestAutopiUnit = o
	}

	return nil
}

// RemovePairRequest relationship.
// Sets o.R.PairRequest to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AutopiUnit) RemovePairRequest(ctx context.Context, exec boil.ContextExecutor, related *MetaTransactionRequest) error {
	var err error

	queries.SetScanner(&o.PairRequestID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("pair_request_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PairRequest = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.PairRequestAutopiUnit = nil
	return nil
}

// SetUnpairRequest of the autopiUnit to the related item.
// Sets o.R.UnpairRequest to related.
// Adds o to related.R.UnpairRequestAutopiUnit.
func (o *AutopiUnit) SetUnpairRequest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MetaTransactionRequest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"autopi_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"unpair_request_id"}),
		strmangle.WhereClause("\"", "\"", 2, autopiUnitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.AutopiUnitID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UnpairRequestID, related.ID)
	if o.R == nil {
		o.R = &autopiUnitR{
			UnpairRequest: related,
		}
	} else {
		o.R.UnpairRequest = related
	}

	if related.R == nil {
		related.R = &metaTransactionRequestR{
			UnpairRequestAutopiUnit: o,
		}
	} else {
		related.R.UnpairRequestAutopiUnit = o
	}

	return nil
}

// RemoveUnpairRequest relationship.
// Sets o.R.UnpairRequest to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AutopiUnit) RemoveUnpairRequest(ctx context.Context, exec boil.ContextExecutor, related *MetaTransactionRequest) error {
	var err error

	queries.SetScanner(&o.UnpairRequestID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("unpair_request_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UnpairRequest = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.UnpairRequestAutopiUnit = nil
	return nil
}

// SetVehicleToken of the autopiUnit to the related item.
// Sets o.R.VehicleToken to related.
// Adds o to related.R.VehicleTokenAutopiUnit.
func (o *AutopiUnit) SetVehicleToken(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VehicleNFT) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"autopi_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vehicle_token_id"}),
		strmangle.WhereClause("\"", "\"", 2, autopiUnitPrimaryKeyColumns),
	)
	values := []interface{}{related.TokenID, o.AutopiUnitID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.VehicleTokenID, related.TokenID)
	if o.R == nil {
		o.R = &autopiUnitR{
			VehicleToken: related,
		}
	} else {
		o.R.VehicleToken = related
	}

	if related.R == nil {
		related.R = &vehicleNFTR{
			VehicleTokenAutopiUnit: o,
		}
	} else {
		related.R.VehicleTokenAutopiUnit = o
	}

	return nil
}

// RemoveVehicleToken relationship.
// Sets o.R.VehicleToken to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AutopiUnit) RemoveVehicleToken(ctx context.Context, exec boil.ContextExecutor, related *VehicleNFT) error {
	var err error

	queries.SetScanner(&o.VehicleTokenID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("vehicle_token_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.VehicleToken = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.VehicleTokenAutopiUnit = nil
	return nil
}

// AddAutopiJobs adds the given related objects to the existing relationships
// of the autopi_unit, optionally inserting them as new records.
// Appends related to o.R.AutopiJobs.
// Sets related.R.AutopiUnit appropriately.
func (o *AutopiUnit) AddAutopiJobs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutopiJob) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AutopiUnitID, o.AutopiUnitID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"devices_api\".\"autopi_jobs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"autopi_unit_id"}),
				strmangle.WhereClause("\"", "\"", 2, autopiJobPrimaryKeyColumns),
			)
			values := []interface{}{o.AutopiUnitID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AutopiUnitID, o.AutopiUnitID)
		}
	}

	if o.R == nil {
		o.R = &autopiUnitR{
			AutopiJobs: related,
		}
	} else {
		o.R.AutopiJobs = append(o.R.AutopiJobs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &autopiJobR{
				AutopiUnit: o,
			}
		} else {
			rel.R.AutopiUnit = o
		}
	}
	return nil
}

// SetAutopiJobs removes all previously related items of the
// autopi_unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AutopiUnit's AutopiJobs accordingly.
// Replaces o.R.AutopiJobs with related.
// Sets related.R.AutopiUnit's AutopiJobs accordingly.
func (o *AutopiUnit) SetAutopiJobs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutopiJob) error {
	query := "update \"devices_api\".\"autopi_jobs\" set \"autopi_unit_id\" = null where \"autopi_unit_id\" = $1"
	values := []interface{}{o.AutopiUnitID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AutopiJobs {
			queries.SetScanner(&rel.AutopiUnitID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AutopiUnit = nil
		}
		o.R.AutopiJobs = nil
	}

	return o.AddAutopiJobs(ctx, exec, insert, related...)
}

// RemoveAutopiJobs relationships from objects passed in.
// Removes related items from R.AutopiJobs (uses pointer comparison, removal does not keep order)
// Sets related.R.AutopiUnit.
func (o *AutopiUnit) RemoveAutopiJobs(ctx context.Context, exec boil.ContextExecutor, related ...*AutopiJob) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AutopiUnitID, nil)
		if rel.R != nil {
			rel.R.AutopiUnit = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("autopi_unit_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AutopiJobs {
			if rel != ri {
				continue
			}

			ln := len(o.R.AutopiJobs)
			if ln > 1 && i < ln-1 {
				o.R.AutopiJobs[i] = o.R.AutopiJobs[ln-1]
			}
			o.R.AutopiJobs = o.R.AutopiJobs[:ln-1]
			break
		}
	}

	return nil
}

// AddUserDeviceAPIIntegrations adds the given related objects to the existing relationships
// of the autopi_unit, optionally inserting them as new records.
// Appends related to o.R.UserDeviceAPIIntegrations.
// Sets related.R.AutopiUnit appropriately.
func (o *AutopiUnit) AddUserDeviceAPIIntegrations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserDeviceAPIIntegration) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AutopiUnitID, o.AutopiUnitID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"devices_api\".\"user_device_api_integrations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"autopi_unit_id"}),
				strmangle.WhereClause("\"", "\"", 2, userDeviceAPIIntegrationPrimaryKeyColumns),
			)
			values := []interface{}{o.AutopiUnitID, rel.UserDeviceID, rel.IntegrationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AutopiUnitID, o.AutopiUnitID)
		}
	}

	if o.R == nil {
		o.R = &autopiUnitR{
			UserDeviceAPIIntegrations: related,
		}
	} else {
		o.R.UserDeviceAPIIntegrations = append(o.R.UserDeviceAPIIntegrations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userDeviceAPIIntegrationR{
				AutopiUnit: o,
			}
		} else {
			rel.R.AutopiUnit = o
		}
	}
	return nil
}

// SetUserDeviceAPIIntegrations removes all previously related items of the
// autopi_unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AutopiUnit's UserDeviceAPIIntegrations accordingly.
// Replaces o.R.UserDeviceAPIIntegrations with related.
// Sets related.R.AutopiUnit's UserDeviceAPIIntegrations accordingly.
func (o *AutopiUnit) SetUserDeviceAPIIntegrations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserDeviceAPIIntegration) error {
	query := "update \"devices_api\".\"user_device_api_integrations\" set \"autopi_unit_id\" = null where \"autopi_unit_id\" = $1"
	values := []interface{}{o.AutopiUnitID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UserDeviceAPIIntegrations {
			queries.SetScanner(&rel.AutopiUnitID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AutopiUnit = nil
		}
		o.R.UserDeviceAPIIntegrations = nil
	}

	return o.AddUserDeviceAPIIntegrations(ctx, exec, insert, related...)
}

// RemoveUserDeviceAPIIntegrations relationships from objects passed in.
// Removes related items from R.UserDeviceAPIIntegrations (uses pointer comparison, removal does not keep order)
// Sets related.R.AutopiUnit.
func (o *AutopiUnit) RemoveUserDeviceAPIIntegrations(ctx context.Context, exec boil.ContextExecutor, related ...*UserDeviceAPIIntegration) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AutopiUnitID, nil)
		if rel.R != nil {
			rel.R.AutopiUnit = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("autopi_unit_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserDeviceAPIIntegrations {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserDeviceAPIIntegrations)
			if ln > 1 && i < ln-1 {
				o.R.UserDeviceAPIIntegrations[i] = o.R.UserDeviceAPIIntegrations[ln-1]
			}
			o.R.UserDeviceAPIIntegrations = o.R.UserDeviceAPIIntegrations[:ln-1]
			break
		}
	}

	return nil
}

// AutopiUnits retrieves all the records using an executor.
func AutopiUnits(mods ...qm.QueryMod) autopiUnitQuery {
	mods = append(mods, qm.From("\"devices_api\".\"autopi_units\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"devices_api\".\"autopi_units\".*"})
	}

	return autopiUnitQuery{q}
}

// FindAutopiUnit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAutopiUnit(ctx context.Context, exec boil.ContextExecutor, autopiUnitID string, selectCols ...string) (*AutopiUnit, error) {
	autopiUnitObj := &AutopiUnit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"devices_api\".\"autopi_units\" where \"autopi_unit_id\"=$1", sel,
	)

	q := queries.Raw(query, autopiUnitID)

	err := q.Bind(ctx, exec, autopiUnitObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from autopi_units")
	}

	if err = autopiUnitObj.doAfterSelectHooks(ctx, exec); err != nil {
		return autopiUnitObj, err
	}

	return autopiUnitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AutopiUnit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no autopi_units provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(autopiUnitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	autopiUnitInsertCacheMut.RLock()
	cache, cached := autopiUnitInsertCache[key]
	autopiUnitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			autopiUnitAllColumns,
			autopiUnitColumnsWithDefault,
			autopiUnitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(autopiUnitType, autopiUnitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(autopiUnitType, autopiUnitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"devices_api\".\"autopi_units\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"devices_api\".\"autopi_units\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into autopi_units")
	}

	if !cached {
		autopiUnitInsertCacheMut.Lock()
		autopiUnitInsertCache[key] = cache
		autopiUnitInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AutopiUnit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AutopiUnit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	autopiUnitUpdateCacheMut.RLock()
	cache, cached := autopiUnitUpdateCache[key]
	autopiUnitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			autopiUnitAllColumns,
			autopiUnitPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update autopi_units, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"devices_api\".\"autopi_units\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, autopiUnitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(autopiUnitType, autopiUnitMapping, append(wl, autopiUnitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update autopi_units row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for autopi_units")
	}

	if !cached {
		autopiUnitUpdateCacheMut.Lock()
		autopiUnitUpdateCache[key] = cache
		autopiUnitUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q autopiUnitQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for autopi_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for autopi_units")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AutopiUnitSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autopiUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"devices_api\".\"autopi_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, autopiUnitPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in autopiUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all autopiUnit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AutopiUnit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no autopi_units provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(autopiUnitColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	autopiUnitUpsertCacheMut.RLock()
	cache, cached := autopiUnitUpsertCache[key]
	autopiUnitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			autopiUnitAllColumns,
			autopiUnitColumnsWithDefault,
			autopiUnitColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			autopiUnitAllColumns,
			autopiUnitPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert autopi_units, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(autopiUnitPrimaryKeyColumns))
			copy(conflict, autopiUnitPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"devices_api\".\"autopi_units\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(autopiUnitType, autopiUnitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(autopiUnitType, autopiUnitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert autopi_units")
	}

	if !cached {
		autopiUnitUpsertCacheMut.Lock()
		autopiUnitUpsertCache[key] = cache
		autopiUnitUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AutopiUnit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AutopiUnit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AutopiUnit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), autopiUnitPrimaryKeyMapping)
	sql := "DELETE FROM \"devices_api\".\"autopi_units\" WHERE \"autopi_unit_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from autopi_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for autopi_units")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q autopiUnitQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no autopiUnitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from autopi_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for autopi_units")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AutopiUnitSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(autopiUnitBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autopiUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"devices_api\".\"autopi_units\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, autopiUnitPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from autopiUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for autopi_units")
	}

	if len(autopiUnitAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AutopiUnit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAutopiUnit(ctx, exec, o.AutopiUnitID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AutopiUnitSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AutopiUnitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autopiUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"devices_api\".\"autopi_units\".* FROM \"devices_api\".\"autopi_units\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, autopiUnitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AutopiUnitSlice")
	}

	*o = slice

	return nil
}

// AutopiUnitExists checks if the AutopiUnit row exists.
func AutopiUnitExists(ctx context.Context, exec boil.ContextExecutor, autopiUnitID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"devices_api\".\"autopi_units\" where \"autopi_unit_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, autopiUnitID)
	}
	row := exec.QueryRowContext(ctx, sql, autopiUnitID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if autopi_units exists")
	}

	return exists, nil
}
