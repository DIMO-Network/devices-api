// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserDeviceAPIIntegration is an object representing the database table.
type UserDeviceAPIIntegration struct {
	UserDeviceID    string      `boil:"user_device_id" json:"user_device_id" toml:"user_device_id" yaml:"user_device_id"`
	IntegrationID   string      `boil:"integration_id" json:"integration_id" toml:"integration_id" yaml:"integration_id"`
	Status          string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	AccessToken     null.String `boil:"access_token" json:"access_token,omitempty" toml:"access_token" yaml:"access_token,omitempty"`
	AccessExpiresAt null.Time   `boil:"access_expires_at" json:"access_expires_at,omitempty" toml:"access_expires_at" yaml:"access_expires_at,omitempty"`
	RefreshToken    null.String `boil:"refresh_token" json:"refresh_token,omitempty" toml:"refresh_token" yaml:"refresh_token,omitempty"`
	ExternalID      null.String `boil:"external_id" json:"external_id,omitempty" toml:"external_id" yaml:"external_id,omitempty"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Metadata        null.JSON   `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	TaskID          null.String `boil:"task_id" json:"task_id,omitempty" toml:"task_id" yaml:"task_id,omitempty"`
	AutopiUnitID    null.String `boil:"autopi_unit_id" json:"autopi_unit_id,omitempty" toml:"autopi_unit_id" yaml:"autopi_unit_id,omitempty"`

	R *userDeviceAPIIntegrationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userDeviceAPIIntegrationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserDeviceAPIIntegrationColumns = struct {
	UserDeviceID    string
	IntegrationID   string
	Status          string
	AccessToken     string
	AccessExpiresAt string
	RefreshToken    string
	ExternalID      string
	CreatedAt       string
	UpdatedAt       string
	Metadata        string
	TaskID          string
	AutopiUnitID    string
}{
	UserDeviceID:    "user_device_id",
	IntegrationID:   "integration_id",
	Status:          "status",
	AccessToken:     "access_token",
	AccessExpiresAt: "access_expires_at",
	RefreshToken:    "refresh_token",
	ExternalID:      "external_id",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	Metadata:        "metadata",
	TaskID:          "task_id",
	AutopiUnitID:    "autopi_unit_id",
}

var UserDeviceAPIIntegrationTableColumns = struct {
	UserDeviceID    string
	IntegrationID   string
	Status          string
	AccessToken     string
	AccessExpiresAt string
	RefreshToken    string
	ExternalID      string
	CreatedAt       string
	UpdatedAt       string
	Metadata        string
	TaskID          string
	AutopiUnitID    string
}{
	UserDeviceID:    "user_device_api_integrations.user_device_id",
	IntegrationID:   "user_device_api_integrations.integration_id",
	Status:          "user_device_api_integrations.status",
	AccessToken:     "user_device_api_integrations.access_token",
	AccessExpiresAt: "user_device_api_integrations.access_expires_at",
	RefreshToken:    "user_device_api_integrations.refresh_token",
	ExternalID:      "user_device_api_integrations.external_id",
	CreatedAt:       "user_device_api_integrations.created_at",
	UpdatedAt:       "user_device_api_integrations.updated_at",
	Metadata:        "user_device_api_integrations.metadata",
	TaskID:          "user_device_api_integrations.task_id",
	AutopiUnitID:    "user_device_api_integrations.autopi_unit_id",
}

// Generated where

var UserDeviceAPIIntegrationWhere = struct {
	UserDeviceID    whereHelperstring
	IntegrationID   whereHelperstring
	Status          whereHelperstring
	AccessToken     whereHelpernull_String
	AccessExpiresAt whereHelpernull_Time
	RefreshToken    whereHelpernull_String
	ExternalID      whereHelpernull_String
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
	Metadata        whereHelpernull_JSON
	TaskID          whereHelpernull_String
	AutopiUnitID    whereHelpernull_String
}{
	UserDeviceID:    whereHelperstring{field: "\"devices_api\".\"user_device_api_integrations\".\"user_device_id\""},
	IntegrationID:   whereHelperstring{field: "\"devices_api\".\"user_device_api_integrations\".\"integration_id\""},
	Status:          whereHelperstring{field: "\"devices_api\".\"user_device_api_integrations\".\"status\""},
	AccessToken:     whereHelpernull_String{field: "\"devices_api\".\"user_device_api_integrations\".\"access_token\""},
	AccessExpiresAt: whereHelpernull_Time{field: "\"devices_api\".\"user_device_api_integrations\".\"access_expires_at\""},
	RefreshToken:    whereHelpernull_String{field: "\"devices_api\".\"user_device_api_integrations\".\"refresh_token\""},
	ExternalID:      whereHelpernull_String{field: "\"devices_api\".\"user_device_api_integrations\".\"external_id\""},
	CreatedAt:       whereHelpertime_Time{field: "\"devices_api\".\"user_device_api_integrations\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"devices_api\".\"user_device_api_integrations\".\"updated_at\""},
	Metadata:        whereHelpernull_JSON{field: "\"devices_api\".\"user_device_api_integrations\".\"metadata\""},
	TaskID:          whereHelpernull_String{field: "\"devices_api\".\"user_device_api_integrations\".\"task_id\""},
	AutopiUnitID:    whereHelpernull_String{field: "\"devices_api\".\"user_device_api_integrations\".\"autopi_unit_id\""},
}

// UserDeviceAPIIntegrationRels is where relationship names are stored.
var UserDeviceAPIIntegrationRels = struct {
	UserDevice string
	AutopiUnit string
}{
	UserDevice: "UserDevice",
	AutopiUnit: "AutopiUnit",
}

// userDeviceAPIIntegrationR is where relationships are stored.
type userDeviceAPIIntegrationR struct {
	UserDevice *UserDevice `boil:"UserDevice" json:"UserDevice" toml:"UserDevice" yaml:"UserDevice"`
	AutopiUnit *AutopiUnit `boil:"AutopiUnit" json:"AutopiUnit" toml:"AutopiUnit" yaml:"AutopiUnit"`
}

// NewStruct creates a new relationship struct
func (*userDeviceAPIIntegrationR) NewStruct() *userDeviceAPIIntegrationR {
	return &userDeviceAPIIntegrationR{}
}

func (r *userDeviceAPIIntegrationR) GetUserDevice() *UserDevice {
	if r == nil {
		return nil
	}
	return r.UserDevice
}

func (r *userDeviceAPIIntegrationR) GetAutopiUnit() *AutopiUnit {
	if r == nil {
		return nil
	}
	return r.AutopiUnit
}

// userDeviceAPIIntegrationL is where Load methods for each relationship are stored.
type userDeviceAPIIntegrationL struct{}

var (
	userDeviceAPIIntegrationAllColumns            = []string{"user_device_id", "integration_id", "status", "access_token", "access_expires_at", "refresh_token", "external_id", "created_at", "updated_at", "metadata", "task_id", "autopi_unit_id"}
	userDeviceAPIIntegrationColumnsWithoutDefault = []string{"user_device_id", "integration_id", "status"}
	userDeviceAPIIntegrationColumnsWithDefault    = []string{"access_token", "access_expires_at", "refresh_token", "external_id", "created_at", "updated_at", "metadata", "task_id", "autopi_unit_id"}
	userDeviceAPIIntegrationPrimaryKeyColumns     = []string{"user_device_id", "integration_id"}
	userDeviceAPIIntegrationGeneratedColumns      = []string{}
)

type (
	// UserDeviceAPIIntegrationSlice is an alias for a slice of pointers to UserDeviceAPIIntegration.
	// This should almost always be used instead of []UserDeviceAPIIntegration.
	UserDeviceAPIIntegrationSlice []*UserDeviceAPIIntegration
	// UserDeviceAPIIntegrationHook is the signature for custom UserDeviceAPIIntegration hook methods
	UserDeviceAPIIntegrationHook func(context.Context, boil.ContextExecutor, *UserDeviceAPIIntegration) error

	userDeviceAPIIntegrationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userDeviceAPIIntegrationType                 = reflect.TypeOf(&UserDeviceAPIIntegration{})
	userDeviceAPIIntegrationMapping              = queries.MakeStructMapping(userDeviceAPIIntegrationType)
	userDeviceAPIIntegrationPrimaryKeyMapping, _ = queries.BindMapping(userDeviceAPIIntegrationType, userDeviceAPIIntegrationMapping, userDeviceAPIIntegrationPrimaryKeyColumns)
	userDeviceAPIIntegrationInsertCacheMut       sync.RWMutex
	userDeviceAPIIntegrationInsertCache          = make(map[string]insertCache)
	userDeviceAPIIntegrationUpdateCacheMut       sync.RWMutex
	userDeviceAPIIntegrationUpdateCache          = make(map[string]updateCache)
	userDeviceAPIIntegrationUpsertCacheMut       sync.RWMutex
	userDeviceAPIIntegrationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userDeviceAPIIntegrationAfterSelectHooks []UserDeviceAPIIntegrationHook

var userDeviceAPIIntegrationBeforeInsertHooks []UserDeviceAPIIntegrationHook
var userDeviceAPIIntegrationAfterInsertHooks []UserDeviceAPIIntegrationHook

var userDeviceAPIIntegrationBeforeUpdateHooks []UserDeviceAPIIntegrationHook
var userDeviceAPIIntegrationAfterUpdateHooks []UserDeviceAPIIntegrationHook

var userDeviceAPIIntegrationBeforeDeleteHooks []UserDeviceAPIIntegrationHook
var userDeviceAPIIntegrationAfterDeleteHooks []UserDeviceAPIIntegrationHook

var userDeviceAPIIntegrationBeforeUpsertHooks []UserDeviceAPIIntegrationHook
var userDeviceAPIIntegrationAfterUpsertHooks []UserDeviceAPIIntegrationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserDeviceAPIIntegration) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDeviceAPIIntegrationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserDeviceAPIIntegration) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDeviceAPIIntegrationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserDeviceAPIIntegration) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDeviceAPIIntegrationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserDeviceAPIIntegration) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDeviceAPIIntegrationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserDeviceAPIIntegration) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDeviceAPIIntegrationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserDeviceAPIIntegration) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDeviceAPIIntegrationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserDeviceAPIIntegration) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDeviceAPIIntegrationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserDeviceAPIIntegration) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDeviceAPIIntegrationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserDeviceAPIIntegration) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDeviceAPIIntegrationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserDeviceAPIIntegrationHook registers your hook function for all future operations.
func AddUserDeviceAPIIntegrationHook(hookPoint boil.HookPoint, userDeviceAPIIntegrationHook UserDeviceAPIIntegrationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userDeviceAPIIntegrationAfterSelectHooks = append(userDeviceAPIIntegrationAfterSelectHooks, userDeviceAPIIntegrationHook)
	case boil.BeforeInsertHook:
		userDeviceAPIIntegrationBeforeInsertHooks = append(userDeviceAPIIntegrationBeforeInsertHooks, userDeviceAPIIntegrationHook)
	case boil.AfterInsertHook:
		userDeviceAPIIntegrationAfterInsertHooks = append(userDeviceAPIIntegrationAfterInsertHooks, userDeviceAPIIntegrationHook)
	case boil.BeforeUpdateHook:
		userDeviceAPIIntegrationBeforeUpdateHooks = append(userDeviceAPIIntegrationBeforeUpdateHooks, userDeviceAPIIntegrationHook)
	case boil.AfterUpdateHook:
		userDeviceAPIIntegrationAfterUpdateHooks = append(userDeviceAPIIntegrationAfterUpdateHooks, userDeviceAPIIntegrationHook)
	case boil.BeforeDeleteHook:
		userDeviceAPIIntegrationBeforeDeleteHooks = append(userDeviceAPIIntegrationBeforeDeleteHooks, userDeviceAPIIntegrationHook)
	case boil.AfterDeleteHook:
		userDeviceAPIIntegrationAfterDeleteHooks = append(userDeviceAPIIntegrationAfterDeleteHooks, userDeviceAPIIntegrationHook)
	case boil.BeforeUpsertHook:
		userDeviceAPIIntegrationBeforeUpsertHooks = append(userDeviceAPIIntegrationBeforeUpsertHooks, userDeviceAPIIntegrationHook)
	case boil.AfterUpsertHook:
		userDeviceAPIIntegrationAfterUpsertHooks = append(userDeviceAPIIntegrationAfterUpsertHooks, userDeviceAPIIntegrationHook)
	}
}

// One returns a single userDeviceAPIIntegration record from the query.
func (q userDeviceAPIIntegrationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserDeviceAPIIntegration, error) {
	o := &UserDeviceAPIIntegration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_device_api_integrations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserDeviceAPIIntegration records from the query.
func (q userDeviceAPIIntegrationQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserDeviceAPIIntegrationSlice, error) {
	var o []*UserDeviceAPIIntegration

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserDeviceAPIIntegration slice")
	}

	if len(userDeviceAPIIntegrationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserDeviceAPIIntegration records in the query.
func (q userDeviceAPIIntegrationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_device_api_integrations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userDeviceAPIIntegrationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_device_api_integrations exists")
	}

	return count > 0, nil
}

// UserDevice pointed to by the foreign key.
func (o *UserDeviceAPIIntegration) UserDevice(mods ...qm.QueryMod) userDeviceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserDeviceID),
	}

	queryMods = append(queryMods, mods...)

	return UserDevices(queryMods...)
}

// AutopiUnit pointed to by the foreign key.
func (o *UserDeviceAPIIntegration) AutopiUnit(mods ...qm.QueryMod) autopiUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"autopi_unit_id\" = ?", o.AutopiUnitID),
	}

	queryMods = append(queryMods, mods...)

	return AutopiUnits(queryMods...)
}

// LoadUserDevice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userDeviceAPIIntegrationL) LoadUserDevice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserDeviceAPIIntegration interface{}, mods queries.Applicator) error {
	var slice []*UserDeviceAPIIntegration
	var object *UserDeviceAPIIntegration

	if singular {
		var ok bool
		object, ok = maybeUserDeviceAPIIntegration.(*UserDeviceAPIIntegration)
		if !ok {
			object = new(UserDeviceAPIIntegration)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserDeviceAPIIntegration)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserDeviceAPIIntegration))
			}
		}
	} else {
		s, ok := maybeUserDeviceAPIIntegration.(*[]*UserDeviceAPIIntegration)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserDeviceAPIIntegration)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserDeviceAPIIntegration))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userDeviceAPIIntegrationR{}
		}
		args = append(args, object.UserDeviceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userDeviceAPIIntegrationR{}
			}

			for _, a := range args {
				if a == obj.UserDeviceID {
					continue Outer
				}
			}

			args = append(args, obj.UserDeviceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.user_devices`),
		qm.WhereIn(`devices_api.user_devices.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserDevice")
	}

	var resultSlice []*UserDevice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserDevice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_devices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_devices")
	}

	if len(userDeviceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserDevice = foreign
		if foreign.R == nil {
			foreign.R = &userDeviceR{}
		}
		foreign.R.UserDeviceAPIIntegrations = append(foreign.R.UserDeviceAPIIntegrations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserDeviceID == foreign.ID {
				local.R.UserDevice = foreign
				if foreign.R == nil {
					foreign.R = &userDeviceR{}
				}
				foreign.R.UserDeviceAPIIntegrations = append(foreign.R.UserDeviceAPIIntegrations, local)
				break
			}
		}
	}

	return nil
}

// LoadAutopiUnit allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userDeviceAPIIntegrationL) LoadAutopiUnit(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserDeviceAPIIntegration interface{}, mods queries.Applicator) error {
	var slice []*UserDeviceAPIIntegration
	var object *UserDeviceAPIIntegration

	if singular {
		var ok bool
		object, ok = maybeUserDeviceAPIIntegration.(*UserDeviceAPIIntegration)
		if !ok {
			object = new(UserDeviceAPIIntegration)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserDeviceAPIIntegration)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserDeviceAPIIntegration))
			}
		}
	} else {
		s, ok := maybeUserDeviceAPIIntegration.(*[]*UserDeviceAPIIntegration)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserDeviceAPIIntegration)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserDeviceAPIIntegration))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userDeviceAPIIntegrationR{}
		}
		if !queries.IsNil(object.AutopiUnitID) {
			args = append(args, object.AutopiUnitID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userDeviceAPIIntegrationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AutopiUnitID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AutopiUnitID) {
				args = append(args, obj.AutopiUnitID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.autopi_units`),
		qm.WhereIn(`devices_api.autopi_units.autopi_unit_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AutopiUnit")
	}

	var resultSlice []*AutopiUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AutopiUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for autopi_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for autopi_units")
	}

	if len(autopiUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AutopiUnit = foreign
		if foreign.R == nil {
			foreign.R = &autopiUnitR{}
		}
		foreign.R.UserDeviceAPIIntegrations = append(foreign.R.UserDeviceAPIIntegrations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AutopiUnitID, foreign.AutopiUnitID) {
				local.R.AutopiUnit = foreign
				if foreign.R == nil {
					foreign.R = &autopiUnitR{}
				}
				foreign.R.UserDeviceAPIIntegrations = append(foreign.R.UserDeviceAPIIntegrations, local)
				break
			}
		}
	}

	return nil
}

// SetUserDevice of the userDeviceAPIIntegration to the related item.
// Sets o.R.UserDevice to related.
// Adds o to related.R.UserDeviceAPIIntegrations.
func (o *UserDeviceAPIIntegration) SetUserDevice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserDevice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"user_device_api_integrations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_device_id"}),
		strmangle.WhereClause("\"", "\"", 2, userDeviceAPIIntegrationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserDeviceID, o.IntegrationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserDeviceID = related.ID
	if o.R == nil {
		o.R = &userDeviceAPIIntegrationR{
			UserDevice: related,
		}
	} else {
		o.R.UserDevice = related
	}

	if related.R == nil {
		related.R = &userDeviceR{
			UserDeviceAPIIntegrations: UserDeviceAPIIntegrationSlice{o},
		}
	} else {
		related.R.UserDeviceAPIIntegrations = append(related.R.UserDeviceAPIIntegrations, o)
	}

	return nil
}

// SetAutopiUnit of the userDeviceAPIIntegration to the related item.
// Sets o.R.AutopiUnit to related.
// Adds o to related.R.UserDeviceAPIIntegrations.
func (o *UserDeviceAPIIntegration) SetAutopiUnit(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AutopiUnit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"user_device_api_integrations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"autopi_unit_id"}),
		strmangle.WhereClause("\"", "\"", 2, userDeviceAPIIntegrationPrimaryKeyColumns),
	)
	values := []interface{}{related.AutopiUnitID, o.UserDeviceID, o.IntegrationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AutopiUnitID, related.AutopiUnitID)
	if o.R == nil {
		o.R = &userDeviceAPIIntegrationR{
			AutopiUnit: related,
		}
	} else {
		o.R.AutopiUnit = related
	}

	if related.R == nil {
		related.R = &autopiUnitR{
			UserDeviceAPIIntegrations: UserDeviceAPIIntegrationSlice{o},
		}
	} else {
		related.R.UserDeviceAPIIntegrations = append(related.R.UserDeviceAPIIntegrations, o)
	}

	return nil
}

// RemoveAutopiUnit relationship.
// Sets o.R.AutopiUnit to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UserDeviceAPIIntegration) RemoveAutopiUnit(ctx context.Context, exec boil.ContextExecutor, related *AutopiUnit) error {
	var err error

	queries.SetScanner(&o.AutopiUnitID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("autopi_unit_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AutopiUnit = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UserDeviceAPIIntegrations {
		if queries.Equal(o.AutopiUnitID, ri.AutopiUnitID) {
			continue
		}

		ln := len(related.R.UserDeviceAPIIntegrations)
		if ln > 1 && i < ln-1 {
			related.R.UserDeviceAPIIntegrations[i] = related.R.UserDeviceAPIIntegrations[ln-1]
		}
		related.R.UserDeviceAPIIntegrations = related.R.UserDeviceAPIIntegrations[:ln-1]
		break
	}
	return nil
}

// UserDeviceAPIIntegrations retrieves all the records using an executor.
func UserDeviceAPIIntegrations(mods ...qm.QueryMod) userDeviceAPIIntegrationQuery {
	mods = append(mods, qm.From("\"devices_api\".\"user_device_api_integrations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"devices_api\".\"user_device_api_integrations\".*"})
	}

	return userDeviceAPIIntegrationQuery{q}
}

// FindUserDeviceAPIIntegration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserDeviceAPIIntegration(ctx context.Context, exec boil.ContextExecutor, userDeviceID string, integrationID string, selectCols ...string) (*UserDeviceAPIIntegration, error) {
	userDeviceAPIIntegrationObj := &UserDeviceAPIIntegration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"devices_api\".\"user_device_api_integrations\" where \"user_device_id\"=$1 AND \"integration_id\"=$2", sel,
	)

	q := queries.Raw(query, userDeviceID, integrationID)

	err := q.Bind(ctx, exec, userDeviceAPIIntegrationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_device_api_integrations")
	}

	if err = userDeviceAPIIntegrationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userDeviceAPIIntegrationObj, err
	}

	return userDeviceAPIIntegrationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserDeviceAPIIntegration) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_device_api_integrations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userDeviceAPIIntegrationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userDeviceAPIIntegrationInsertCacheMut.RLock()
	cache, cached := userDeviceAPIIntegrationInsertCache[key]
	userDeviceAPIIntegrationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userDeviceAPIIntegrationAllColumns,
			userDeviceAPIIntegrationColumnsWithDefault,
			userDeviceAPIIntegrationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userDeviceAPIIntegrationType, userDeviceAPIIntegrationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userDeviceAPIIntegrationType, userDeviceAPIIntegrationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"devices_api\".\"user_device_api_integrations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"devices_api\".\"user_device_api_integrations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_device_api_integrations")
	}

	if !cached {
		userDeviceAPIIntegrationInsertCacheMut.Lock()
		userDeviceAPIIntegrationInsertCache[key] = cache
		userDeviceAPIIntegrationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserDeviceAPIIntegration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserDeviceAPIIntegration) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userDeviceAPIIntegrationUpdateCacheMut.RLock()
	cache, cached := userDeviceAPIIntegrationUpdateCache[key]
	userDeviceAPIIntegrationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userDeviceAPIIntegrationAllColumns,
			userDeviceAPIIntegrationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_device_api_integrations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"devices_api\".\"user_device_api_integrations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userDeviceAPIIntegrationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userDeviceAPIIntegrationType, userDeviceAPIIntegrationMapping, append(wl, userDeviceAPIIntegrationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_device_api_integrations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_device_api_integrations")
	}

	if !cached {
		userDeviceAPIIntegrationUpdateCacheMut.Lock()
		userDeviceAPIIntegrationUpdateCache[key] = cache
		userDeviceAPIIntegrationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userDeviceAPIIntegrationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_device_api_integrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_device_api_integrations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserDeviceAPIIntegrationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userDeviceAPIIntegrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"devices_api\".\"user_device_api_integrations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userDeviceAPIIntegrationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userDeviceAPIIntegration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userDeviceAPIIntegration")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserDeviceAPIIntegration) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_device_api_integrations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userDeviceAPIIntegrationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userDeviceAPIIntegrationUpsertCacheMut.RLock()
	cache, cached := userDeviceAPIIntegrationUpsertCache[key]
	userDeviceAPIIntegrationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userDeviceAPIIntegrationAllColumns,
			userDeviceAPIIntegrationColumnsWithDefault,
			userDeviceAPIIntegrationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userDeviceAPIIntegrationAllColumns,
			userDeviceAPIIntegrationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_device_api_integrations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userDeviceAPIIntegrationPrimaryKeyColumns))
			copy(conflict, userDeviceAPIIntegrationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"devices_api\".\"user_device_api_integrations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userDeviceAPIIntegrationType, userDeviceAPIIntegrationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userDeviceAPIIntegrationType, userDeviceAPIIntegrationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_device_api_integrations")
	}

	if !cached {
		userDeviceAPIIntegrationUpsertCacheMut.Lock()
		userDeviceAPIIntegrationUpsertCache[key] = cache
		userDeviceAPIIntegrationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserDeviceAPIIntegration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserDeviceAPIIntegration) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserDeviceAPIIntegration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userDeviceAPIIntegrationPrimaryKeyMapping)
	sql := "DELETE FROM \"devices_api\".\"user_device_api_integrations\" WHERE \"user_device_id\"=$1 AND \"integration_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_device_api_integrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_device_api_integrations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userDeviceAPIIntegrationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userDeviceAPIIntegrationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_device_api_integrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_device_api_integrations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserDeviceAPIIntegrationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userDeviceAPIIntegrationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userDeviceAPIIntegrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"devices_api\".\"user_device_api_integrations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userDeviceAPIIntegrationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userDeviceAPIIntegration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_device_api_integrations")
	}

	if len(userDeviceAPIIntegrationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserDeviceAPIIntegration) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserDeviceAPIIntegration(ctx, exec, o.UserDeviceID, o.IntegrationID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserDeviceAPIIntegrationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserDeviceAPIIntegrationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userDeviceAPIIntegrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"devices_api\".\"user_device_api_integrations\".* FROM \"devices_api\".\"user_device_api_integrations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userDeviceAPIIntegrationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserDeviceAPIIntegrationSlice")
	}

	*o = slice

	return nil
}

// UserDeviceAPIIntegrationExists checks if the UserDeviceAPIIntegration row exists.
func UserDeviceAPIIntegrationExists(ctx context.Context, exec boil.ContextExecutor, userDeviceID string, integrationID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"devices_api\".\"user_device_api_integrations\" where \"user_device_id\"=$1 AND \"integration_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userDeviceID, integrationID)
	}
	row := exec.QueryRowContext(ctx, sql, userDeviceID, integrationID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_device_api_integrations exists")
	}

	return exists, nil
}

// Exists checks if the UserDeviceAPIIntegration row exists.
func (o *UserDeviceAPIIntegration) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserDeviceAPIIntegrationExists(ctx, exec, o.UserDeviceID, o.IntegrationID)
}
