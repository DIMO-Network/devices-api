// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// AftermarketDevice is an object representing the database table.
type AftermarketDevice struct {
	Serial                        string            `boil:"serial" json:"serial" toml:"serial" yaml:"serial"`
	UserID                        null.String       `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	EthereumAddress               []byte            `boil:"ethereum_address" json:"ethereum_address" toml:"ethereum_address" yaml:"ethereum_address"`
	CreatedAt                     time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                     time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	TokenID                       types.Decimal     `boil:"token_id" json:"token_id" toml:"token_id" yaml:"token_id"`
	ClaimMetaTransactionRequestID null.String       `boil:"claim_meta_transaction_request_id" json:"claim_meta_transaction_request_id,omitempty" toml:"claim_meta_transaction_request_id" yaml:"claim_meta_transaction_request_id,omitempty"`
	OwnerAddress                  null.Bytes        `boil:"owner_address" json:"owner_address,omitempty" toml:"owner_address" yaml:"owner_address,omitempty"`
	PairRequestID                 null.String       `boil:"pair_request_id" json:"pair_request_id,omitempty" toml:"pair_request_id" yaml:"pair_request_id,omitempty"`
	UnpairRequestID               null.String       `boil:"unpair_request_id" json:"unpair_request_id,omitempty" toml:"unpair_request_id" yaml:"unpair_request_id,omitempty"`
	VehicleTokenID                types.NullDecimal `boil:"vehicle_token_id" json:"vehicle_token_id,omitempty" toml:"vehicle_token_id" yaml:"vehicle_token_id,omitempty"`
	Beneficiary                   null.Bytes        `boil:"beneficiary" json:"beneficiary,omitempty" toml:"beneficiary" yaml:"beneficiary,omitempty"`
	Metadata                      null.JSON         `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	DeviceManufacturerTokenID     types.Decimal     `boil:"device_manufacturer_token_id" json:"device_manufacturer_token_id" toml:"device_manufacturer_token_id" yaml:"device_manufacturer_token_id"`

	R *aftermarketDeviceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L aftermarketDeviceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AftermarketDeviceColumns = struct {
	Serial                        string
	UserID                        string
	EthereumAddress               string
	CreatedAt                     string
	UpdatedAt                     string
	TokenID                       string
	ClaimMetaTransactionRequestID string
	OwnerAddress                  string
	PairRequestID                 string
	UnpairRequestID               string
	VehicleTokenID                string
	Beneficiary                   string
	Metadata                      string
	DeviceManufacturerTokenID     string
}{
	Serial:                        "serial",
	UserID:                        "user_id",
	EthereumAddress:               "ethereum_address",
	CreatedAt:                     "created_at",
	UpdatedAt:                     "updated_at",
	TokenID:                       "token_id",
	ClaimMetaTransactionRequestID: "claim_meta_transaction_request_id",
	OwnerAddress:                  "owner_address",
	PairRequestID:                 "pair_request_id",
	UnpairRequestID:               "unpair_request_id",
	VehicleTokenID:                "vehicle_token_id",
	Beneficiary:                   "beneficiary",
	Metadata:                      "metadata",
	DeviceManufacturerTokenID:     "device_manufacturer_token_id",
}

var AftermarketDeviceTableColumns = struct {
	Serial                        string
	UserID                        string
	EthereumAddress               string
	CreatedAt                     string
	UpdatedAt                     string
	TokenID                       string
	ClaimMetaTransactionRequestID string
	OwnerAddress                  string
	PairRequestID                 string
	UnpairRequestID               string
	VehicleTokenID                string
	Beneficiary                   string
	Metadata                      string
	DeviceManufacturerTokenID     string
}{
	Serial:                        "aftermarket_devices.serial",
	UserID:                        "aftermarket_devices.user_id",
	EthereumAddress:               "aftermarket_devices.ethereum_address",
	CreatedAt:                     "aftermarket_devices.created_at",
	UpdatedAt:                     "aftermarket_devices.updated_at",
	TokenID:                       "aftermarket_devices.token_id",
	ClaimMetaTransactionRequestID: "aftermarket_devices.claim_meta_transaction_request_id",
	OwnerAddress:                  "aftermarket_devices.owner_address",
	PairRequestID:                 "aftermarket_devices.pair_request_id",
	UnpairRequestID:               "aftermarket_devices.unpair_request_id",
	VehicleTokenID:                "aftermarket_devices.vehicle_token_id",
	Beneficiary:                   "aftermarket_devices.beneficiary",
	Metadata:                      "aftermarket_devices.metadata",
	DeviceManufacturerTokenID:     "aftermarket_devices.device_manufacturer_token_id",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AftermarketDeviceWhere = struct {
	Serial                        whereHelperstring
	UserID                        whereHelpernull_String
	EthereumAddress               whereHelper__byte
	CreatedAt                     whereHelpertime_Time
	UpdatedAt                     whereHelpertime_Time
	TokenID                       whereHelpertypes_Decimal
	ClaimMetaTransactionRequestID whereHelpernull_String
	OwnerAddress                  whereHelpernull_Bytes
	PairRequestID                 whereHelpernull_String
	UnpairRequestID               whereHelpernull_String
	VehicleTokenID                whereHelpertypes_NullDecimal
	Beneficiary                   whereHelpernull_Bytes
	Metadata                      whereHelpernull_JSON
	DeviceManufacturerTokenID     whereHelpertypes_Decimal
}{
	Serial:                        whereHelperstring{field: "\"devices_api\".\"aftermarket_devices\".\"serial\""},
	UserID:                        whereHelpernull_String{field: "\"devices_api\".\"aftermarket_devices\".\"user_id\""},
	EthereumAddress:               whereHelper__byte{field: "\"devices_api\".\"aftermarket_devices\".\"ethereum_address\""},
	CreatedAt:                     whereHelpertime_Time{field: "\"devices_api\".\"aftermarket_devices\".\"created_at\""},
	UpdatedAt:                     whereHelpertime_Time{field: "\"devices_api\".\"aftermarket_devices\".\"updated_at\""},
	TokenID:                       whereHelpertypes_Decimal{field: "\"devices_api\".\"aftermarket_devices\".\"token_id\""},
	ClaimMetaTransactionRequestID: whereHelpernull_String{field: "\"devices_api\".\"aftermarket_devices\".\"claim_meta_transaction_request_id\""},
	OwnerAddress:                  whereHelpernull_Bytes{field: "\"devices_api\".\"aftermarket_devices\".\"owner_address\""},
	PairRequestID:                 whereHelpernull_String{field: "\"devices_api\".\"aftermarket_devices\".\"pair_request_id\""},
	UnpairRequestID:               whereHelpernull_String{field: "\"devices_api\".\"aftermarket_devices\".\"unpair_request_id\""},
	VehicleTokenID:                whereHelpertypes_NullDecimal{field: "\"devices_api\".\"aftermarket_devices\".\"vehicle_token_id\""},
	Beneficiary:                   whereHelpernull_Bytes{field: "\"devices_api\".\"aftermarket_devices\".\"beneficiary\""},
	Metadata:                      whereHelpernull_JSON{field: "\"devices_api\".\"aftermarket_devices\".\"metadata\""},
	DeviceManufacturerTokenID:     whereHelpertypes_Decimal{field: "\"devices_api\".\"aftermarket_devices\".\"device_manufacturer_token_id\""},
}

// AftermarketDeviceRels is where relationship names are stored.
var AftermarketDeviceRels = struct {
	VehicleToken                    string
	ClaimMetaTransactionRequest     string
	PairRequest                     string
	UnpairRequest                   string
	AutopiUnitAutopiJobs            string
	SerialUserDeviceAPIIntegrations string
}{
	VehicleToken:                    "VehicleToken",
	ClaimMetaTransactionRequest:     "ClaimMetaTransactionRequest",
	PairRequest:                     "PairRequest",
	UnpairRequest:                   "UnpairRequest",
	AutopiUnitAutopiJobs:            "AutopiUnitAutopiJobs",
	SerialUserDeviceAPIIntegrations: "SerialUserDeviceAPIIntegrations",
}

// aftermarketDeviceR is where relationships are stored.
type aftermarketDeviceR struct {
	VehicleToken                    *UserDevice                   `boil:"VehicleToken" json:"VehicleToken" toml:"VehicleToken" yaml:"VehicleToken"`
	ClaimMetaTransactionRequest     *MetaTransactionRequest       `boil:"ClaimMetaTransactionRequest" json:"ClaimMetaTransactionRequest" toml:"ClaimMetaTransactionRequest" yaml:"ClaimMetaTransactionRequest"`
	PairRequest                     *MetaTransactionRequest       `boil:"PairRequest" json:"PairRequest" toml:"PairRequest" yaml:"PairRequest"`
	UnpairRequest                   *MetaTransactionRequest       `boil:"UnpairRequest" json:"UnpairRequest" toml:"UnpairRequest" yaml:"UnpairRequest"`
	AutopiUnitAutopiJobs            AutopiJobSlice                `boil:"AutopiUnitAutopiJobs" json:"AutopiUnitAutopiJobs" toml:"AutopiUnitAutopiJobs" yaml:"AutopiUnitAutopiJobs"`
	SerialUserDeviceAPIIntegrations UserDeviceAPIIntegrationSlice `boil:"SerialUserDeviceAPIIntegrations" json:"SerialUserDeviceAPIIntegrations" toml:"SerialUserDeviceAPIIntegrations" yaml:"SerialUserDeviceAPIIntegrations"`
}

// NewStruct creates a new relationship struct
func (*aftermarketDeviceR) NewStruct() *aftermarketDeviceR {
	return &aftermarketDeviceR{}
}

func (o *AftermarketDevice) GetVehicleToken() *UserDevice {
	if o == nil {
		return nil
	}

	return o.R.GetVehicleToken()
}

func (r *aftermarketDeviceR) GetVehicleToken() *UserDevice {
	if r == nil {
		return nil
	}

	return r.VehicleToken
}

func (o *AftermarketDevice) GetClaimMetaTransactionRequest() *MetaTransactionRequest {
	if o == nil {
		return nil
	}

	return o.R.GetClaimMetaTransactionRequest()
}

func (r *aftermarketDeviceR) GetClaimMetaTransactionRequest() *MetaTransactionRequest {
	if r == nil {
		return nil
	}

	return r.ClaimMetaTransactionRequest
}

func (o *AftermarketDevice) GetPairRequest() *MetaTransactionRequest {
	if o == nil {
		return nil
	}

	return o.R.GetPairRequest()
}

func (r *aftermarketDeviceR) GetPairRequest() *MetaTransactionRequest {
	if r == nil {
		return nil
	}

	return r.PairRequest
}

func (o *AftermarketDevice) GetUnpairRequest() *MetaTransactionRequest {
	if o == nil {
		return nil
	}

	return o.R.GetUnpairRequest()
}

func (r *aftermarketDeviceR) GetUnpairRequest() *MetaTransactionRequest {
	if r == nil {
		return nil
	}

	return r.UnpairRequest
}

func (o *AftermarketDevice) GetAutopiUnitAutopiJobs() AutopiJobSlice {
	if o == nil {
		return nil
	}

	return o.R.GetAutopiUnitAutopiJobs()
}

func (r *aftermarketDeviceR) GetAutopiUnitAutopiJobs() AutopiJobSlice {
	if r == nil {
		return nil
	}

	return r.AutopiUnitAutopiJobs
}

func (o *AftermarketDevice) GetSerialUserDeviceAPIIntegrations() UserDeviceAPIIntegrationSlice {
	if o == nil {
		return nil
	}

	return o.R.GetSerialUserDeviceAPIIntegrations()
}

func (r *aftermarketDeviceR) GetSerialUserDeviceAPIIntegrations() UserDeviceAPIIntegrationSlice {
	if r == nil {
		return nil
	}

	return r.SerialUserDeviceAPIIntegrations
}

// aftermarketDeviceL is where Load methods for each relationship are stored.
type aftermarketDeviceL struct{}

var (
	aftermarketDeviceAllColumns            = []string{"serial", "user_id", "ethereum_address", "created_at", "updated_at", "token_id", "claim_meta_transaction_request_id", "owner_address", "pair_request_id", "unpair_request_id", "vehicle_token_id", "beneficiary", "metadata", "device_manufacturer_token_id"}
	aftermarketDeviceColumnsWithoutDefault = []string{"serial", "ethereum_address", "token_id", "device_manufacturer_token_id"}
	aftermarketDeviceColumnsWithDefault    = []string{"user_id", "created_at", "updated_at", "claim_meta_transaction_request_id", "owner_address", "pair_request_id", "unpair_request_id", "vehicle_token_id", "beneficiary", "metadata"}
	aftermarketDevicePrimaryKeyColumns     = []string{"ethereum_address"}
	aftermarketDeviceGeneratedColumns      = []string{}
)

type (
	// AftermarketDeviceSlice is an alias for a slice of pointers to AftermarketDevice.
	// This should almost always be used instead of []AftermarketDevice.
	AftermarketDeviceSlice []*AftermarketDevice
	// AftermarketDeviceHook is the signature for custom AftermarketDevice hook methods
	AftermarketDeviceHook func(context.Context, boil.ContextExecutor, *AftermarketDevice) error

	aftermarketDeviceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	aftermarketDeviceType                 = reflect.TypeOf(&AftermarketDevice{})
	aftermarketDeviceMapping              = queries.MakeStructMapping(aftermarketDeviceType)
	aftermarketDevicePrimaryKeyMapping, _ = queries.BindMapping(aftermarketDeviceType, aftermarketDeviceMapping, aftermarketDevicePrimaryKeyColumns)
	aftermarketDeviceInsertCacheMut       sync.RWMutex
	aftermarketDeviceInsertCache          = make(map[string]insertCache)
	aftermarketDeviceUpdateCacheMut       sync.RWMutex
	aftermarketDeviceUpdateCache          = make(map[string]updateCache)
	aftermarketDeviceUpsertCacheMut       sync.RWMutex
	aftermarketDeviceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var aftermarketDeviceAfterSelectMu sync.Mutex
var aftermarketDeviceAfterSelectHooks []AftermarketDeviceHook

var aftermarketDeviceBeforeInsertMu sync.Mutex
var aftermarketDeviceBeforeInsertHooks []AftermarketDeviceHook
var aftermarketDeviceAfterInsertMu sync.Mutex
var aftermarketDeviceAfterInsertHooks []AftermarketDeviceHook

var aftermarketDeviceBeforeUpdateMu sync.Mutex
var aftermarketDeviceBeforeUpdateHooks []AftermarketDeviceHook
var aftermarketDeviceAfterUpdateMu sync.Mutex
var aftermarketDeviceAfterUpdateHooks []AftermarketDeviceHook

var aftermarketDeviceBeforeDeleteMu sync.Mutex
var aftermarketDeviceBeforeDeleteHooks []AftermarketDeviceHook
var aftermarketDeviceAfterDeleteMu sync.Mutex
var aftermarketDeviceAfterDeleteHooks []AftermarketDeviceHook

var aftermarketDeviceBeforeUpsertMu sync.Mutex
var aftermarketDeviceBeforeUpsertHooks []AftermarketDeviceHook
var aftermarketDeviceAfterUpsertMu sync.Mutex
var aftermarketDeviceAfterUpsertHooks []AftermarketDeviceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AftermarketDevice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AftermarketDevice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AftermarketDevice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AftermarketDevice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AftermarketDevice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AftermarketDevice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AftermarketDevice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AftermarketDevice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AftermarketDevice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAftermarketDeviceHook registers your hook function for all future operations.
func AddAftermarketDeviceHook(hookPoint boil.HookPoint, aftermarketDeviceHook AftermarketDeviceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		aftermarketDeviceAfterSelectMu.Lock()
		aftermarketDeviceAfterSelectHooks = append(aftermarketDeviceAfterSelectHooks, aftermarketDeviceHook)
		aftermarketDeviceAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		aftermarketDeviceBeforeInsertMu.Lock()
		aftermarketDeviceBeforeInsertHooks = append(aftermarketDeviceBeforeInsertHooks, aftermarketDeviceHook)
		aftermarketDeviceBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		aftermarketDeviceAfterInsertMu.Lock()
		aftermarketDeviceAfterInsertHooks = append(aftermarketDeviceAfterInsertHooks, aftermarketDeviceHook)
		aftermarketDeviceAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		aftermarketDeviceBeforeUpdateMu.Lock()
		aftermarketDeviceBeforeUpdateHooks = append(aftermarketDeviceBeforeUpdateHooks, aftermarketDeviceHook)
		aftermarketDeviceBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		aftermarketDeviceAfterUpdateMu.Lock()
		aftermarketDeviceAfterUpdateHooks = append(aftermarketDeviceAfterUpdateHooks, aftermarketDeviceHook)
		aftermarketDeviceAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		aftermarketDeviceBeforeDeleteMu.Lock()
		aftermarketDeviceBeforeDeleteHooks = append(aftermarketDeviceBeforeDeleteHooks, aftermarketDeviceHook)
		aftermarketDeviceBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		aftermarketDeviceAfterDeleteMu.Lock()
		aftermarketDeviceAfterDeleteHooks = append(aftermarketDeviceAfterDeleteHooks, aftermarketDeviceHook)
		aftermarketDeviceAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		aftermarketDeviceBeforeUpsertMu.Lock()
		aftermarketDeviceBeforeUpsertHooks = append(aftermarketDeviceBeforeUpsertHooks, aftermarketDeviceHook)
		aftermarketDeviceBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		aftermarketDeviceAfterUpsertMu.Lock()
		aftermarketDeviceAfterUpsertHooks = append(aftermarketDeviceAfterUpsertHooks, aftermarketDeviceHook)
		aftermarketDeviceAfterUpsertMu.Unlock()
	}
}

// One returns a single aftermarketDevice record from the query.
func (q aftermarketDeviceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AftermarketDevice, error) {
	o := &AftermarketDevice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for aftermarket_devices")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AftermarketDevice records from the query.
func (q aftermarketDeviceQuery) All(ctx context.Context, exec boil.ContextExecutor) (AftermarketDeviceSlice, error) {
	var o []*AftermarketDevice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AftermarketDevice slice")
	}

	if len(aftermarketDeviceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AftermarketDevice records in the query.
func (q aftermarketDeviceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count aftermarket_devices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q aftermarketDeviceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if aftermarket_devices exists")
	}

	return count > 0, nil
}

// VehicleToken pointed to by the foreign key.
func (o *AftermarketDevice) VehicleToken(mods ...qm.QueryMod) userDeviceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"token_id\" = ?", o.VehicleTokenID),
	}

	queryMods = append(queryMods, mods...)

	return UserDevices(queryMods...)
}

// ClaimMetaTransactionRequest pointed to by the foreign key.
func (o *AftermarketDevice) ClaimMetaTransactionRequest(mods ...qm.QueryMod) metaTransactionRequestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ClaimMetaTransactionRequestID),
	}

	queryMods = append(queryMods, mods...)

	return MetaTransactionRequests(queryMods...)
}

// PairRequest pointed to by the foreign key.
func (o *AftermarketDevice) PairRequest(mods ...qm.QueryMod) metaTransactionRequestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PairRequestID),
	}

	queryMods = append(queryMods, mods...)

	return MetaTransactionRequests(queryMods...)
}

// UnpairRequest pointed to by the foreign key.
func (o *AftermarketDevice) UnpairRequest(mods ...qm.QueryMod) metaTransactionRequestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UnpairRequestID),
	}

	queryMods = append(queryMods, mods...)

	return MetaTransactionRequests(queryMods...)
}

// AutopiUnitAutopiJobs retrieves all the autopi_job's AutopiJobs with an executor via autopi_unit_id column.
func (o *AftermarketDevice) AutopiUnitAutopiJobs(mods ...qm.QueryMod) autopiJobQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"devices_api\".\"autopi_jobs\".\"autopi_unit_id\"=?", o.Serial),
	)

	return AutopiJobs(queryMods...)
}

// SerialUserDeviceAPIIntegrations retrieves all the user_device_api_integration's UserDeviceAPIIntegrations with an executor via serial column.
func (o *AftermarketDevice) SerialUserDeviceAPIIntegrations(mods ...qm.QueryMod) userDeviceAPIIntegrationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"devices_api\".\"user_device_api_integrations\".\"serial\"=?", o.Serial),
	)

	return UserDeviceAPIIntegrations(queryMods...)
}

// LoadVehicleToken allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (aftermarketDeviceL) LoadVehicleToken(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAftermarketDevice interface{}, mods queries.Applicator) error {
	var slice []*AftermarketDevice
	var object *AftermarketDevice

	if singular {
		var ok bool
		object, ok = maybeAftermarketDevice.(*AftermarketDevice)
		if !ok {
			object = new(AftermarketDevice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAftermarketDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAftermarketDevice))
			}
		}
	} else {
		s, ok := maybeAftermarketDevice.(*[]*AftermarketDevice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAftermarketDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAftermarketDevice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &aftermarketDeviceR{}
		}
		if !queries.IsNil(object.VehicleTokenID) {
			args[object.VehicleTokenID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aftermarketDeviceR{}
			}

			if !queries.IsNil(obj.VehicleTokenID) {
				args[obj.VehicleTokenID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`devices_api.user_devices`),
		qm.WhereIn(`devices_api.user_devices.token_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserDevice")
	}

	var resultSlice []*UserDevice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserDevice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_devices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_devices")
	}

	if len(userDeviceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VehicleToken = foreign
		if foreign.R == nil {
			foreign.R = &userDeviceR{}
		}
		foreign.R.VehicleTokenAftermarketDevice = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.VehicleTokenID, foreign.TokenID) {
				local.R.VehicleToken = foreign
				if foreign.R == nil {
					foreign.R = &userDeviceR{}
				}
				foreign.R.VehicleTokenAftermarketDevice = local
				break
			}
		}
	}

	return nil
}

// LoadClaimMetaTransactionRequest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (aftermarketDeviceL) LoadClaimMetaTransactionRequest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAftermarketDevice interface{}, mods queries.Applicator) error {
	var slice []*AftermarketDevice
	var object *AftermarketDevice

	if singular {
		var ok bool
		object, ok = maybeAftermarketDevice.(*AftermarketDevice)
		if !ok {
			object = new(AftermarketDevice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAftermarketDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAftermarketDevice))
			}
		}
	} else {
		s, ok := maybeAftermarketDevice.(*[]*AftermarketDevice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAftermarketDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAftermarketDevice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &aftermarketDeviceR{}
		}
		if !queries.IsNil(object.ClaimMetaTransactionRequestID) {
			args[object.ClaimMetaTransactionRequestID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aftermarketDeviceR{}
			}

			if !queries.IsNil(obj.ClaimMetaTransactionRequestID) {
				args[obj.ClaimMetaTransactionRequestID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`devices_api.meta_transaction_requests`),
		qm.WhereIn(`devices_api.meta_transaction_requests.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MetaTransactionRequest")
	}

	var resultSlice []*MetaTransactionRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MetaTransactionRequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for meta_transaction_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for meta_transaction_requests")
	}

	if len(metaTransactionRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ClaimMetaTransactionRequest = foreign
		if foreign.R == nil {
			foreign.R = &metaTransactionRequestR{}
		}
		foreign.R.ClaimMetaTransactionRequestAftermarketDevice = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ClaimMetaTransactionRequestID, foreign.ID) {
				local.R.ClaimMetaTransactionRequest = foreign
				if foreign.R == nil {
					foreign.R = &metaTransactionRequestR{}
				}
				foreign.R.ClaimMetaTransactionRequestAftermarketDevice = local
				break
			}
		}
	}

	return nil
}

// LoadPairRequest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (aftermarketDeviceL) LoadPairRequest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAftermarketDevice interface{}, mods queries.Applicator) error {
	var slice []*AftermarketDevice
	var object *AftermarketDevice

	if singular {
		var ok bool
		object, ok = maybeAftermarketDevice.(*AftermarketDevice)
		if !ok {
			object = new(AftermarketDevice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAftermarketDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAftermarketDevice))
			}
		}
	} else {
		s, ok := maybeAftermarketDevice.(*[]*AftermarketDevice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAftermarketDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAftermarketDevice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &aftermarketDeviceR{}
		}
		if !queries.IsNil(object.PairRequestID) {
			args[object.PairRequestID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aftermarketDeviceR{}
			}

			if !queries.IsNil(obj.PairRequestID) {
				args[obj.PairRequestID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`devices_api.meta_transaction_requests`),
		qm.WhereIn(`devices_api.meta_transaction_requests.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MetaTransactionRequest")
	}

	var resultSlice []*MetaTransactionRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MetaTransactionRequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for meta_transaction_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for meta_transaction_requests")
	}

	if len(metaTransactionRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PairRequest = foreign
		if foreign.R == nil {
			foreign.R = &metaTransactionRequestR{}
		}
		foreign.R.PairRequestAftermarketDevice = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PairRequestID, foreign.ID) {
				local.R.PairRequest = foreign
				if foreign.R == nil {
					foreign.R = &metaTransactionRequestR{}
				}
				foreign.R.PairRequestAftermarketDevice = local
				break
			}
		}
	}

	return nil
}

// LoadUnpairRequest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (aftermarketDeviceL) LoadUnpairRequest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAftermarketDevice interface{}, mods queries.Applicator) error {
	var slice []*AftermarketDevice
	var object *AftermarketDevice

	if singular {
		var ok bool
		object, ok = maybeAftermarketDevice.(*AftermarketDevice)
		if !ok {
			object = new(AftermarketDevice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAftermarketDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAftermarketDevice))
			}
		}
	} else {
		s, ok := maybeAftermarketDevice.(*[]*AftermarketDevice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAftermarketDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAftermarketDevice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &aftermarketDeviceR{}
		}
		if !queries.IsNil(object.UnpairRequestID) {
			args[object.UnpairRequestID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aftermarketDeviceR{}
			}

			if !queries.IsNil(obj.UnpairRequestID) {
				args[obj.UnpairRequestID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`devices_api.meta_transaction_requests`),
		qm.WhereIn(`devices_api.meta_transaction_requests.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MetaTransactionRequest")
	}

	var resultSlice []*MetaTransactionRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MetaTransactionRequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for meta_transaction_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for meta_transaction_requests")
	}

	if len(metaTransactionRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UnpairRequest = foreign
		if foreign.R == nil {
			foreign.R = &metaTransactionRequestR{}
		}
		foreign.R.UnpairRequestAftermarketDevice = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UnpairRequestID, foreign.ID) {
				local.R.UnpairRequest = foreign
				if foreign.R == nil {
					foreign.R = &metaTransactionRequestR{}
				}
				foreign.R.UnpairRequestAftermarketDevice = local
				break
			}
		}
	}

	return nil
}

// LoadAutopiUnitAutopiJobs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (aftermarketDeviceL) LoadAutopiUnitAutopiJobs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAftermarketDevice interface{}, mods queries.Applicator) error {
	var slice []*AftermarketDevice
	var object *AftermarketDevice

	if singular {
		var ok bool
		object, ok = maybeAftermarketDevice.(*AftermarketDevice)
		if !ok {
			object = new(AftermarketDevice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAftermarketDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAftermarketDevice))
			}
		}
	} else {
		s, ok := maybeAftermarketDevice.(*[]*AftermarketDevice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAftermarketDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAftermarketDevice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &aftermarketDeviceR{}
		}
		args[object.Serial] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aftermarketDeviceR{}
			}
			args[obj.Serial] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`devices_api.autopi_jobs`),
		qm.WhereIn(`devices_api.autopi_jobs.autopi_unit_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load autopi_jobs")
	}

	var resultSlice []*AutopiJob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice autopi_jobs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on autopi_jobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for autopi_jobs")
	}

	if len(autopiJobAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AutopiUnitAutopiJobs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &autopiJobR{}
			}
			foreign.R.AutopiUnit = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Serial, foreign.AutopiUnitID) {
				local.R.AutopiUnitAutopiJobs = append(local.R.AutopiUnitAutopiJobs, foreign)
				if foreign.R == nil {
					foreign.R = &autopiJobR{}
				}
				foreign.R.AutopiUnit = local
				break
			}
		}
	}

	return nil
}

// LoadSerialUserDeviceAPIIntegrations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (aftermarketDeviceL) LoadSerialUserDeviceAPIIntegrations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAftermarketDevice interface{}, mods queries.Applicator) error {
	var slice []*AftermarketDevice
	var object *AftermarketDevice

	if singular {
		var ok bool
		object, ok = maybeAftermarketDevice.(*AftermarketDevice)
		if !ok {
			object = new(AftermarketDevice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAftermarketDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAftermarketDevice))
			}
		}
	} else {
		s, ok := maybeAftermarketDevice.(*[]*AftermarketDevice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAftermarketDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAftermarketDevice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &aftermarketDeviceR{}
		}
		args[object.Serial] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aftermarketDeviceR{}
			}
			args[obj.Serial] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`devices_api.user_device_api_integrations`),
		qm.WhereIn(`devices_api.user_device_api_integrations.serial in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_device_api_integrations")
	}

	var resultSlice []*UserDeviceAPIIntegration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_device_api_integrations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_device_api_integrations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_device_api_integrations")
	}

	if len(userDeviceAPIIntegrationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SerialUserDeviceAPIIntegrations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userDeviceAPIIntegrationR{}
			}
			foreign.R.SerialAftermarketDevice = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Serial, foreign.Serial) {
				local.R.SerialUserDeviceAPIIntegrations = append(local.R.SerialUserDeviceAPIIntegrations, foreign)
				if foreign.R == nil {
					foreign.R = &userDeviceAPIIntegrationR{}
				}
				foreign.R.SerialAftermarketDevice = local
				break
			}
		}
	}

	return nil
}

// SetVehicleToken of the aftermarketDevice to the related item.
// Sets o.R.VehicleToken to related.
// Adds o to related.R.VehicleTokenAftermarketDevice.
func (o *AftermarketDevice) SetVehicleToken(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserDevice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"aftermarket_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vehicle_token_id"}),
		strmangle.WhereClause("\"", "\"", 2, aftermarketDevicePrimaryKeyColumns),
	)
	values := []interface{}{related.TokenID, o.EthereumAddress}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.VehicleTokenID, related.TokenID)
	if o.R == nil {
		o.R = &aftermarketDeviceR{
			VehicleToken: related,
		}
	} else {
		o.R.VehicleToken = related
	}

	if related.R == nil {
		related.R = &userDeviceR{
			VehicleTokenAftermarketDevice: o,
		}
	} else {
		related.R.VehicleTokenAftermarketDevice = o
	}

	return nil
}

// RemoveVehicleToken relationship.
// Sets o.R.VehicleToken to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AftermarketDevice) RemoveVehicleToken(ctx context.Context, exec boil.ContextExecutor, related *UserDevice) error {
	var err error

	queries.SetScanner(&o.VehicleTokenID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("vehicle_token_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.VehicleToken = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.VehicleTokenAftermarketDevice = nil
	return nil
}

// SetClaimMetaTransactionRequest of the aftermarketDevice to the related item.
// Sets o.R.ClaimMetaTransactionRequest to related.
// Adds o to related.R.ClaimMetaTransactionRequestAftermarketDevice.
func (o *AftermarketDevice) SetClaimMetaTransactionRequest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MetaTransactionRequest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"aftermarket_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"claim_meta_transaction_request_id"}),
		strmangle.WhereClause("\"", "\"", 2, aftermarketDevicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.EthereumAddress}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ClaimMetaTransactionRequestID, related.ID)
	if o.R == nil {
		o.R = &aftermarketDeviceR{
			ClaimMetaTransactionRequest: related,
		}
	} else {
		o.R.ClaimMetaTransactionRequest = related
	}

	if related.R == nil {
		related.R = &metaTransactionRequestR{
			ClaimMetaTransactionRequestAftermarketDevice: o,
		}
	} else {
		related.R.ClaimMetaTransactionRequestAftermarketDevice = o
	}

	return nil
}

// RemoveClaimMetaTransactionRequest relationship.
// Sets o.R.ClaimMetaTransactionRequest to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AftermarketDevice) RemoveClaimMetaTransactionRequest(ctx context.Context, exec boil.ContextExecutor, related *MetaTransactionRequest) error {
	var err error

	queries.SetScanner(&o.ClaimMetaTransactionRequestID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("claim_meta_transaction_request_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ClaimMetaTransactionRequest = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.ClaimMetaTransactionRequestAftermarketDevice = nil
	return nil
}

// SetPairRequest of the aftermarketDevice to the related item.
// Sets o.R.PairRequest to related.
// Adds o to related.R.PairRequestAftermarketDevice.
func (o *AftermarketDevice) SetPairRequest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MetaTransactionRequest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"aftermarket_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pair_request_id"}),
		strmangle.WhereClause("\"", "\"", 2, aftermarketDevicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.EthereumAddress}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PairRequestID, related.ID)
	if o.R == nil {
		o.R = &aftermarketDeviceR{
			PairRequest: related,
		}
	} else {
		o.R.PairRequest = related
	}

	if related.R == nil {
		related.R = &metaTransactionRequestR{
			PairRequestAftermarketDevice: o,
		}
	} else {
		related.R.PairRequestAftermarketDevice = o
	}

	return nil
}

// RemovePairRequest relationship.
// Sets o.R.PairRequest to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AftermarketDevice) RemovePairRequest(ctx context.Context, exec boil.ContextExecutor, related *MetaTransactionRequest) error {
	var err error

	queries.SetScanner(&o.PairRequestID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("pair_request_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PairRequest = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.PairRequestAftermarketDevice = nil
	return nil
}

// SetUnpairRequest of the aftermarketDevice to the related item.
// Sets o.R.UnpairRequest to related.
// Adds o to related.R.UnpairRequestAftermarketDevice.
func (o *AftermarketDevice) SetUnpairRequest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MetaTransactionRequest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"aftermarket_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"unpair_request_id"}),
		strmangle.WhereClause("\"", "\"", 2, aftermarketDevicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.EthereumAddress}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UnpairRequestID, related.ID)
	if o.R == nil {
		o.R = &aftermarketDeviceR{
			UnpairRequest: related,
		}
	} else {
		o.R.UnpairRequest = related
	}

	if related.R == nil {
		related.R = &metaTransactionRequestR{
			UnpairRequestAftermarketDevice: o,
		}
	} else {
		related.R.UnpairRequestAftermarketDevice = o
	}

	return nil
}

// RemoveUnpairRequest relationship.
// Sets o.R.UnpairRequest to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AftermarketDevice) RemoveUnpairRequest(ctx context.Context, exec boil.ContextExecutor, related *MetaTransactionRequest) error {
	var err error

	queries.SetScanner(&o.UnpairRequestID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("unpair_request_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UnpairRequest = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.UnpairRequestAftermarketDevice = nil
	return nil
}

// AddAutopiUnitAutopiJobs adds the given related objects to the existing relationships
// of the aftermarket_device, optionally inserting them as new records.
// Appends related to o.R.AutopiUnitAutopiJobs.
// Sets related.R.AutopiUnit appropriately.
func (o *AftermarketDevice) AddAutopiUnitAutopiJobs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutopiJob) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AutopiUnitID, o.Serial)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"devices_api\".\"autopi_jobs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"autopi_unit_id"}),
				strmangle.WhereClause("\"", "\"", 2, autopiJobPrimaryKeyColumns),
			)
			values := []interface{}{o.Serial, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AutopiUnitID, o.Serial)
		}
	}

	if o.R == nil {
		o.R = &aftermarketDeviceR{
			AutopiUnitAutopiJobs: related,
		}
	} else {
		o.R.AutopiUnitAutopiJobs = append(o.R.AutopiUnitAutopiJobs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &autopiJobR{
				AutopiUnit: o,
			}
		} else {
			rel.R.AutopiUnit = o
		}
	}
	return nil
}

// SetAutopiUnitAutopiJobs removes all previously related items of the
// aftermarket_device replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AutopiUnit's AutopiUnitAutopiJobs accordingly.
// Replaces o.R.AutopiUnitAutopiJobs with related.
// Sets related.R.AutopiUnit's AutopiUnitAutopiJobs accordingly.
func (o *AftermarketDevice) SetAutopiUnitAutopiJobs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AutopiJob) error {
	query := "update \"devices_api\".\"autopi_jobs\" set \"autopi_unit_id\" = null where \"autopi_unit_id\" = $1"
	values := []interface{}{o.Serial}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AutopiUnitAutopiJobs {
			queries.SetScanner(&rel.AutopiUnitID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AutopiUnit = nil
		}
		o.R.AutopiUnitAutopiJobs = nil
	}

	return o.AddAutopiUnitAutopiJobs(ctx, exec, insert, related...)
}

// RemoveAutopiUnitAutopiJobs relationships from objects passed in.
// Removes related items from R.AutopiUnitAutopiJobs (uses pointer comparison, removal does not keep order)
// Sets related.R.AutopiUnit.
func (o *AftermarketDevice) RemoveAutopiUnitAutopiJobs(ctx context.Context, exec boil.ContextExecutor, related ...*AutopiJob) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AutopiUnitID, nil)
		if rel.R != nil {
			rel.R.AutopiUnit = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("autopi_unit_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AutopiUnitAutopiJobs {
			if rel != ri {
				continue
			}

			ln := len(o.R.AutopiUnitAutopiJobs)
			if ln > 1 && i < ln-1 {
				o.R.AutopiUnitAutopiJobs[i] = o.R.AutopiUnitAutopiJobs[ln-1]
			}
			o.R.AutopiUnitAutopiJobs = o.R.AutopiUnitAutopiJobs[:ln-1]
			break
		}
	}

	return nil
}

// AddSerialUserDeviceAPIIntegrations adds the given related objects to the existing relationships
// of the aftermarket_device, optionally inserting them as new records.
// Appends related to o.R.SerialUserDeviceAPIIntegrations.
// Sets related.R.SerialAftermarketDevice appropriately.
func (o *AftermarketDevice) AddSerialUserDeviceAPIIntegrations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserDeviceAPIIntegration) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Serial, o.Serial)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"devices_api\".\"user_device_api_integrations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"serial"}),
				strmangle.WhereClause("\"", "\"", 2, userDeviceAPIIntegrationPrimaryKeyColumns),
			)
			values := []interface{}{o.Serial, rel.UserDeviceID, rel.IntegrationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Serial, o.Serial)
		}
	}

	if o.R == nil {
		o.R = &aftermarketDeviceR{
			SerialUserDeviceAPIIntegrations: related,
		}
	} else {
		o.R.SerialUserDeviceAPIIntegrations = append(o.R.SerialUserDeviceAPIIntegrations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userDeviceAPIIntegrationR{
				SerialAftermarketDevice: o,
			}
		} else {
			rel.R.SerialAftermarketDevice = o
		}
	}
	return nil
}

// SetSerialUserDeviceAPIIntegrations removes all previously related items of the
// aftermarket_device replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SerialAftermarketDevice's SerialUserDeviceAPIIntegrations accordingly.
// Replaces o.R.SerialUserDeviceAPIIntegrations with related.
// Sets related.R.SerialAftermarketDevice's SerialUserDeviceAPIIntegrations accordingly.
func (o *AftermarketDevice) SetSerialUserDeviceAPIIntegrations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserDeviceAPIIntegration) error {
	query := "update \"devices_api\".\"user_device_api_integrations\" set \"serial\" = null where \"serial\" = $1"
	values := []interface{}{o.Serial}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SerialUserDeviceAPIIntegrations {
			queries.SetScanner(&rel.Serial, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SerialAftermarketDevice = nil
		}
		o.R.SerialUserDeviceAPIIntegrations = nil
	}

	return o.AddSerialUserDeviceAPIIntegrations(ctx, exec, insert, related...)
}

// RemoveSerialUserDeviceAPIIntegrations relationships from objects passed in.
// Removes related items from R.SerialUserDeviceAPIIntegrations (uses pointer comparison, removal does not keep order)
// Sets related.R.SerialAftermarketDevice.
func (o *AftermarketDevice) RemoveSerialUserDeviceAPIIntegrations(ctx context.Context, exec boil.ContextExecutor, related ...*UserDeviceAPIIntegration) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Serial, nil)
		if rel.R != nil {
			rel.R.SerialAftermarketDevice = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("serial")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SerialUserDeviceAPIIntegrations {
			if rel != ri {
				continue
			}

			ln := len(o.R.SerialUserDeviceAPIIntegrations)
			if ln > 1 && i < ln-1 {
				o.R.SerialUserDeviceAPIIntegrations[i] = o.R.SerialUserDeviceAPIIntegrations[ln-1]
			}
			o.R.SerialUserDeviceAPIIntegrations = o.R.SerialUserDeviceAPIIntegrations[:ln-1]
			break
		}
	}

	return nil
}

// AftermarketDevices retrieves all the records using an executor.
func AftermarketDevices(mods ...qm.QueryMod) aftermarketDeviceQuery {
	mods = append(mods, qm.From("\"devices_api\".\"aftermarket_devices\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"devices_api\".\"aftermarket_devices\".*"})
	}

	return aftermarketDeviceQuery{q}
}

// FindAftermarketDevice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAftermarketDevice(ctx context.Context, exec boil.ContextExecutor, ethereumAddress []byte, selectCols ...string) (*AftermarketDevice, error) {
	aftermarketDeviceObj := &AftermarketDevice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"devices_api\".\"aftermarket_devices\" where \"ethereum_address\"=$1", sel,
	)

	q := queries.Raw(query, ethereumAddress)

	err := q.Bind(ctx, exec, aftermarketDeviceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from aftermarket_devices")
	}

	if err = aftermarketDeviceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return aftermarketDeviceObj, err
	}

	return aftermarketDeviceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AftermarketDevice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no aftermarket_devices provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aftermarketDeviceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	aftermarketDeviceInsertCacheMut.RLock()
	cache, cached := aftermarketDeviceInsertCache[key]
	aftermarketDeviceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			aftermarketDeviceAllColumns,
			aftermarketDeviceColumnsWithDefault,
			aftermarketDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(aftermarketDeviceType, aftermarketDeviceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(aftermarketDeviceType, aftermarketDeviceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"devices_api\".\"aftermarket_devices\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"devices_api\".\"aftermarket_devices\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into aftermarket_devices")
	}

	if !cached {
		aftermarketDeviceInsertCacheMut.Lock()
		aftermarketDeviceInsertCache[key] = cache
		aftermarketDeviceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AftermarketDevice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AftermarketDevice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	aftermarketDeviceUpdateCacheMut.RLock()
	cache, cached := aftermarketDeviceUpdateCache[key]
	aftermarketDeviceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			aftermarketDeviceAllColumns,
			aftermarketDevicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update aftermarket_devices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"devices_api\".\"aftermarket_devices\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, aftermarketDevicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(aftermarketDeviceType, aftermarketDeviceMapping, append(wl, aftermarketDevicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update aftermarket_devices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for aftermarket_devices")
	}

	if !cached {
		aftermarketDeviceUpdateCacheMut.Lock()
		aftermarketDeviceUpdateCache[key] = cache
		aftermarketDeviceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q aftermarketDeviceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for aftermarket_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for aftermarket_devices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AftermarketDeviceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aftermarketDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"devices_api\".\"aftermarket_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, aftermarketDevicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in aftermarketDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all aftermarketDevice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AftermarketDevice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no aftermarket_devices provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aftermarketDeviceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	aftermarketDeviceUpsertCacheMut.RLock()
	cache, cached := aftermarketDeviceUpsertCache[key]
	aftermarketDeviceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			aftermarketDeviceAllColumns,
			aftermarketDeviceColumnsWithDefault,
			aftermarketDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			aftermarketDeviceAllColumns,
			aftermarketDevicePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert aftermarket_devices, could not build update column list")
		}

		ret := strmangle.SetComplement(aftermarketDeviceAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(aftermarketDevicePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert aftermarket_devices, could not build conflict column list")
			}

			conflict = make([]string, len(aftermarketDevicePrimaryKeyColumns))
			copy(conflict, aftermarketDevicePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"devices_api\".\"aftermarket_devices\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(aftermarketDeviceType, aftermarketDeviceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(aftermarketDeviceType, aftermarketDeviceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert aftermarket_devices")
	}

	if !cached {
		aftermarketDeviceUpsertCacheMut.Lock()
		aftermarketDeviceUpsertCache[key] = cache
		aftermarketDeviceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AftermarketDevice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AftermarketDevice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AftermarketDevice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), aftermarketDevicePrimaryKeyMapping)
	sql := "DELETE FROM \"devices_api\".\"aftermarket_devices\" WHERE \"ethereum_address\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from aftermarket_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for aftermarket_devices")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q aftermarketDeviceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no aftermarketDeviceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from aftermarket_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for aftermarket_devices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AftermarketDeviceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(aftermarketDeviceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aftermarketDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"devices_api\".\"aftermarket_devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aftermarketDevicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from aftermarketDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for aftermarket_devices")
	}

	if len(aftermarketDeviceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AftermarketDevice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAftermarketDevice(ctx, exec, o.EthereumAddress)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AftermarketDeviceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AftermarketDeviceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aftermarketDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"devices_api\".\"aftermarket_devices\".* FROM \"devices_api\".\"aftermarket_devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aftermarketDevicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AftermarketDeviceSlice")
	}

	*o = slice

	return nil
}

// AftermarketDeviceExists checks if the AftermarketDevice row exists.
func AftermarketDeviceExists(ctx context.Context, exec boil.ContextExecutor, ethereumAddress []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"devices_api\".\"aftermarket_devices\" where \"ethereum_address\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, ethereumAddress)
	}
	row := exec.QueryRowContext(ctx, sql, ethereumAddress)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if aftermarket_devices exists")
	}

	return exists, nil
}

// Exists checks if the AftermarketDevice row exists.
func (o *AftermarketDevice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AftermarketDeviceExists(ctx, exec, o.EthereumAddress)
}
