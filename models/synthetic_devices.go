// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// SyntheticDevice is an object representing the database table.
type SyntheticDevice struct {
	VehicleTokenID     types.NullDecimal `boil:"vehicle_token_id" json:"vehicle_token_id,omitempty" toml:"vehicle_token_id" yaml:"vehicle_token_id,omitempty"`
	IntegrationTokenID types.Decimal     `boil:"integration_token_id" json:"integration_token_id" toml:"integration_token_id" yaml:"integration_token_id"`
	MintRequestID      string            `boil:"mint_request_id" json:"mint_request_id" toml:"mint_request_id" yaml:"mint_request_id"`
	WalletChildNumber  int               `boil:"wallet_child_number" json:"wallet_child_number" toml:"wallet_child_number" yaml:"wallet_child_number"`
	WalletAddress      []byte            `boil:"wallet_address" json:"wallet_address" toml:"wallet_address" yaml:"wallet_address"`
	TokenID            types.NullDecimal `boil:"token_id" json:"token_id,omitempty" toml:"token_id" yaml:"token_id,omitempty"`
	BurnRequestID      null.String       `boil:"burn_request_id" json:"burn_request_id,omitempty" toml:"burn_request_id" yaml:"burn_request_id,omitempty"`

	R *syntheticDeviceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L syntheticDeviceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SyntheticDeviceColumns = struct {
	VehicleTokenID     string
	IntegrationTokenID string
	MintRequestID      string
	WalletChildNumber  string
	WalletAddress      string
	TokenID            string
	BurnRequestID      string
}{
	VehicleTokenID:     "vehicle_token_id",
	IntegrationTokenID: "integration_token_id",
	MintRequestID:      "mint_request_id",
	WalletChildNumber:  "wallet_child_number",
	WalletAddress:      "wallet_address",
	TokenID:            "token_id",
	BurnRequestID:      "burn_request_id",
}

var SyntheticDeviceTableColumns = struct {
	VehicleTokenID     string
	IntegrationTokenID string
	MintRequestID      string
	WalletChildNumber  string
	WalletAddress      string
	TokenID            string
	BurnRequestID      string
}{
	VehicleTokenID:     "synthetic_devices.vehicle_token_id",
	IntegrationTokenID: "synthetic_devices.integration_token_id",
	MintRequestID:      "synthetic_devices.mint_request_id",
	WalletChildNumber:  "synthetic_devices.wallet_child_number",
	WalletAddress:      "synthetic_devices.wallet_address",
	TokenID:            "synthetic_devices.token_id",
	BurnRequestID:      "synthetic_devices.burn_request_id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var SyntheticDeviceWhere = struct {
	VehicleTokenID     whereHelpertypes_NullDecimal
	IntegrationTokenID whereHelpertypes_Decimal
	MintRequestID      whereHelperstring
	WalletChildNumber  whereHelperint
	WalletAddress      whereHelper__byte
	TokenID            whereHelpertypes_NullDecimal
	BurnRequestID      whereHelpernull_String
}{
	VehicleTokenID:     whereHelpertypes_NullDecimal{field: "\"devices_api\".\"synthetic_devices\".\"vehicle_token_id\""},
	IntegrationTokenID: whereHelpertypes_Decimal{field: "\"devices_api\".\"synthetic_devices\".\"integration_token_id\""},
	MintRequestID:      whereHelperstring{field: "\"devices_api\".\"synthetic_devices\".\"mint_request_id\""},
	WalletChildNumber:  whereHelperint{field: "\"devices_api\".\"synthetic_devices\".\"wallet_child_number\""},
	WalletAddress:      whereHelper__byte{field: "\"devices_api\".\"synthetic_devices\".\"wallet_address\""},
	TokenID:            whereHelpertypes_NullDecimal{field: "\"devices_api\".\"synthetic_devices\".\"token_id\""},
	BurnRequestID:      whereHelpernull_String{field: "\"devices_api\".\"synthetic_devices\".\"burn_request_id\""},
}

// SyntheticDeviceRels is where relationship names are stored.
var SyntheticDeviceRels = struct {
	MintRequest  string
	VehicleToken string
	BurnRequest  string
}{
	MintRequest:  "MintRequest",
	VehicleToken: "VehicleToken",
	BurnRequest:  "BurnRequest",
}

// syntheticDeviceR is where relationships are stored.
type syntheticDeviceR struct {
	MintRequest  *MetaTransactionRequest `boil:"MintRequest" json:"MintRequest" toml:"MintRequest" yaml:"MintRequest"`
	VehicleToken *VehicleNFT             `boil:"VehicleToken" json:"VehicleToken" toml:"VehicleToken" yaml:"VehicleToken"`
	BurnRequest  *MetaTransactionRequest `boil:"BurnRequest" json:"BurnRequest" toml:"BurnRequest" yaml:"BurnRequest"`
}

// NewStruct creates a new relationship struct
func (*syntheticDeviceR) NewStruct() *syntheticDeviceR {
	return &syntheticDeviceR{}
}

func (r *syntheticDeviceR) GetMintRequest() *MetaTransactionRequest {
	if r == nil {
		return nil
	}
	return r.MintRequest
}

func (r *syntheticDeviceR) GetVehicleToken() *VehicleNFT {
	if r == nil {
		return nil
	}
	return r.VehicleToken
}

func (r *syntheticDeviceR) GetBurnRequest() *MetaTransactionRequest {
	if r == nil {
		return nil
	}
	return r.BurnRequest
}

// syntheticDeviceL is where Load methods for each relationship are stored.
type syntheticDeviceL struct{}

var (
	syntheticDeviceAllColumns            = []string{"vehicle_token_id", "integration_token_id", "mint_request_id", "wallet_child_number", "wallet_address", "token_id", "burn_request_id"}
	syntheticDeviceColumnsWithoutDefault = []string{"integration_token_id", "mint_request_id", "wallet_child_number", "wallet_address"}
	syntheticDeviceColumnsWithDefault    = []string{"vehicle_token_id", "token_id", "burn_request_id"}
	syntheticDevicePrimaryKeyColumns     = []string{"mint_request_id"}
	syntheticDeviceGeneratedColumns      = []string{}
)

type (
	// SyntheticDeviceSlice is an alias for a slice of pointers to SyntheticDevice.
	// This should almost always be used instead of []SyntheticDevice.
	SyntheticDeviceSlice []*SyntheticDevice
	// SyntheticDeviceHook is the signature for custom SyntheticDevice hook methods
	SyntheticDeviceHook func(context.Context, boil.ContextExecutor, *SyntheticDevice) error

	syntheticDeviceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	syntheticDeviceType                 = reflect.TypeOf(&SyntheticDevice{})
	syntheticDeviceMapping              = queries.MakeStructMapping(syntheticDeviceType)
	syntheticDevicePrimaryKeyMapping, _ = queries.BindMapping(syntheticDeviceType, syntheticDeviceMapping, syntheticDevicePrimaryKeyColumns)
	syntheticDeviceInsertCacheMut       sync.RWMutex
	syntheticDeviceInsertCache          = make(map[string]insertCache)
	syntheticDeviceUpdateCacheMut       sync.RWMutex
	syntheticDeviceUpdateCache          = make(map[string]updateCache)
	syntheticDeviceUpsertCacheMut       sync.RWMutex
	syntheticDeviceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var syntheticDeviceAfterSelectHooks []SyntheticDeviceHook

var syntheticDeviceBeforeInsertHooks []SyntheticDeviceHook
var syntheticDeviceAfterInsertHooks []SyntheticDeviceHook

var syntheticDeviceBeforeUpdateHooks []SyntheticDeviceHook
var syntheticDeviceAfterUpdateHooks []SyntheticDeviceHook

var syntheticDeviceBeforeDeleteHooks []SyntheticDeviceHook
var syntheticDeviceAfterDeleteHooks []SyntheticDeviceHook

var syntheticDeviceBeforeUpsertHooks []SyntheticDeviceHook
var syntheticDeviceAfterUpsertHooks []SyntheticDeviceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SyntheticDevice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SyntheticDevice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SyntheticDevice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SyntheticDevice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SyntheticDevice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SyntheticDevice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SyntheticDevice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SyntheticDevice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SyntheticDevice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSyntheticDeviceHook registers your hook function for all future operations.
func AddSyntheticDeviceHook(hookPoint boil.HookPoint, syntheticDeviceHook SyntheticDeviceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		syntheticDeviceAfterSelectHooks = append(syntheticDeviceAfterSelectHooks, syntheticDeviceHook)
	case boil.BeforeInsertHook:
		syntheticDeviceBeforeInsertHooks = append(syntheticDeviceBeforeInsertHooks, syntheticDeviceHook)
	case boil.AfterInsertHook:
		syntheticDeviceAfterInsertHooks = append(syntheticDeviceAfterInsertHooks, syntheticDeviceHook)
	case boil.BeforeUpdateHook:
		syntheticDeviceBeforeUpdateHooks = append(syntheticDeviceBeforeUpdateHooks, syntheticDeviceHook)
	case boil.AfterUpdateHook:
		syntheticDeviceAfterUpdateHooks = append(syntheticDeviceAfterUpdateHooks, syntheticDeviceHook)
	case boil.BeforeDeleteHook:
		syntheticDeviceBeforeDeleteHooks = append(syntheticDeviceBeforeDeleteHooks, syntheticDeviceHook)
	case boil.AfterDeleteHook:
		syntheticDeviceAfterDeleteHooks = append(syntheticDeviceAfterDeleteHooks, syntheticDeviceHook)
	case boil.BeforeUpsertHook:
		syntheticDeviceBeforeUpsertHooks = append(syntheticDeviceBeforeUpsertHooks, syntheticDeviceHook)
	case boil.AfterUpsertHook:
		syntheticDeviceAfterUpsertHooks = append(syntheticDeviceAfterUpsertHooks, syntheticDeviceHook)
	}
}

// One returns a single syntheticDevice record from the query.
func (q syntheticDeviceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SyntheticDevice, error) {
	o := &SyntheticDevice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for synthetic_devices")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SyntheticDevice records from the query.
func (q syntheticDeviceQuery) All(ctx context.Context, exec boil.ContextExecutor) (SyntheticDeviceSlice, error) {
	var o []*SyntheticDevice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SyntheticDevice slice")
	}

	if len(syntheticDeviceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SyntheticDevice records in the query.
func (q syntheticDeviceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count synthetic_devices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q syntheticDeviceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if synthetic_devices exists")
	}

	return count > 0, nil
}

// MintRequest pointed to by the foreign key.
func (o *SyntheticDevice) MintRequest(mods ...qm.QueryMod) metaTransactionRequestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MintRequestID),
	}

	queryMods = append(queryMods, mods...)

	return MetaTransactionRequests(queryMods...)
}

// VehicleToken pointed to by the foreign key.
func (o *SyntheticDevice) VehicleToken(mods ...qm.QueryMod) vehicleNFTQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"token_id\" = ?", o.VehicleTokenID),
	}

	queryMods = append(queryMods, mods...)

	return VehicleNFTS(queryMods...)
}

// BurnRequest pointed to by the foreign key.
func (o *SyntheticDevice) BurnRequest(mods ...qm.QueryMod) metaTransactionRequestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BurnRequestID),
	}

	queryMods = append(queryMods, mods...)

	return MetaTransactionRequests(queryMods...)
}

// LoadMintRequest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syntheticDeviceL) LoadMintRequest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSyntheticDevice interface{}, mods queries.Applicator) error {
	var slice []*SyntheticDevice
	var object *SyntheticDevice

	if singular {
		var ok bool
		object, ok = maybeSyntheticDevice.(*SyntheticDevice)
		if !ok {
			object = new(SyntheticDevice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSyntheticDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSyntheticDevice))
			}
		}
	} else {
		s, ok := maybeSyntheticDevice.(*[]*SyntheticDevice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSyntheticDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSyntheticDevice))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syntheticDeviceR{}
		}
		args = append(args, object.MintRequestID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syntheticDeviceR{}
			}

			for _, a := range args {
				if a == obj.MintRequestID {
					continue Outer
				}
			}

			args = append(args, obj.MintRequestID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.meta_transaction_requests`),
		qm.WhereIn(`devices_api.meta_transaction_requests.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MetaTransactionRequest")
	}

	var resultSlice []*MetaTransactionRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MetaTransactionRequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for meta_transaction_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for meta_transaction_requests")
	}

	if len(metaTransactionRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MintRequest = foreign
		if foreign.R == nil {
			foreign.R = &metaTransactionRequestR{}
		}
		foreign.R.MintRequestSyntheticDevice = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MintRequestID == foreign.ID {
				local.R.MintRequest = foreign
				if foreign.R == nil {
					foreign.R = &metaTransactionRequestR{}
				}
				foreign.R.MintRequestSyntheticDevice = local
				break
			}
		}
	}

	return nil
}

// LoadVehicleToken allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syntheticDeviceL) LoadVehicleToken(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSyntheticDevice interface{}, mods queries.Applicator) error {
	var slice []*SyntheticDevice
	var object *SyntheticDevice

	if singular {
		var ok bool
		object, ok = maybeSyntheticDevice.(*SyntheticDevice)
		if !ok {
			object = new(SyntheticDevice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSyntheticDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSyntheticDevice))
			}
		}
	} else {
		s, ok := maybeSyntheticDevice.(*[]*SyntheticDevice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSyntheticDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSyntheticDevice))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syntheticDeviceR{}
		}
		if !queries.IsNil(object.VehicleTokenID) {
			args = append(args, object.VehicleTokenID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syntheticDeviceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.VehicleTokenID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.VehicleTokenID) {
				args = append(args, obj.VehicleTokenID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.vehicle_nfts`),
		qm.WhereIn(`devices_api.vehicle_nfts.token_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VehicleNFT")
	}

	var resultSlice []*VehicleNFT
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VehicleNFT")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vehicle_nfts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vehicle_nfts")
	}

	if len(vehicleNFTAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VehicleToken = foreign
		if foreign.R == nil {
			foreign.R = &vehicleNFTR{}
		}
		foreign.R.VehicleTokenSyntheticDevice = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.VehicleTokenID, foreign.TokenID) {
				local.R.VehicleToken = foreign
				if foreign.R == nil {
					foreign.R = &vehicleNFTR{}
				}
				foreign.R.VehicleTokenSyntheticDevice = local
				break
			}
		}
	}

	return nil
}

// LoadBurnRequest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syntheticDeviceL) LoadBurnRequest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSyntheticDevice interface{}, mods queries.Applicator) error {
	var slice []*SyntheticDevice
	var object *SyntheticDevice

	if singular {
		var ok bool
		object, ok = maybeSyntheticDevice.(*SyntheticDevice)
		if !ok {
			object = new(SyntheticDevice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSyntheticDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSyntheticDevice))
			}
		}
	} else {
		s, ok := maybeSyntheticDevice.(*[]*SyntheticDevice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSyntheticDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSyntheticDevice))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syntheticDeviceR{}
		}
		if !queries.IsNil(object.BurnRequestID) {
			args = append(args, object.BurnRequestID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syntheticDeviceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BurnRequestID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BurnRequestID) {
				args = append(args, obj.BurnRequestID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.meta_transaction_requests`),
		qm.WhereIn(`devices_api.meta_transaction_requests.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MetaTransactionRequest")
	}

	var resultSlice []*MetaTransactionRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MetaTransactionRequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for meta_transaction_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for meta_transaction_requests")
	}

	if len(metaTransactionRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BurnRequest = foreign
		if foreign.R == nil {
			foreign.R = &metaTransactionRequestR{}
		}
		foreign.R.BurnRequestSyntheticDevice = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BurnRequestID, foreign.ID) {
				local.R.BurnRequest = foreign
				if foreign.R == nil {
					foreign.R = &metaTransactionRequestR{}
				}
				foreign.R.BurnRequestSyntheticDevice = local
				break
			}
		}
	}

	return nil
}

// SetMintRequest of the syntheticDevice to the related item.
// Sets o.R.MintRequest to related.
// Adds o to related.R.MintRequestSyntheticDevice.
func (o *SyntheticDevice) SetMintRequest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MetaTransactionRequest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"synthetic_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mint_request_id"}),
		strmangle.WhereClause("\"", "\"", 2, syntheticDevicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MintRequestID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MintRequestID = related.ID
	if o.R == nil {
		o.R = &syntheticDeviceR{
			MintRequest: related,
		}
	} else {
		o.R.MintRequest = related
	}

	if related.R == nil {
		related.R = &metaTransactionRequestR{
			MintRequestSyntheticDevice: o,
		}
	} else {
		related.R.MintRequestSyntheticDevice = o
	}

	return nil
}

// SetVehicleToken of the syntheticDevice to the related item.
// Sets o.R.VehicleToken to related.
// Adds o to related.R.VehicleTokenSyntheticDevice.
func (o *SyntheticDevice) SetVehicleToken(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VehicleNFT) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"synthetic_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vehicle_token_id"}),
		strmangle.WhereClause("\"", "\"", 2, syntheticDevicePrimaryKeyColumns),
	)
	values := []interface{}{related.TokenID, o.MintRequestID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.VehicleTokenID, related.TokenID)
	if o.R == nil {
		o.R = &syntheticDeviceR{
			VehicleToken: related,
		}
	} else {
		o.R.VehicleToken = related
	}

	if related.R == nil {
		related.R = &vehicleNFTR{
			VehicleTokenSyntheticDevice: o,
		}
	} else {
		related.R.VehicleTokenSyntheticDevice = o
	}

	return nil
}

// RemoveVehicleToken relationship.
// Sets o.R.VehicleToken to nil.
// Removes o from all passed in related items' relationships struct.
func (o *SyntheticDevice) RemoveVehicleToken(ctx context.Context, exec boil.ContextExecutor, related *VehicleNFT) error {
	var err error

	queries.SetScanner(&o.VehicleTokenID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("vehicle_token_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.VehicleToken = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.VehicleTokenSyntheticDevice = nil
	return nil
}

// SetBurnRequest of the syntheticDevice to the related item.
// Sets o.R.BurnRequest to related.
// Adds o to related.R.BurnRequestSyntheticDevice.
func (o *SyntheticDevice) SetBurnRequest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MetaTransactionRequest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"synthetic_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"burn_request_id"}),
		strmangle.WhereClause("\"", "\"", 2, syntheticDevicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MintRequestID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BurnRequestID, related.ID)
	if o.R == nil {
		o.R = &syntheticDeviceR{
			BurnRequest: related,
		}
	} else {
		o.R.BurnRequest = related
	}

	if related.R == nil {
		related.R = &metaTransactionRequestR{
			BurnRequestSyntheticDevice: o,
		}
	} else {
		related.R.BurnRequestSyntheticDevice = o
	}

	return nil
}

// RemoveBurnRequest relationship.
// Sets o.R.BurnRequest to nil.
// Removes o from all passed in related items' relationships struct.
func (o *SyntheticDevice) RemoveBurnRequest(ctx context.Context, exec boil.ContextExecutor, related *MetaTransactionRequest) error {
	var err error

	queries.SetScanner(&o.BurnRequestID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("burn_request_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BurnRequest = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.BurnRequestSyntheticDevice = nil
	return nil
}

// SyntheticDevices retrieves all the records using an executor.
func SyntheticDevices(mods ...qm.QueryMod) syntheticDeviceQuery {
	mods = append(mods, qm.From("\"devices_api\".\"synthetic_devices\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"devices_api\".\"synthetic_devices\".*"})
	}

	return syntheticDeviceQuery{q}
}

// FindSyntheticDevice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSyntheticDevice(ctx context.Context, exec boil.ContextExecutor, mintRequestID string, selectCols ...string) (*SyntheticDevice, error) {
	syntheticDeviceObj := &SyntheticDevice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"devices_api\".\"synthetic_devices\" where \"mint_request_id\"=$1", sel,
	)

	q := queries.Raw(query, mintRequestID)

	err := q.Bind(ctx, exec, syntheticDeviceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from synthetic_devices")
	}

	if err = syntheticDeviceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return syntheticDeviceObj, err
	}

	return syntheticDeviceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SyntheticDevice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no synthetic_devices provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syntheticDeviceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	syntheticDeviceInsertCacheMut.RLock()
	cache, cached := syntheticDeviceInsertCache[key]
	syntheticDeviceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			syntheticDeviceAllColumns,
			syntheticDeviceColumnsWithDefault,
			syntheticDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(syntheticDeviceType, syntheticDeviceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(syntheticDeviceType, syntheticDeviceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"devices_api\".\"synthetic_devices\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"devices_api\".\"synthetic_devices\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into synthetic_devices")
	}

	if !cached {
		syntheticDeviceInsertCacheMut.Lock()
		syntheticDeviceInsertCache[key] = cache
		syntheticDeviceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SyntheticDevice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SyntheticDevice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	syntheticDeviceUpdateCacheMut.RLock()
	cache, cached := syntheticDeviceUpdateCache[key]
	syntheticDeviceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			syntheticDeviceAllColumns,
			syntheticDevicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update synthetic_devices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"devices_api\".\"synthetic_devices\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, syntheticDevicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(syntheticDeviceType, syntheticDeviceMapping, append(wl, syntheticDevicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update synthetic_devices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for synthetic_devices")
	}

	if !cached {
		syntheticDeviceUpdateCacheMut.Lock()
		syntheticDeviceUpdateCache[key] = cache
		syntheticDeviceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q syntheticDeviceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for synthetic_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for synthetic_devices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SyntheticDeviceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syntheticDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"devices_api\".\"synthetic_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, syntheticDevicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in syntheticDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all syntheticDevice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SyntheticDevice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no synthetic_devices provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syntheticDeviceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	syntheticDeviceUpsertCacheMut.RLock()
	cache, cached := syntheticDeviceUpsertCache[key]
	syntheticDeviceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			syntheticDeviceAllColumns,
			syntheticDeviceColumnsWithDefault,
			syntheticDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			syntheticDeviceAllColumns,
			syntheticDevicePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert synthetic_devices, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(syntheticDevicePrimaryKeyColumns))
			copy(conflict, syntheticDevicePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"devices_api\".\"synthetic_devices\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(syntheticDeviceType, syntheticDeviceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(syntheticDeviceType, syntheticDeviceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert synthetic_devices")
	}

	if !cached {
		syntheticDeviceUpsertCacheMut.Lock()
		syntheticDeviceUpsertCache[key] = cache
		syntheticDeviceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SyntheticDevice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SyntheticDevice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SyntheticDevice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), syntheticDevicePrimaryKeyMapping)
	sql := "DELETE FROM \"devices_api\".\"synthetic_devices\" WHERE \"mint_request_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from synthetic_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for synthetic_devices")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q syntheticDeviceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no syntheticDeviceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from synthetic_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for synthetic_devices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SyntheticDeviceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(syntheticDeviceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syntheticDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"devices_api\".\"synthetic_devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syntheticDevicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from syntheticDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for synthetic_devices")
	}

	if len(syntheticDeviceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SyntheticDevice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSyntheticDevice(ctx, exec, o.MintRequestID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SyntheticDeviceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SyntheticDeviceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syntheticDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"devices_api\".\"synthetic_devices\".* FROM \"devices_api\".\"synthetic_devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syntheticDevicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SyntheticDeviceSlice")
	}

	*o = slice

	return nil
}

// SyntheticDeviceExists checks if the SyntheticDevice row exists.
func SyntheticDeviceExists(ctx context.Context, exec boil.ContextExecutor, mintRequestID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"devices_api\".\"synthetic_devices\" where \"mint_request_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, mintRequestID)
	}
	row := exec.QueryRowContext(ctx, sql, mintRequestID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if synthetic_devices exists")
	}

	return exists, nil
}

// Exists checks if the SyntheticDevice row exists.
func (o *SyntheticDevice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SyntheticDeviceExists(ctx, exec, o.MintRequestID)
}
