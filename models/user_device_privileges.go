// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// UserDevicePrivilege is an object representing the database table.
type UserDevicePrivilege struct {
	ID              string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserAddress     string            `boil:"user_address" json:"user_address" toml:"user_address" yaml:"user_address"`
	ContractAddress null.Bytes        `boil:"contract_address" json:"contract_address,omitempty" toml:"contract_address" yaml:"contract_address,omitempty"`
	TokenID         types.NullDecimal `boil:"token_id" json:"token_id,omitempty" toml:"token_id" yaml:"token_id,omitempty"`
	Privilege       int               `boil:"privilege" json:"privilege" toml:"privilege" yaml:"privilege"`
	Expiry          time.Time         `boil:"expiry" json:"expiry" toml:"expiry" yaml:"expiry"`
	CreatedAt       time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userDevicePrivilegeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userDevicePrivilegeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserDevicePrivilegeColumns = struct {
	ID              string
	UserAddress     string
	ContractAddress string
	TokenID         string
	Privilege       string
	Expiry          string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "id",
	UserAddress:     "user_address",
	ContractAddress: "contract_address",
	TokenID:         "token_id",
	Privilege:       "privilege",
	Expiry:          "expiry",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

var UserDevicePrivilegeTableColumns = struct {
	ID              string
	UserAddress     string
	ContractAddress string
	TokenID         string
	Privilege       string
	Expiry          string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "user_device_privileges.id",
	UserAddress:     "user_device_privileges.user_address",
	ContractAddress: "user_device_privileges.contract_address",
	TokenID:         "user_device_privileges.token_id",
	Privilege:       "user_device_privileges.privilege",
	Expiry:          "user_device_privileges.expiry",
	CreatedAt:       "user_device_privileges.created_at",
	UpdatedAt:       "user_device_privileges.updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var UserDevicePrivilegeWhere = struct {
	ID              whereHelperstring
	UserAddress     whereHelperstring
	ContractAddress whereHelpernull_Bytes
	TokenID         whereHelpertypes_NullDecimal
	Privilege       whereHelperint
	Expiry          whereHelpertime_Time
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
}{
	ID:              whereHelperstring{field: "\"devices_api\".\"user_device_privileges\".\"id\""},
	UserAddress:     whereHelperstring{field: "\"devices_api\".\"user_device_privileges\".\"user_address\""},
	ContractAddress: whereHelpernull_Bytes{field: "\"devices_api\".\"user_device_privileges\".\"contract_address\""},
	TokenID:         whereHelpertypes_NullDecimal{field: "\"devices_api\".\"user_device_privileges\".\"token_id\""},
	Privilege:       whereHelperint{field: "\"devices_api\".\"user_device_privileges\".\"privilege\""},
	Expiry:          whereHelpertime_Time{field: "\"devices_api\".\"user_device_privileges\".\"expiry\""},
	CreatedAt:       whereHelpertime_Time{field: "\"devices_api\".\"user_device_privileges\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"devices_api\".\"user_device_privileges\".\"updated_at\""},
}

// UserDevicePrivilegeRels is where relationship names are stored.
var UserDevicePrivilegeRels = struct {
}{}

// userDevicePrivilegeR is where relationships are stored.
type userDevicePrivilegeR struct {
}

// NewStruct creates a new relationship struct
func (*userDevicePrivilegeR) NewStruct() *userDevicePrivilegeR {
	return &userDevicePrivilegeR{}
}

// userDevicePrivilegeL is where Load methods for each relationship are stored.
type userDevicePrivilegeL struct{}

var (
	userDevicePrivilegeAllColumns            = []string{"id", "user_address", "contract_address", "token_id", "privilege", "expiry", "created_at", "updated_at"}
	userDevicePrivilegeColumnsWithoutDefault = []string{"id", "user_address", "privilege", "expiry"}
	userDevicePrivilegeColumnsWithDefault    = []string{"contract_address", "token_id", "created_at", "updated_at"}
	userDevicePrivilegePrimaryKeyColumns     = []string{"id"}
	userDevicePrivilegeGeneratedColumns      = []string{}
)

type (
	// UserDevicePrivilegeSlice is an alias for a slice of pointers to UserDevicePrivilege.
	// This should almost always be used instead of []UserDevicePrivilege.
	UserDevicePrivilegeSlice []*UserDevicePrivilege
	// UserDevicePrivilegeHook is the signature for custom UserDevicePrivilege hook methods
	UserDevicePrivilegeHook func(context.Context, boil.ContextExecutor, *UserDevicePrivilege) error

	userDevicePrivilegeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userDevicePrivilegeType                 = reflect.TypeOf(&UserDevicePrivilege{})
	userDevicePrivilegeMapping              = queries.MakeStructMapping(userDevicePrivilegeType)
	userDevicePrivilegePrimaryKeyMapping, _ = queries.BindMapping(userDevicePrivilegeType, userDevicePrivilegeMapping, userDevicePrivilegePrimaryKeyColumns)
	userDevicePrivilegeInsertCacheMut       sync.RWMutex
	userDevicePrivilegeInsertCache          = make(map[string]insertCache)
	userDevicePrivilegeUpdateCacheMut       sync.RWMutex
	userDevicePrivilegeUpdateCache          = make(map[string]updateCache)
	userDevicePrivilegeUpsertCacheMut       sync.RWMutex
	userDevicePrivilegeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userDevicePrivilegeAfterSelectHooks []UserDevicePrivilegeHook

var userDevicePrivilegeBeforeInsertHooks []UserDevicePrivilegeHook
var userDevicePrivilegeAfterInsertHooks []UserDevicePrivilegeHook

var userDevicePrivilegeBeforeUpdateHooks []UserDevicePrivilegeHook
var userDevicePrivilegeAfterUpdateHooks []UserDevicePrivilegeHook

var userDevicePrivilegeBeforeDeleteHooks []UserDevicePrivilegeHook
var userDevicePrivilegeAfterDeleteHooks []UserDevicePrivilegeHook

var userDevicePrivilegeBeforeUpsertHooks []UserDevicePrivilegeHook
var userDevicePrivilegeAfterUpsertHooks []UserDevicePrivilegeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserDevicePrivilege) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDevicePrivilegeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserDevicePrivilege) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDevicePrivilegeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserDevicePrivilege) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDevicePrivilegeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserDevicePrivilege) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDevicePrivilegeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserDevicePrivilege) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDevicePrivilegeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserDevicePrivilege) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDevicePrivilegeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserDevicePrivilege) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDevicePrivilegeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserDevicePrivilege) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDevicePrivilegeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserDevicePrivilege) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDevicePrivilegeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserDevicePrivilegeHook registers your hook function for all future operations.
func AddUserDevicePrivilegeHook(hookPoint boil.HookPoint, userDevicePrivilegeHook UserDevicePrivilegeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userDevicePrivilegeAfterSelectHooks = append(userDevicePrivilegeAfterSelectHooks, userDevicePrivilegeHook)
	case boil.BeforeInsertHook:
		userDevicePrivilegeBeforeInsertHooks = append(userDevicePrivilegeBeforeInsertHooks, userDevicePrivilegeHook)
	case boil.AfterInsertHook:
		userDevicePrivilegeAfterInsertHooks = append(userDevicePrivilegeAfterInsertHooks, userDevicePrivilegeHook)
	case boil.BeforeUpdateHook:
		userDevicePrivilegeBeforeUpdateHooks = append(userDevicePrivilegeBeforeUpdateHooks, userDevicePrivilegeHook)
	case boil.AfterUpdateHook:
		userDevicePrivilegeAfterUpdateHooks = append(userDevicePrivilegeAfterUpdateHooks, userDevicePrivilegeHook)
	case boil.BeforeDeleteHook:
		userDevicePrivilegeBeforeDeleteHooks = append(userDevicePrivilegeBeforeDeleteHooks, userDevicePrivilegeHook)
	case boil.AfterDeleteHook:
		userDevicePrivilegeAfterDeleteHooks = append(userDevicePrivilegeAfterDeleteHooks, userDevicePrivilegeHook)
	case boil.BeforeUpsertHook:
		userDevicePrivilegeBeforeUpsertHooks = append(userDevicePrivilegeBeforeUpsertHooks, userDevicePrivilegeHook)
	case boil.AfterUpsertHook:
		userDevicePrivilegeAfterUpsertHooks = append(userDevicePrivilegeAfterUpsertHooks, userDevicePrivilegeHook)
	}
}

// One returns a single userDevicePrivilege record from the query.
func (q userDevicePrivilegeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserDevicePrivilege, error) {
	o := &UserDevicePrivilege{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_device_privileges")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserDevicePrivilege records from the query.
func (q userDevicePrivilegeQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserDevicePrivilegeSlice, error) {
	var o []*UserDevicePrivilege

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserDevicePrivilege slice")
	}

	if len(userDevicePrivilegeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserDevicePrivilege records in the query.
func (q userDevicePrivilegeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_device_privileges rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userDevicePrivilegeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_device_privileges exists")
	}

	return count > 0, nil
}

// UserDevicePrivileges retrieves all the records using an executor.
func UserDevicePrivileges(mods ...qm.QueryMod) userDevicePrivilegeQuery {
	mods = append(mods, qm.From("\"devices_api\".\"user_device_privileges\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"devices_api\".\"user_device_privileges\".*"})
	}

	return userDevicePrivilegeQuery{q}
}

// FindUserDevicePrivilege retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserDevicePrivilege(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*UserDevicePrivilege, error) {
	userDevicePrivilegeObj := &UserDevicePrivilege{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"devices_api\".\"user_device_privileges\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userDevicePrivilegeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_device_privileges")
	}

	if err = userDevicePrivilegeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userDevicePrivilegeObj, err
	}

	return userDevicePrivilegeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserDevicePrivilege) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_device_privileges provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userDevicePrivilegeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userDevicePrivilegeInsertCacheMut.RLock()
	cache, cached := userDevicePrivilegeInsertCache[key]
	userDevicePrivilegeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userDevicePrivilegeAllColumns,
			userDevicePrivilegeColumnsWithDefault,
			userDevicePrivilegeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userDevicePrivilegeType, userDevicePrivilegeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userDevicePrivilegeType, userDevicePrivilegeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"devices_api\".\"user_device_privileges\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"devices_api\".\"user_device_privileges\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_device_privileges")
	}

	if !cached {
		userDevicePrivilegeInsertCacheMut.Lock()
		userDevicePrivilegeInsertCache[key] = cache
		userDevicePrivilegeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserDevicePrivilege.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserDevicePrivilege) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userDevicePrivilegeUpdateCacheMut.RLock()
	cache, cached := userDevicePrivilegeUpdateCache[key]
	userDevicePrivilegeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userDevicePrivilegeAllColumns,
			userDevicePrivilegePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_device_privileges, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"devices_api\".\"user_device_privileges\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userDevicePrivilegePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userDevicePrivilegeType, userDevicePrivilegeMapping, append(wl, userDevicePrivilegePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_device_privileges row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_device_privileges")
	}

	if !cached {
		userDevicePrivilegeUpdateCacheMut.Lock()
		userDevicePrivilegeUpdateCache[key] = cache
		userDevicePrivilegeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userDevicePrivilegeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_device_privileges")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_device_privileges")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserDevicePrivilegeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userDevicePrivilegePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"devices_api\".\"user_device_privileges\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userDevicePrivilegePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userDevicePrivilege slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userDevicePrivilege")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserDevicePrivilege) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_device_privileges provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userDevicePrivilegeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userDevicePrivilegeUpsertCacheMut.RLock()
	cache, cached := userDevicePrivilegeUpsertCache[key]
	userDevicePrivilegeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userDevicePrivilegeAllColumns,
			userDevicePrivilegeColumnsWithDefault,
			userDevicePrivilegeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userDevicePrivilegeAllColumns,
			userDevicePrivilegePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_device_privileges, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userDevicePrivilegePrimaryKeyColumns))
			copy(conflict, userDevicePrivilegePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"devices_api\".\"user_device_privileges\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userDevicePrivilegeType, userDevicePrivilegeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userDevicePrivilegeType, userDevicePrivilegeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_device_privileges")
	}

	if !cached {
		userDevicePrivilegeUpsertCacheMut.Lock()
		userDevicePrivilegeUpsertCache[key] = cache
		userDevicePrivilegeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserDevicePrivilege record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserDevicePrivilege) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserDevicePrivilege provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userDevicePrivilegePrimaryKeyMapping)
	sql := "DELETE FROM \"devices_api\".\"user_device_privileges\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_device_privileges")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_device_privileges")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userDevicePrivilegeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userDevicePrivilegeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_device_privileges")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_device_privileges")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserDevicePrivilegeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userDevicePrivilegeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userDevicePrivilegePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"devices_api\".\"user_device_privileges\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userDevicePrivilegePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userDevicePrivilege slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_device_privileges")
	}

	if len(userDevicePrivilegeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserDevicePrivilege) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserDevicePrivilege(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserDevicePrivilegeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserDevicePrivilegeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userDevicePrivilegePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"devices_api\".\"user_device_privileges\".* FROM \"devices_api\".\"user_device_privileges\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userDevicePrivilegePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserDevicePrivilegeSlice")
	}

	*o = slice

	return nil
}

// UserDevicePrivilegeExists checks if the UserDevicePrivilege row exists.
func UserDevicePrivilegeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"devices_api\".\"user_device_privileges\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_device_privileges exists")
	}

	return exists, nil
}
