// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ExternalVinDatum is an object representing the database table.
type ExternalVinDatum struct {
	ID                 string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeviceDefinitionID null.String `boil:"device_definition_id" json:"device_definition_id,omitempty" toml:"device_definition_id" yaml:"device_definition_id,omitempty"`
	Vin                string      `boil:"vin" json:"vin" toml:"vin" yaml:"vin"`
	UserDeviceID       null.String `boil:"user_device_id" json:"user_device_id,omitempty" toml:"user_device_id" yaml:"user_device_id,omitempty"`
	VinMetadata        null.JSON   `boil:"vin_metadata" json:"vin_metadata,omitempty" toml:"vin_metadata" yaml:"vin_metadata,omitempty"`
	OfferMetadata      null.JSON   `boil:"offer_metadata" json:"offer_metadata,omitempty" toml:"offer_metadata" yaml:"offer_metadata,omitempty"`
	AutocheckMetadata  null.JSON   `boil:"autocheck_metadata" json:"autocheck_metadata,omitempty" toml:"autocheck_metadata" yaml:"autocheck_metadata,omitempty"`
	BuildMetadata      null.JSON   `boil:"build_metadata" json:"build_metadata,omitempty" toml:"build_metadata" yaml:"build_metadata,omitempty"`
	CargurusMetadata   null.JSON   `boil:"cargurus_metadata" json:"cargurus_metadata,omitempty" toml:"cargurus_metadata" yaml:"cargurus_metadata,omitempty"`
	CarvanaMetadata    null.JSON   `boil:"carvana_metadata" json:"carvana_metadata,omitempty" toml:"carvana_metadata" yaml:"carvana_metadata,omitempty"`
	CarmaxMetadata     null.JSON   `boil:"carmax_metadata" json:"carmax_metadata,omitempty" toml:"carmax_metadata" yaml:"carmax_metadata,omitempty"`
	CarstoryMetadata   null.JSON   `boil:"carstory_metadata" json:"carstory_metadata,omitempty" toml:"carstory_metadata" yaml:"carstory_metadata,omitempty"`
	EdmundsMetadata    null.JSON   `boil:"edmunds_metadata" json:"edmunds_metadata,omitempty" toml:"edmunds_metadata" yaml:"edmunds_metadata,omitempty"`
	TMVMetadata        null.JSON   `boil:"tmv_metadata" json:"tmv_metadata,omitempty" toml:"tmv_metadata" yaml:"tmv_metadata,omitempty"`
	KBBMetadata        null.JSON   `boil:"kbb_metadata" json:"kbb_metadata,omitempty" toml:"kbb_metadata" yaml:"kbb_metadata,omitempty"`
	VroomMetadata      null.JSON   `boil:"vroom_metadata" json:"vroom_metadata,omitempty" toml:"vroom_metadata" yaml:"vroom_metadata,omitempty"`
	CreatedAt          time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	PricingMetadata    null.JSON   `boil:"pricing_metadata" json:"pricing_metadata,omitempty" toml:"pricing_metadata" yaml:"pricing_metadata,omitempty"`
	BlackbookMetadata  null.JSON   `boil:"blackbook_metadata" json:"blackbook_metadata,omitempty" toml:"blackbook_metadata" yaml:"blackbook_metadata,omitempty"`
	RequestMetadata    null.JSON   `boil:"request_metadata" json:"request_metadata,omitempty" toml:"request_metadata" yaml:"request_metadata,omitempty"`

	R *externalVinDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L externalVinDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExternalVinDatumColumns = struct {
	ID                 string
	DeviceDefinitionID string
	Vin                string
	UserDeviceID       string
	VinMetadata        string
	OfferMetadata      string
	AutocheckMetadata  string
	BuildMetadata      string
	CargurusMetadata   string
	CarvanaMetadata    string
	CarmaxMetadata     string
	CarstoryMetadata   string
	EdmundsMetadata    string
	TMVMetadata        string
	KBBMetadata        string
	VroomMetadata      string
	CreatedAt          string
	UpdatedAt          string
	PricingMetadata    string
	BlackbookMetadata  string
	RequestMetadata    string
}{
	ID:                 "id",
	DeviceDefinitionID: "device_definition_id",
	Vin:                "vin",
	UserDeviceID:       "user_device_id",
	VinMetadata:        "vin_metadata",
	OfferMetadata:      "offer_metadata",
	AutocheckMetadata:  "autocheck_metadata",
	BuildMetadata:      "build_metadata",
	CargurusMetadata:   "cargurus_metadata",
	CarvanaMetadata:    "carvana_metadata",
	CarmaxMetadata:     "carmax_metadata",
	CarstoryMetadata:   "carstory_metadata",
	EdmundsMetadata:    "edmunds_metadata",
	TMVMetadata:        "tmv_metadata",
	KBBMetadata:        "kbb_metadata",
	VroomMetadata:      "vroom_metadata",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	PricingMetadata:    "pricing_metadata",
	BlackbookMetadata:  "blackbook_metadata",
	RequestMetadata:    "request_metadata",
}

var ExternalVinDatumTableColumns = struct {
	ID                 string
	DeviceDefinitionID string
	Vin                string
	UserDeviceID       string
	VinMetadata        string
	OfferMetadata      string
	AutocheckMetadata  string
	BuildMetadata      string
	CargurusMetadata   string
	CarvanaMetadata    string
	CarmaxMetadata     string
	CarstoryMetadata   string
	EdmundsMetadata    string
	TMVMetadata        string
	KBBMetadata        string
	VroomMetadata      string
	CreatedAt          string
	UpdatedAt          string
	PricingMetadata    string
	BlackbookMetadata  string
	RequestMetadata    string
}{
	ID:                 "external_vin_data.id",
	DeviceDefinitionID: "external_vin_data.device_definition_id",
	Vin:                "external_vin_data.vin",
	UserDeviceID:       "external_vin_data.user_device_id",
	VinMetadata:        "external_vin_data.vin_metadata",
	OfferMetadata:      "external_vin_data.offer_metadata",
	AutocheckMetadata:  "external_vin_data.autocheck_metadata",
	BuildMetadata:      "external_vin_data.build_metadata",
	CargurusMetadata:   "external_vin_data.cargurus_metadata",
	CarvanaMetadata:    "external_vin_data.carvana_metadata",
	CarmaxMetadata:     "external_vin_data.carmax_metadata",
	CarstoryMetadata:   "external_vin_data.carstory_metadata",
	EdmundsMetadata:    "external_vin_data.edmunds_metadata",
	TMVMetadata:        "external_vin_data.tmv_metadata",
	KBBMetadata:        "external_vin_data.kbb_metadata",
	VroomMetadata:      "external_vin_data.vroom_metadata",
	CreatedAt:          "external_vin_data.created_at",
	UpdatedAt:          "external_vin_data.updated_at",
	PricingMetadata:    "external_vin_data.pricing_metadata",
	BlackbookMetadata:  "external_vin_data.blackbook_metadata",
	RequestMetadata:    "external_vin_data.request_metadata",
}

// Generated where

var ExternalVinDatumWhere = struct {
	ID                 whereHelperstring
	DeviceDefinitionID whereHelpernull_String
	Vin                whereHelperstring
	UserDeviceID       whereHelpernull_String
	VinMetadata        whereHelpernull_JSON
	OfferMetadata      whereHelpernull_JSON
	AutocheckMetadata  whereHelpernull_JSON
	BuildMetadata      whereHelpernull_JSON
	CargurusMetadata   whereHelpernull_JSON
	CarvanaMetadata    whereHelpernull_JSON
	CarmaxMetadata     whereHelpernull_JSON
	CarstoryMetadata   whereHelpernull_JSON
	EdmundsMetadata    whereHelpernull_JSON
	TMVMetadata        whereHelpernull_JSON
	KBBMetadata        whereHelpernull_JSON
	VroomMetadata      whereHelpernull_JSON
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	PricingMetadata    whereHelpernull_JSON
	BlackbookMetadata  whereHelpernull_JSON
	RequestMetadata    whereHelpernull_JSON
}{
	ID:                 whereHelperstring{field: "\"devices_api\".\"external_vin_data\".\"id\""},
	DeviceDefinitionID: whereHelpernull_String{field: "\"devices_api\".\"external_vin_data\".\"device_definition_id\""},
	Vin:                whereHelperstring{field: "\"devices_api\".\"external_vin_data\".\"vin\""},
	UserDeviceID:       whereHelpernull_String{field: "\"devices_api\".\"external_vin_data\".\"user_device_id\""},
	VinMetadata:        whereHelpernull_JSON{field: "\"devices_api\".\"external_vin_data\".\"vin_metadata\""},
	OfferMetadata:      whereHelpernull_JSON{field: "\"devices_api\".\"external_vin_data\".\"offer_metadata\""},
	AutocheckMetadata:  whereHelpernull_JSON{field: "\"devices_api\".\"external_vin_data\".\"autocheck_metadata\""},
	BuildMetadata:      whereHelpernull_JSON{field: "\"devices_api\".\"external_vin_data\".\"build_metadata\""},
	CargurusMetadata:   whereHelpernull_JSON{field: "\"devices_api\".\"external_vin_data\".\"cargurus_metadata\""},
	CarvanaMetadata:    whereHelpernull_JSON{field: "\"devices_api\".\"external_vin_data\".\"carvana_metadata\""},
	CarmaxMetadata:     whereHelpernull_JSON{field: "\"devices_api\".\"external_vin_data\".\"carmax_metadata\""},
	CarstoryMetadata:   whereHelpernull_JSON{field: "\"devices_api\".\"external_vin_data\".\"carstory_metadata\""},
	EdmundsMetadata:    whereHelpernull_JSON{field: "\"devices_api\".\"external_vin_data\".\"edmunds_metadata\""},
	TMVMetadata:        whereHelpernull_JSON{field: "\"devices_api\".\"external_vin_data\".\"tmv_metadata\""},
	KBBMetadata:        whereHelpernull_JSON{field: "\"devices_api\".\"external_vin_data\".\"kbb_metadata\""},
	VroomMetadata:      whereHelpernull_JSON{field: "\"devices_api\".\"external_vin_data\".\"vroom_metadata\""},
	CreatedAt:          whereHelpertime_Time{field: "\"devices_api\".\"external_vin_data\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"devices_api\".\"external_vin_data\".\"updated_at\""},
	PricingMetadata:    whereHelpernull_JSON{field: "\"devices_api\".\"external_vin_data\".\"pricing_metadata\""},
	BlackbookMetadata:  whereHelpernull_JSON{field: "\"devices_api\".\"external_vin_data\".\"blackbook_metadata\""},
	RequestMetadata:    whereHelpernull_JSON{field: "\"devices_api\".\"external_vin_data\".\"request_metadata\""},
}

// ExternalVinDatumRels is where relationship names are stored.
var ExternalVinDatumRels = struct {
	UserDevice string
}{
	UserDevice: "UserDevice",
}

// externalVinDatumR is where relationships are stored.
type externalVinDatumR struct {
	UserDevice *UserDevice `boil:"UserDevice" json:"UserDevice" toml:"UserDevice" yaml:"UserDevice"`
}

// NewStruct creates a new relationship struct
func (*externalVinDatumR) NewStruct() *externalVinDatumR {
	return &externalVinDatumR{}
}

func (r *externalVinDatumR) GetUserDevice() *UserDevice {
	if r == nil {
		return nil
	}
	return r.UserDevice
}

// externalVinDatumL is where Load methods for each relationship are stored.
type externalVinDatumL struct{}

var (
	externalVinDatumAllColumns            = []string{"id", "device_definition_id", "vin", "user_device_id", "vin_metadata", "offer_metadata", "autocheck_metadata", "build_metadata", "cargurus_metadata", "carvana_metadata", "carmax_metadata", "carstory_metadata", "edmunds_metadata", "tmv_metadata", "kbb_metadata", "vroom_metadata", "created_at", "updated_at", "pricing_metadata", "blackbook_metadata", "request_metadata"}
	externalVinDatumColumnsWithoutDefault = []string{"id", "vin"}
	externalVinDatumColumnsWithDefault    = []string{"device_definition_id", "user_device_id", "vin_metadata", "offer_metadata", "autocheck_metadata", "build_metadata", "cargurus_metadata", "carvana_metadata", "carmax_metadata", "carstory_metadata", "edmunds_metadata", "tmv_metadata", "kbb_metadata", "vroom_metadata", "created_at", "updated_at", "pricing_metadata", "blackbook_metadata", "request_metadata"}
	externalVinDatumPrimaryKeyColumns     = []string{"id"}
	externalVinDatumGeneratedColumns      = []string{}
)

type (
	// ExternalVinDatumSlice is an alias for a slice of pointers to ExternalVinDatum.
	// This should almost always be used instead of []ExternalVinDatum.
	ExternalVinDatumSlice []*ExternalVinDatum
	// ExternalVinDatumHook is the signature for custom ExternalVinDatum hook methods
	ExternalVinDatumHook func(context.Context, boil.ContextExecutor, *ExternalVinDatum) error

	externalVinDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	externalVinDatumType                 = reflect.TypeOf(&ExternalVinDatum{})
	externalVinDatumMapping              = queries.MakeStructMapping(externalVinDatumType)
	externalVinDatumPrimaryKeyMapping, _ = queries.BindMapping(externalVinDatumType, externalVinDatumMapping, externalVinDatumPrimaryKeyColumns)
	externalVinDatumInsertCacheMut       sync.RWMutex
	externalVinDatumInsertCache          = make(map[string]insertCache)
	externalVinDatumUpdateCacheMut       sync.RWMutex
	externalVinDatumUpdateCache          = make(map[string]updateCache)
	externalVinDatumUpsertCacheMut       sync.RWMutex
	externalVinDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var externalVinDatumAfterSelectHooks []ExternalVinDatumHook

var externalVinDatumBeforeInsertHooks []ExternalVinDatumHook
var externalVinDatumAfterInsertHooks []ExternalVinDatumHook

var externalVinDatumBeforeUpdateHooks []ExternalVinDatumHook
var externalVinDatumAfterUpdateHooks []ExternalVinDatumHook

var externalVinDatumBeforeDeleteHooks []ExternalVinDatumHook
var externalVinDatumAfterDeleteHooks []ExternalVinDatumHook

var externalVinDatumBeforeUpsertHooks []ExternalVinDatumHook
var externalVinDatumAfterUpsertHooks []ExternalVinDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ExternalVinDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range externalVinDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ExternalVinDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range externalVinDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ExternalVinDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range externalVinDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ExternalVinDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range externalVinDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ExternalVinDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range externalVinDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ExternalVinDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range externalVinDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ExternalVinDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range externalVinDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ExternalVinDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range externalVinDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ExternalVinDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range externalVinDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExternalVinDatumHook registers your hook function for all future operations.
func AddExternalVinDatumHook(hookPoint boil.HookPoint, externalVinDatumHook ExternalVinDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		externalVinDatumAfterSelectHooks = append(externalVinDatumAfterSelectHooks, externalVinDatumHook)
	case boil.BeforeInsertHook:
		externalVinDatumBeforeInsertHooks = append(externalVinDatumBeforeInsertHooks, externalVinDatumHook)
	case boil.AfterInsertHook:
		externalVinDatumAfterInsertHooks = append(externalVinDatumAfterInsertHooks, externalVinDatumHook)
	case boil.BeforeUpdateHook:
		externalVinDatumBeforeUpdateHooks = append(externalVinDatumBeforeUpdateHooks, externalVinDatumHook)
	case boil.AfterUpdateHook:
		externalVinDatumAfterUpdateHooks = append(externalVinDatumAfterUpdateHooks, externalVinDatumHook)
	case boil.BeforeDeleteHook:
		externalVinDatumBeforeDeleteHooks = append(externalVinDatumBeforeDeleteHooks, externalVinDatumHook)
	case boil.AfterDeleteHook:
		externalVinDatumAfterDeleteHooks = append(externalVinDatumAfterDeleteHooks, externalVinDatumHook)
	case boil.BeforeUpsertHook:
		externalVinDatumBeforeUpsertHooks = append(externalVinDatumBeforeUpsertHooks, externalVinDatumHook)
	case boil.AfterUpsertHook:
		externalVinDatumAfterUpsertHooks = append(externalVinDatumAfterUpsertHooks, externalVinDatumHook)
	}
}

// One returns a single externalVinDatum record from the query.
func (q externalVinDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ExternalVinDatum, error) {
	o := &ExternalVinDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for external_vin_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ExternalVinDatum records from the query.
func (q externalVinDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExternalVinDatumSlice, error) {
	var o []*ExternalVinDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExternalVinDatum slice")
	}

	if len(externalVinDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ExternalVinDatum records in the query.
func (q externalVinDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count external_vin_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q externalVinDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if external_vin_data exists")
	}

	return count > 0, nil
}

// UserDevice pointed to by the foreign key.
func (o *ExternalVinDatum) UserDevice(mods ...qm.QueryMod) userDeviceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserDeviceID),
	}

	queryMods = append(queryMods, mods...)

	return UserDevices(queryMods...)
}

// LoadUserDevice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (externalVinDatumL) LoadUserDevice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExternalVinDatum interface{}, mods queries.Applicator) error {
	var slice []*ExternalVinDatum
	var object *ExternalVinDatum

	if singular {
		var ok bool
		object, ok = maybeExternalVinDatum.(*ExternalVinDatum)
		if !ok {
			object = new(ExternalVinDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeExternalVinDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeExternalVinDatum))
			}
		}
	} else {
		s, ok := maybeExternalVinDatum.(*[]*ExternalVinDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeExternalVinDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeExternalVinDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &externalVinDatumR{}
		}
		if !queries.IsNil(object.UserDeviceID) {
			args = append(args, object.UserDeviceID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &externalVinDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserDeviceID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserDeviceID) {
				args = append(args, obj.UserDeviceID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.user_devices`),
		qm.WhereIn(`devices_api.user_devices.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserDevice")
	}

	var resultSlice []*UserDevice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserDevice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_devices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_devices")
	}

	if len(userDeviceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserDevice = foreign
		if foreign.R == nil {
			foreign.R = &userDeviceR{}
		}
		foreign.R.ExternalVinData = append(foreign.R.ExternalVinData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserDeviceID, foreign.ID) {
				local.R.UserDevice = foreign
				if foreign.R == nil {
					foreign.R = &userDeviceR{}
				}
				foreign.R.ExternalVinData = append(foreign.R.ExternalVinData, local)
				break
			}
		}
	}

	return nil
}

// SetUserDevice of the externalVinDatum to the related item.
// Sets o.R.UserDevice to related.
// Adds o to related.R.ExternalVinData.
func (o *ExternalVinDatum) SetUserDevice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserDevice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"external_vin_data\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_device_id"}),
		strmangle.WhereClause("\"", "\"", 2, externalVinDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserDeviceID, related.ID)
	if o.R == nil {
		o.R = &externalVinDatumR{
			UserDevice: related,
		}
	} else {
		o.R.UserDevice = related
	}

	if related.R == nil {
		related.R = &userDeviceR{
			ExternalVinData: ExternalVinDatumSlice{o},
		}
	} else {
		related.R.ExternalVinData = append(related.R.ExternalVinData, o)
	}

	return nil
}

// RemoveUserDevice relationship.
// Sets o.R.UserDevice to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ExternalVinDatum) RemoveUserDevice(ctx context.Context, exec boil.ContextExecutor, related *UserDevice) error {
	var err error

	queries.SetScanner(&o.UserDeviceID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_device_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UserDevice = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ExternalVinData {
		if queries.Equal(o.UserDeviceID, ri.UserDeviceID) {
			continue
		}

		ln := len(related.R.ExternalVinData)
		if ln > 1 && i < ln-1 {
			related.R.ExternalVinData[i] = related.R.ExternalVinData[ln-1]
		}
		related.R.ExternalVinData = related.R.ExternalVinData[:ln-1]
		break
	}
	return nil
}

// ExternalVinData retrieves all the records using an executor.
func ExternalVinData(mods ...qm.QueryMod) externalVinDatumQuery {
	mods = append(mods, qm.From("\"devices_api\".\"external_vin_data\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"devices_api\".\"external_vin_data\".*"})
	}

	return externalVinDatumQuery{q}
}

// FindExternalVinDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExternalVinDatum(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ExternalVinDatum, error) {
	externalVinDatumObj := &ExternalVinDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"devices_api\".\"external_vin_data\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, externalVinDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from external_vin_data")
	}

	if err = externalVinDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return externalVinDatumObj, err
	}

	return externalVinDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ExternalVinDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no external_vin_data provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(externalVinDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	externalVinDatumInsertCacheMut.RLock()
	cache, cached := externalVinDatumInsertCache[key]
	externalVinDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			externalVinDatumAllColumns,
			externalVinDatumColumnsWithDefault,
			externalVinDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(externalVinDatumType, externalVinDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(externalVinDatumType, externalVinDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"devices_api\".\"external_vin_data\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"devices_api\".\"external_vin_data\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into external_vin_data")
	}

	if !cached {
		externalVinDatumInsertCacheMut.Lock()
		externalVinDatumInsertCache[key] = cache
		externalVinDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ExternalVinDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ExternalVinDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	externalVinDatumUpdateCacheMut.RLock()
	cache, cached := externalVinDatumUpdateCache[key]
	externalVinDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			externalVinDatumAllColumns,
			externalVinDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update external_vin_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"devices_api\".\"external_vin_data\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, externalVinDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(externalVinDatumType, externalVinDatumMapping, append(wl, externalVinDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update external_vin_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for external_vin_data")
	}

	if !cached {
		externalVinDatumUpdateCacheMut.Lock()
		externalVinDatumUpdateCache[key] = cache
		externalVinDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q externalVinDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for external_vin_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for external_vin_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExternalVinDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), externalVinDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"devices_api\".\"external_vin_data\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, externalVinDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in externalVinDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all externalVinDatum")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ExternalVinDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no external_vin_data provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(externalVinDatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	externalVinDatumUpsertCacheMut.RLock()
	cache, cached := externalVinDatumUpsertCache[key]
	externalVinDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			externalVinDatumAllColumns,
			externalVinDatumColumnsWithDefault,
			externalVinDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			externalVinDatumAllColumns,
			externalVinDatumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert external_vin_data, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(externalVinDatumPrimaryKeyColumns))
			copy(conflict, externalVinDatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"devices_api\".\"external_vin_data\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(externalVinDatumType, externalVinDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(externalVinDatumType, externalVinDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert external_vin_data")
	}

	if !cached {
		externalVinDatumUpsertCacheMut.Lock()
		externalVinDatumUpsertCache[key] = cache
		externalVinDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ExternalVinDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExternalVinDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExternalVinDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), externalVinDatumPrimaryKeyMapping)
	sql := "DELETE FROM \"devices_api\".\"external_vin_data\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from external_vin_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for external_vin_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q externalVinDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no externalVinDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from external_vin_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for external_vin_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExternalVinDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(externalVinDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), externalVinDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"devices_api\".\"external_vin_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, externalVinDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from externalVinDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for external_vin_data")
	}

	if len(externalVinDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExternalVinDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExternalVinDatum(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExternalVinDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExternalVinDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), externalVinDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"devices_api\".\"external_vin_data\".* FROM \"devices_api\".\"external_vin_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, externalVinDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExternalVinDatumSlice")
	}

	*o = slice

	return nil
}

// ExternalVinDatumExists checks if the ExternalVinDatum row exists.
func ExternalVinDatumExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"devices_api\".\"external_vin_data\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if external_vin_data exists")
	}

	return exists, nil
}

// Exists checks if the ExternalVinDatum row exists.
func (o *ExternalVinDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ExternalVinDatumExists(ctx, exec, o.ID)
}
