// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MetaTransactionRequest is an object representing the database table.
type MetaTransactionRequest struct {
	ID        string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Status    string     `boil:"status" json:"status" toml:"status" yaml:"status"`
	Hash      null.Bytes `boil:"hash" json:"hash,omitempty" toml:"hash" yaml:"hash,omitempty"`
	CreatedAt time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *metaTransactionRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L metaTransactionRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MetaTransactionRequestColumns = struct {
	ID        string
	Status    string
	Hash      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Status:    "status",
	Hash:      "hash",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var MetaTransactionRequestTableColumns = struct {
	ID        string
	Status    string
	Hash      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "meta_transaction_requests.id",
	Status:    "meta_transaction_requests.status",
	Hash:      "meta_transaction_requests.hash",
	CreatedAt: "meta_transaction_requests.created_at",
	UpdatedAt: "meta_transaction_requests.updated_at",
}

// Generated where

var MetaTransactionRequestWhere = struct {
	ID        whereHelperstring
	Status    whereHelperstring
	Hash      whereHelpernull_Bytes
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"devices_api\".\"meta_transaction_requests\".\"id\""},
	Status:    whereHelperstring{field: "\"devices_api\".\"meta_transaction_requests\".\"status\""},
	Hash:      whereHelpernull_Bytes{field: "\"devices_api\".\"meta_transaction_requests\".\"hash\""},
	CreatedAt: whereHelpertime_Time{field: "\"devices_api\".\"meta_transaction_requests\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"devices_api\".\"meta_transaction_requests\".\"updated_at\""},
}

// MetaTransactionRequestRels is where relationship names are stored.
var MetaTransactionRequestRels = struct {
	ClaimMetaTransactionRequestAutopiUnit string
	PairRequestAutopiUnit                 string
	UnpairRequestAutopiUnit               string
	MintRequestVehicleNFT                 string
}{
	ClaimMetaTransactionRequestAutopiUnit: "ClaimMetaTransactionRequestAutopiUnit",
	PairRequestAutopiUnit:                 "PairRequestAutopiUnit",
	UnpairRequestAutopiUnit:               "UnpairRequestAutopiUnit",
	MintRequestVehicleNFT:                 "MintRequestVehicleNFT",
}

// metaTransactionRequestR is where relationships are stored.
type metaTransactionRequestR struct {
	ClaimMetaTransactionRequestAutopiUnit *AutopiUnit `boil:"ClaimMetaTransactionRequestAutopiUnit" json:"ClaimMetaTransactionRequestAutopiUnit" toml:"ClaimMetaTransactionRequestAutopiUnit" yaml:"ClaimMetaTransactionRequestAutopiUnit"`
	PairRequestAutopiUnit                 *AutopiUnit `boil:"PairRequestAutopiUnit" json:"PairRequestAutopiUnit" toml:"PairRequestAutopiUnit" yaml:"PairRequestAutopiUnit"`
	UnpairRequestAutopiUnit               *AutopiUnit `boil:"UnpairRequestAutopiUnit" json:"UnpairRequestAutopiUnit" toml:"UnpairRequestAutopiUnit" yaml:"UnpairRequestAutopiUnit"`
	MintRequestVehicleNFT                 *VehicleNFT `boil:"MintRequestVehicleNFT" json:"MintRequestVehicleNFT" toml:"MintRequestVehicleNFT" yaml:"MintRequestVehicleNFT"`
}

// NewStruct creates a new relationship struct
func (*metaTransactionRequestR) NewStruct() *metaTransactionRequestR {
	return &metaTransactionRequestR{}
}

func (r *metaTransactionRequestR) GetClaimMetaTransactionRequestAutopiUnit() *AutopiUnit {
	if r == nil {
		return nil
	}
	return r.ClaimMetaTransactionRequestAutopiUnit
}

func (r *metaTransactionRequestR) GetPairRequestAutopiUnit() *AutopiUnit {
	if r == nil {
		return nil
	}
	return r.PairRequestAutopiUnit
}

func (r *metaTransactionRequestR) GetUnpairRequestAutopiUnit() *AutopiUnit {
	if r == nil {
		return nil
	}
	return r.UnpairRequestAutopiUnit
}

func (r *metaTransactionRequestR) GetMintRequestVehicleNFT() *VehicleNFT {
	if r == nil {
		return nil
	}
	return r.MintRequestVehicleNFT
}

// metaTransactionRequestL is where Load methods for each relationship are stored.
type metaTransactionRequestL struct{}

var (
	metaTransactionRequestAllColumns            = []string{"id", "status", "hash", "created_at", "updated_at"}
	metaTransactionRequestColumnsWithoutDefault = []string{"id"}
	metaTransactionRequestColumnsWithDefault    = []string{"status", "hash", "created_at", "updated_at"}
	metaTransactionRequestPrimaryKeyColumns     = []string{"id"}
	metaTransactionRequestGeneratedColumns      = []string{}
)

type (
	// MetaTransactionRequestSlice is an alias for a slice of pointers to MetaTransactionRequest.
	// This should almost always be used instead of []MetaTransactionRequest.
	MetaTransactionRequestSlice []*MetaTransactionRequest
	// MetaTransactionRequestHook is the signature for custom MetaTransactionRequest hook methods
	MetaTransactionRequestHook func(context.Context, boil.ContextExecutor, *MetaTransactionRequest) error

	metaTransactionRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	metaTransactionRequestType                 = reflect.TypeOf(&MetaTransactionRequest{})
	metaTransactionRequestMapping              = queries.MakeStructMapping(metaTransactionRequestType)
	metaTransactionRequestPrimaryKeyMapping, _ = queries.BindMapping(metaTransactionRequestType, metaTransactionRequestMapping, metaTransactionRequestPrimaryKeyColumns)
	metaTransactionRequestInsertCacheMut       sync.RWMutex
	metaTransactionRequestInsertCache          = make(map[string]insertCache)
	metaTransactionRequestUpdateCacheMut       sync.RWMutex
	metaTransactionRequestUpdateCache          = make(map[string]updateCache)
	metaTransactionRequestUpsertCacheMut       sync.RWMutex
	metaTransactionRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var metaTransactionRequestAfterSelectHooks []MetaTransactionRequestHook

var metaTransactionRequestBeforeInsertHooks []MetaTransactionRequestHook
var metaTransactionRequestAfterInsertHooks []MetaTransactionRequestHook

var metaTransactionRequestBeforeUpdateHooks []MetaTransactionRequestHook
var metaTransactionRequestAfterUpdateHooks []MetaTransactionRequestHook

var metaTransactionRequestBeforeDeleteHooks []MetaTransactionRequestHook
var metaTransactionRequestAfterDeleteHooks []MetaTransactionRequestHook

var metaTransactionRequestBeforeUpsertHooks []MetaTransactionRequestHook
var metaTransactionRequestAfterUpsertHooks []MetaTransactionRequestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MetaTransactionRequest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MetaTransactionRequest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MetaTransactionRequest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MetaTransactionRequest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MetaTransactionRequest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MetaTransactionRequest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MetaTransactionRequest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MetaTransactionRequest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MetaTransactionRequest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMetaTransactionRequestHook registers your hook function for all future operations.
func AddMetaTransactionRequestHook(hookPoint boil.HookPoint, metaTransactionRequestHook MetaTransactionRequestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		metaTransactionRequestAfterSelectHooks = append(metaTransactionRequestAfterSelectHooks, metaTransactionRequestHook)
	case boil.BeforeInsertHook:
		metaTransactionRequestBeforeInsertHooks = append(metaTransactionRequestBeforeInsertHooks, metaTransactionRequestHook)
	case boil.AfterInsertHook:
		metaTransactionRequestAfterInsertHooks = append(metaTransactionRequestAfterInsertHooks, metaTransactionRequestHook)
	case boil.BeforeUpdateHook:
		metaTransactionRequestBeforeUpdateHooks = append(metaTransactionRequestBeforeUpdateHooks, metaTransactionRequestHook)
	case boil.AfterUpdateHook:
		metaTransactionRequestAfterUpdateHooks = append(metaTransactionRequestAfterUpdateHooks, metaTransactionRequestHook)
	case boil.BeforeDeleteHook:
		metaTransactionRequestBeforeDeleteHooks = append(metaTransactionRequestBeforeDeleteHooks, metaTransactionRequestHook)
	case boil.AfterDeleteHook:
		metaTransactionRequestAfterDeleteHooks = append(metaTransactionRequestAfterDeleteHooks, metaTransactionRequestHook)
	case boil.BeforeUpsertHook:
		metaTransactionRequestBeforeUpsertHooks = append(metaTransactionRequestBeforeUpsertHooks, metaTransactionRequestHook)
	case boil.AfterUpsertHook:
		metaTransactionRequestAfterUpsertHooks = append(metaTransactionRequestAfterUpsertHooks, metaTransactionRequestHook)
	}
}

// One returns a single metaTransactionRequest record from the query.
func (q metaTransactionRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MetaTransactionRequest, error) {
	o := &MetaTransactionRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for meta_transaction_requests")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MetaTransactionRequest records from the query.
func (q metaTransactionRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (MetaTransactionRequestSlice, error) {
	var o []*MetaTransactionRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MetaTransactionRequest slice")
	}

	if len(metaTransactionRequestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MetaTransactionRequest records in the query.
func (q metaTransactionRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count meta_transaction_requests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q metaTransactionRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if meta_transaction_requests exists")
	}

	return count > 0, nil
}

// ClaimMetaTransactionRequestAutopiUnit pointed to by the foreign key.
func (o *MetaTransactionRequest) ClaimMetaTransactionRequestAutopiUnit(mods ...qm.QueryMod) autopiUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"claim_meta_transaction_request_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return AutopiUnits(queryMods...)
}

// PairRequestAutopiUnit pointed to by the foreign key.
func (o *MetaTransactionRequest) PairRequestAutopiUnit(mods ...qm.QueryMod) autopiUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"pair_request_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return AutopiUnits(queryMods...)
}

// UnpairRequestAutopiUnit pointed to by the foreign key.
func (o *MetaTransactionRequest) UnpairRequestAutopiUnit(mods ...qm.QueryMod) autopiUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"unpair_request_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return AutopiUnits(queryMods...)
}

// MintRequestVehicleNFT pointed to by the foreign key.
func (o *MetaTransactionRequest) MintRequestVehicleNFT(mods ...qm.QueryMod) vehicleNFTQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"mint_request_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return VehicleNFTS(queryMods...)
}

// LoadClaimMetaTransactionRequestAutopiUnit allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (metaTransactionRequestL) LoadClaimMetaTransactionRequestAutopiUnit(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMetaTransactionRequest interface{}, mods queries.Applicator) error {
	var slice []*MetaTransactionRequest
	var object *MetaTransactionRequest

	if singular {
		var ok bool
		object, ok = maybeMetaTransactionRequest.(*MetaTransactionRequest)
		if !ok {
			object = new(MetaTransactionRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMetaTransactionRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMetaTransactionRequest))
			}
		}
	} else {
		s, ok := maybeMetaTransactionRequest.(*[]*MetaTransactionRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMetaTransactionRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMetaTransactionRequest))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &metaTransactionRequestR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &metaTransactionRequestR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.autopi_units`),
		qm.WhereIn(`devices_api.autopi_units.claim_meta_transaction_request_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AutopiUnit")
	}

	var resultSlice []*AutopiUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AutopiUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for autopi_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for autopi_units")
	}

	if len(metaTransactionRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ClaimMetaTransactionRequestAutopiUnit = foreign
		if foreign.R == nil {
			foreign.R = &autopiUnitR{}
		}
		foreign.R.ClaimMetaTransactionRequest = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.ClaimMetaTransactionRequestID) {
				local.R.ClaimMetaTransactionRequestAutopiUnit = foreign
				if foreign.R == nil {
					foreign.R = &autopiUnitR{}
				}
				foreign.R.ClaimMetaTransactionRequest = local
				break
			}
		}
	}

	return nil
}

// LoadPairRequestAutopiUnit allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (metaTransactionRequestL) LoadPairRequestAutopiUnit(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMetaTransactionRequest interface{}, mods queries.Applicator) error {
	var slice []*MetaTransactionRequest
	var object *MetaTransactionRequest

	if singular {
		var ok bool
		object, ok = maybeMetaTransactionRequest.(*MetaTransactionRequest)
		if !ok {
			object = new(MetaTransactionRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMetaTransactionRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMetaTransactionRequest))
			}
		}
	} else {
		s, ok := maybeMetaTransactionRequest.(*[]*MetaTransactionRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMetaTransactionRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMetaTransactionRequest))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &metaTransactionRequestR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &metaTransactionRequestR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.autopi_units`),
		qm.WhereIn(`devices_api.autopi_units.pair_request_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AutopiUnit")
	}

	var resultSlice []*AutopiUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AutopiUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for autopi_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for autopi_units")
	}

	if len(metaTransactionRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PairRequestAutopiUnit = foreign
		if foreign.R == nil {
			foreign.R = &autopiUnitR{}
		}
		foreign.R.PairRequest = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.PairRequestID) {
				local.R.PairRequestAutopiUnit = foreign
				if foreign.R == nil {
					foreign.R = &autopiUnitR{}
				}
				foreign.R.PairRequest = local
				break
			}
		}
	}

	return nil
}

// LoadUnpairRequestAutopiUnit allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (metaTransactionRequestL) LoadUnpairRequestAutopiUnit(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMetaTransactionRequest interface{}, mods queries.Applicator) error {
	var slice []*MetaTransactionRequest
	var object *MetaTransactionRequest

	if singular {
		var ok bool
		object, ok = maybeMetaTransactionRequest.(*MetaTransactionRequest)
		if !ok {
			object = new(MetaTransactionRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMetaTransactionRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMetaTransactionRequest))
			}
		}
	} else {
		s, ok := maybeMetaTransactionRequest.(*[]*MetaTransactionRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMetaTransactionRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMetaTransactionRequest))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &metaTransactionRequestR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &metaTransactionRequestR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.autopi_units`),
		qm.WhereIn(`devices_api.autopi_units.unpair_request_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AutopiUnit")
	}

	var resultSlice []*AutopiUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AutopiUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for autopi_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for autopi_units")
	}

	if len(metaTransactionRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UnpairRequestAutopiUnit = foreign
		if foreign.R == nil {
			foreign.R = &autopiUnitR{}
		}
		foreign.R.UnpairRequest = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.UnpairRequestID) {
				local.R.UnpairRequestAutopiUnit = foreign
				if foreign.R == nil {
					foreign.R = &autopiUnitR{}
				}
				foreign.R.UnpairRequest = local
				break
			}
		}
	}

	return nil
}

// LoadMintRequestVehicleNFT allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (metaTransactionRequestL) LoadMintRequestVehicleNFT(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMetaTransactionRequest interface{}, mods queries.Applicator) error {
	var slice []*MetaTransactionRequest
	var object *MetaTransactionRequest

	if singular {
		var ok bool
		object, ok = maybeMetaTransactionRequest.(*MetaTransactionRequest)
		if !ok {
			object = new(MetaTransactionRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMetaTransactionRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMetaTransactionRequest))
			}
		}
	} else {
		s, ok := maybeMetaTransactionRequest.(*[]*MetaTransactionRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMetaTransactionRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMetaTransactionRequest))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &metaTransactionRequestR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &metaTransactionRequestR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.vehicle_nfts`),
		qm.WhereIn(`devices_api.vehicle_nfts.mint_request_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VehicleNFT")
	}

	var resultSlice []*VehicleNFT
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VehicleNFT")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vehicle_nfts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vehicle_nfts")
	}

	if len(metaTransactionRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MintRequestVehicleNFT = foreign
		if foreign.R == nil {
			foreign.R = &vehicleNFTR{}
		}
		foreign.R.MintRequest = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.MintRequestID {
				local.R.MintRequestVehicleNFT = foreign
				if foreign.R == nil {
					foreign.R = &vehicleNFTR{}
				}
				foreign.R.MintRequest = local
				break
			}
		}
	}

	return nil
}

// SetClaimMetaTransactionRequestAutopiUnit of the metaTransactionRequest to the related item.
// Sets o.R.ClaimMetaTransactionRequestAutopiUnit to related.
// Adds o to related.R.ClaimMetaTransactionRequest.
func (o *MetaTransactionRequest) SetClaimMetaTransactionRequestAutopiUnit(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AutopiUnit) error {
	var err error

	if insert {
		queries.Assign(&related.ClaimMetaTransactionRequestID, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"devices_api\".\"autopi_units\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"claim_meta_transaction_request_id"}),
			strmangle.WhereClause("\"", "\"", 2, autopiUnitPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.AutopiUnitID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.ClaimMetaTransactionRequestID, o.ID)
	}

	if o.R == nil {
		o.R = &metaTransactionRequestR{
			ClaimMetaTransactionRequestAutopiUnit: related,
		}
	} else {
		o.R.ClaimMetaTransactionRequestAutopiUnit = related
	}

	if related.R == nil {
		related.R = &autopiUnitR{
			ClaimMetaTransactionRequest: o,
		}
	} else {
		related.R.ClaimMetaTransactionRequest = o
	}
	return nil
}

// RemoveClaimMetaTransactionRequestAutopiUnit relationship.
// Sets o.R.ClaimMetaTransactionRequestAutopiUnit to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MetaTransactionRequest) RemoveClaimMetaTransactionRequestAutopiUnit(ctx context.Context, exec boil.ContextExecutor, related *AutopiUnit) error {
	var err error

	queries.SetScanner(&related.ClaimMetaTransactionRequestID, nil)
	if _, err = related.Update(ctx, exec, boil.Whitelist("claim_meta_transaction_request_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ClaimMetaTransactionRequestAutopiUnit = nil
	}

	if related == nil || related.R == nil {
		return nil
	}

	related.R.ClaimMetaTransactionRequest = nil

	return nil
}

// SetPairRequestAutopiUnit of the metaTransactionRequest to the related item.
// Sets o.R.PairRequestAutopiUnit to related.
// Adds o to related.R.PairRequest.
func (o *MetaTransactionRequest) SetPairRequestAutopiUnit(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AutopiUnit) error {
	var err error

	if insert {
		queries.Assign(&related.PairRequestID, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"devices_api\".\"autopi_units\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"pair_request_id"}),
			strmangle.WhereClause("\"", "\"", 2, autopiUnitPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.AutopiUnitID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.PairRequestID, o.ID)
	}

	if o.R == nil {
		o.R = &metaTransactionRequestR{
			PairRequestAutopiUnit: related,
		}
	} else {
		o.R.PairRequestAutopiUnit = related
	}

	if related.R == nil {
		related.R = &autopiUnitR{
			PairRequest: o,
		}
	} else {
		related.R.PairRequest = o
	}
	return nil
}

// RemovePairRequestAutopiUnit relationship.
// Sets o.R.PairRequestAutopiUnit to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MetaTransactionRequest) RemovePairRequestAutopiUnit(ctx context.Context, exec boil.ContextExecutor, related *AutopiUnit) error {
	var err error

	queries.SetScanner(&related.PairRequestID, nil)
	if _, err = related.Update(ctx, exec, boil.Whitelist("pair_request_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PairRequestAutopiUnit = nil
	}

	if related == nil || related.R == nil {
		return nil
	}

	related.R.PairRequest = nil

	return nil
}

// SetUnpairRequestAutopiUnit of the metaTransactionRequest to the related item.
// Sets o.R.UnpairRequestAutopiUnit to related.
// Adds o to related.R.UnpairRequest.
func (o *MetaTransactionRequest) SetUnpairRequestAutopiUnit(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AutopiUnit) error {
	var err error

	if insert {
		queries.Assign(&related.UnpairRequestID, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"devices_api\".\"autopi_units\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"unpair_request_id"}),
			strmangle.WhereClause("\"", "\"", 2, autopiUnitPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.AutopiUnitID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.UnpairRequestID, o.ID)
	}

	if o.R == nil {
		o.R = &metaTransactionRequestR{
			UnpairRequestAutopiUnit: related,
		}
	} else {
		o.R.UnpairRequestAutopiUnit = related
	}

	if related.R == nil {
		related.R = &autopiUnitR{
			UnpairRequest: o,
		}
	} else {
		related.R.UnpairRequest = o
	}
	return nil
}

// RemoveUnpairRequestAutopiUnit relationship.
// Sets o.R.UnpairRequestAutopiUnit to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MetaTransactionRequest) RemoveUnpairRequestAutopiUnit(ctx context.Context, exec boil.ContextExecutor, related *AutopiUnit) error {
	var err error

	queries.SetScanner(&related.UnpairRequestID, nil)
	if _, err = related.Update(ctx, exec, boil.Whitelist("unpair_request_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UnpairRequestAutopiUnit = nil
	}

	if related == nil || related.R == nil {
		return nil
	}

	related.R.UnpairRequest = nil

	return nil
}

// SetMintRequestVehicleNFT of the metaTransactionRequest to the related item.
// Sets o.R.MintRequestVehicleNFT to related.
// Adds o to related.R.MintRequest.
func (o *MetaTransactionRequest) SetMintRequestVehicleNFT(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VehicleNFT) error {
	var err error

	if insert {
		related.MintRequestID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"devices_api\".\"vehicle_nfts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"mint_request_id"}),
			strmangle.WhereClause("\"", "\"", 2, vehicleNFTPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.MintRequestID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.MintRequestID = o.ID
	}

	if o.R == nil {
		o.R = &metaTransactionRequestR{
			MintRequestVehicleNFT: related,
		}
	} else {
		o.R.MintRequestVehicleNFT = related
	}

	if related.R == nil {
		related.R = &vehicleNFTR{
			MintRequest: o,
		}
	} else {
		related.R.MintRequest = o
	}
	return nil
}

// MetaTransactionRequests retrieves all the records using an executor.
func MetaTransactionRequests(mods ...qm.QueryMod) metaTransactionRequestQuery {
	mods = append(mods, qm.From("\"devices_api\".\"meta_transaction_requests\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"devices_api\".\"meta_transaction_requests\".*"})
	}

	return metaTransactionRequestQuery{q}
}

// FindMetaTransactionRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMetaTransactionRequest(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*MetaTransactionRequest, error) {
	metaTransactionRequestObj := &MetaTransactionRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"devices_api\".\"meta_transaction_requests\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, metaTransactionRequestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from meta_transaction_requests")
	}

	if err = metaTransactionRequestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return metaTransactionRequestObj, err
	}

	return metaTransactionRequestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MetaTransactionRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no meta_transaction_requests provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metaTransactionRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	metaTransactionRequestInsertCacheMut.RLock()
	cache, cached := metaTransactionRequestInsertCache[key]
	metaTransactionRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			metaTransactionRequestAllColumns,
			metaTransactionRequestColumnsWithDefault,
			metaTransactionRequestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(metaTransactionRequestType, metaTransactionRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(metaTransactionRequestType, metaTransactionRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"devices_api\".\"meta_transaction_requests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"devices_api\".\"meta_transaction_requests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into meta_transaction_requests")
	}

	if !cached {
		metaTransactionRequestInsertCacheMut.Lock()
		metaTransactionRequestInsertCache[key] = cache
		metaTransactionRequestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MetaTransactionRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MetaTransactionRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	metaTransactionRequestUpdateCacheMut.RLock()
	cache, cached := metaTransactionRequestUpdateCache[key]
	metaTransactionRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			metaTransactionRequestAllColumns,
			metaTransactionRequestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update meta_transaction_requests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"devices_api\".\"meta_transaction_requests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, metaTransactionRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(metaTransactionRequestType, metaTransactionRequestMapping, append(wl, metaTransactionRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update meta_transaction_requests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for meta_transaction_requests")
	}

	if !cached {
		metaTransactionRequestUpdateCacheMut.Lock()
		metaTransactionRequestUpdateCache[key] = cache
		metaTransactionRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q metaTransactionRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for meta_transaction_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for meta_transaction_requests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MetaTransactionRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metaTransactionRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"devices_api\".\"meta_transaction_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, metaTransactionRequestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in metaTransactionRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all metaTransactionRequest")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MetaTransactionRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no meta_transaction_requests provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metaTransactionRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	metaTransactionRequestUpsertCacheMut.RLock()
	cache, cached := metaTransactionRequestUpsertCache[key]
	metaTransactionRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			metaTransactionRequestAllColumns,
			metaTransactionRequestColumnsWithDefault,
			metaTransactionRequestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			metaTransactionRequestAllColumns,
			metaTransactionRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert meta_transaction_requests, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(metaTransactionRequestPrimaryKeyColumns))
			copy(conflict, metaTransactionRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"devices_api\".\"meta_transaction_requests\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(metaTransactionRequestType, metaTransactionRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(metaTransactionRequestType, metaTransactionRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert meta_transaction_requests")
	}

	if !cached {
		metaTransactionRequestUpsertCacheMut.Lock()
		metaTransactionRequestUpsertCache[key] = cache
		metaTransactionRequestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MetaTransactionRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MetaTransactionRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MetaTransactionRequest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), metaTransactionRequestPrimaryKeyMapping)
	sql := "DELETE FROM \"devices_api\".\"meta_transaction_requests\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from meta_transaction_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for meta_transaction_requests")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q metaTransactionRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no metaTransactionRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from meta_transaction_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for meta_transaction_requests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MetaTransactionRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(metaTransactionRequestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metaTransactionRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"devices_api\".\"meta_transaction_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, metaTransactionRequestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from metaTransactionRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for meta_transaction_requests")
	}

	if len(metaTransactionRequestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MetaTransactionRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMetaTransactionRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MetaTransactionRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MetaTransactionRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metaTransactionRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"devices_api\".\"meta_transaction_requests\".* FROM \"devices_api\".\"meta_transaction_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, metaTransactionRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MetaTransactionRequestSlice")
	}

	*o = slice

	return nil
}

// MetaTransactionRequestExists checks if the MetaTransactionRequest row exists.
func MetaTransactionRequestExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"devices_api\".\"meta_transaction_requests\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if meta_transaction_requests exists")
	}

	return exists, nil
}
