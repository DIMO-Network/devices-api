// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// VehicleNFT is an object representing the database table.
type VehicleNFT struct {
	UserDeviceID  null.String       `boil:"user_device_id" json:"user_device_id,omitempty" toml:"user_device_id" yaml:"user_device_id,omitempty"`
	MintRequestID null.String       `boil:"mint_request_id" json:"mint_request_id,omitempty" toml:"mint_request_id" yaml:"mint_request_id,omitempty"`
	TokenID       types.NullDecimal `boil:"token_id" json:"token_id,omitempty" toml:"token_id" yaml:"token_id,omitempty"`
	ClaimID       null.String       `boil:"claim_id" json:"claim_id,omitempty" toml:"claim_id" yaml:"claim_id,omitempty"`
	OwnerAddress  null.Bytes        `boil:"owner_address" json:"owner_address,omitempty" toml:"owner_address" yaml:"owner_address,omitempty"`
	Vin           null.String       `boil:"vin" json:"vin,omitempty" toml:"vin" yaml:"vin,omitempty"`
}

var VehicleNFTColumns = struct {
	UserDeviceID  string
	MintRequestID string
	TokenID       string
	ClaimID       string
	OwnerAddress  string
	Vin           string
}{
	UserDeviceID:  "user_device_id",
	MintRequestID: "mint_request_id",
	TokenID:       "token_id",
	ClaimID:       "claim_id",
	OwnerAddress:  "owner_address",
	Vin:           "vin",
}

var VehicleNFTTableColumns = struct {
	UserDeviceID  string
	MintRequestID string
	TokenID       string
	ClaimID       string
	OwnerAddress  string
	Vin           string
}{
	UserDeviceID:  "vehicle_nfts.user_device_id",
	MintRequestID: "vehicle_nfts.mint_request_id",
	TokenID:       "vehicle_nfts.token_id",
	ClaimID:       "vehicle_nfts.claim_id",
	OwnerAddress:  "vehicle_nfts.owner_address",
	Vin:           "vehicle_nfts.vin",
}

// Generated where

var VehicleNFTWhere = struct {
	UserDeviceID  whereHelpernull_String
	MintRequestID whereHelpernull_String
	TokenID       whereHelpertypes_NullDecimal
	ClaimID       whereHelpernull_String
	OwnerAddress  whereHelpernull_Bytes
	Vin           whereHelpernull_String
}{
	UserDeviceID:  whereHelpernull_String{field: "\"devices_api\".\"vehicle_nfts\".\"user_device_id\""},
	MintRequestID: whereHelpernull_String{field: "\"devices_api\".\"vehicle_nfts\".\"mint_request_id\""},
	TokenID:       whereHelpertypes_NullDecimal{field: "\"devices_api\".\"vehicle_nfts\".\"token_id\""},
	ClaimID:       whereHelpernull_String{field: "\"devices_api\".\"vehicle_nfts\".\"claim_id\""},
	OwnerAddress:  whereHelpernull_Bytes{field: "\"devices_api\".\"vehicle_nfts\".\"owner_address\""},
	Vin:           whereHelpernull_String{field: "\"devices_api\".\"vehicle_nfts\".\"vin\""},
}

var (
	vehicleNFTAllColumns            = []string{"user_device_id", "mint_request_id", "token_id", "claim_id", "owner_address", "vin"}
	vehicleNFTColumnsWithoutDefault = []string{}
	vehicleNFTColumnsWithDefault    = []string{"user_device_id", "mint_request_id", "token_id", "claim_id", "owner_address", "vin"}
	vehicleNFTPrimaryKeyColumns     = []string{}
	vehicleNFTGeneratedColumns      = []string{}
)

type (
	// VehicleNFTSlice is an alias for a slice of pointers to VehicleNFT.
	// This should almost always be used instead of []VehicleNFT.
	VehicleNFTSlice []*VehicleNFT
	// VehicleNFTHook is the signature for custom VehicleNFT hook methods
	VehicleNFTHook func(context.Context, boil.ContextExecutor, *VehicleNFT) error

	vehicleNFTQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vehicleNFTType           = reflect.TypeOf(&VehicleNFT{})
	vehicleNFTMapping        = queries.MakeStructMapping(vehicleNFTType)
	vehicleNFTInsertCacheMut sync.RWMutex
	vehicleNFTInsertCache    = make(map[string]insertCache)
	vehicleNFTUpdateCacheMut sync.RWMutex
	vehicleNFTUpdateCache    = make(map[string]updateCache)
	vehicleNFTUpsertCacheMut sync.RWMutex
	vehicleNFTUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var vehicleNFTAfterSelectHooks []VehicleNFTHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VehicleNFT) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleNFTAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVehicleNFTHook registers your hook function for all future operations.
func AddVehicleNFTHook(hookPoint boil.HookPoint, vehicleNFTHook VehicleNFTHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vehicleNFTAfterSelectHooks = append(vehicleNFTAfterSelectHooks, vehicleNFTHook)
	}
}

// One returns a single vehicleNFT record from the query.
func (q vehicleNFTQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VehicleNFT, error) {
	o := &VehicleNFT{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vehicle_nfts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VehicleNFT records from the query.
func (q vehicleNFTQuery) All(ctx context.Context, exec boil.ContextExecutor) (VehicleNFTSlice, error) {
	var o []*VehicleNFT

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VehicleNFT slice")
	}

	if len(vehicleNFTAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VehicleNFT records in the query.
func (q vehicleNFTQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vehicle_nfts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vehicleNFTQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vehicle_nfts exists")
	}

	return count > 0, nil
}

// VehicleNFTS retrieves all the records using an executor.
func VehicleNFTS(mods ...qm.QueryMod) vehicleNFTQuery {
	mods = append(mods, qm.From("\"devices_api\".\"vehicle_nfts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"devices_api\".\"vehicle_nfts\".*"})
	}

	return vehicleNFTQuery{q}
}
