// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// VehicleNFT is an object representing the database table.
type VehicleNFT struct {
	MintRequestID string            `boil:"mint_request_id" json:"mint_request_id" toml:"mint_request_id" yaml:"mint_request_id"`
	UserDeviceID  null.String       `boil:"user_device_id" json:"user_device_id,omitempty" toml:"user_device_id" yaml:"user_device_id,omitempty"`
	Vin           string            `boil:"vin" json:"vin" toml:"vin" yaml:"vin"`
	TokenID       types.NullDecimal `boil:"token_id" json:"token_id,omitempty" toml:"token_id" yaml:"token_id,omitempty"`
	OwnerAddress  null.Bytes        `boil:"owner_address" json:"owner_address,omitempty" toml:"owner_address" yaml:"owner_address,omitempty"`

	R *vehicleNFTR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vehicleNFTL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VehicleNFTColumns = struct {
	MintRequestID string
	UserDeviceID  string
	Vin           string
	TokenID       string
	OwnerAddress  string
}{
	MintRequestID: "mint_request_id",
	UserDeviceID:  "user_device_id",
	Vin:           "vin",
	TokenID:       "token_id",
	OwnerAddress:  "owner_address",
}

var VehicleNFTTableColumns = struct {
	MintRequestID string
	UserDeviceID  string
	Vin           string
	TokenID       string
	OwnerAddress  string
}{
	MintRequestID: "vehicle_nfts.mint_request_id",
	UserDeviceID:  "vehicle_nfts.user_device_id",
	Vin:           "vehicle_nfts.vin",
	TokenID:       "vehicle_nfts.token_id",
	OwnerAddress:  "vehicle_nfts.owner_address",
}

// Generated where

var VehicleNFTWhere = struct {
	MintRequestID whereHelperstring
	UserDeviceID  whereHelpernull_String
	Vin           whereHelperstring
	TokenID       whereHelpertypes_NullDecimal
	OwnerAddress  whereHelpernull_Bytes
}{
	MintRequestID: whereHelperstring{field: "\"devices_api\".\"vehicle_nfts\".\"mint_request_id\""},
	UserDeviceID:  whereHelpernull_String{field: "\"devices_api\".\"vehicle_nfts\".\"user_device_id\""},
	Vin:           whereHelperstring{field: "\"devices_api\".\"vehicle_nfts\".\"vin\""},
	TokenID:       whereHelpertypes_NullDecimal{field: "\"devices_api\".\"vehicle_nfts\".\"token_id\""},
	OwnerAddress:  whereHelpernull_Bytes{field: "\"devices_api\".\"vehicle_nfts\".\"owner_address\""},
}

// VehicleNFTRels is where relationship names are stored.
var VehicleNFTRels = struct {
	MintRequest            string
	UserDevice             string
	VehicleTokenAutopiUnit string
}{
	MintRequest:            "MintRequest",
	UserDevice:             "UserDevice",
	VehicleTokenAutopiUnit: "VehicleTokenAutopiUnit",
}

// vehicleNFTR is where relationships are stored.
type vehicleNFTR struct {
	MintRequest            *MetaTransactionRequest `boil:"MintRequest" json:"MintRequest" toml:"MintRequest" yaml:"MintRequest"`
	UserDevice             *UserDevice             `boil:"UserDevice" json:"UserDevice" toml:"UserDevice" yaml:"UserDevice"`
	VehicleTokenAutopiUnit *AutopiUnit             `boil:"VehicleTokenAutopiUnit" json:"VehicleTokenAutopiUnit" toml:"VehicleTokenAutopiUnit" yaml:"VehicleTokenAutopiUnit"`
}

// NewStruct creates a new relationship struct
func (*vehicleNFTR) NewStruct() *vehicleNFTR {
	return &vehicleNFTR{}
}

func (r *vehicleNFTR) GetMintRequest() *MetaTransactionRequest {
	if r == nil {
		return nil
	}
	return r.MintRequest
}

func (r *vehicleNFTR) GetUserDevice() *UserDevice {
	if r == nil {
		return nil
	}
	return r.UserDevice
}

func (r *vehicleNFTR) GetVehicleTokenAutopiUnit() *AutopiUnit {
	if r == nil {
		return nil
	}
	return r.VehicleTokenAutopiUnit
}

// vehicleNFTL is where Load methods for each relationship are stored.
type vehicleNFTL struct{}

var (
	vehicleNFTAllColumns            = []string{"mint_request_id", "user_device_id", "vin", "token_id", "owner_address"}
	vehicleNFTColumnsWithoutDefault = []string{"mint_request_id", "vin"}
	vehicleNFTColumnsWithDefault    = []string{"user_device_id", "token_id", "owner_address"}
	vehicleNFTPrimaryKeyColumns     = []string{"mint_request_id"}
	vehicleNFTGeneratedColumns      = []string{}
)

type (
	// VehicleNFTSlice is an alias for a slice of pointers to VehicleNFT.
	// This should almost always be used instead of []VehicleNFT.
	VehicleNFTSlice []*VehicleNFT
	// VehicleNFTHook is the signature for custom VehicleNFT hook methods
	VehicleNFTHook func(context.Context, boil.ContextExecutor, *VehicleNFT) error

	vehicleNFTQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vehicleNFTType                 = reflect.TypeOf(&VehicleNFT{})
	vehicleNFTMapping              = queries.MakeStructMapping(vehicleNFTType)
	vehicleNFTPrimaryKeyMapping, _ = queries.BindMapping(vehicleNFTType, vehicleNFTMapping, vehicleNFTPrimaryKeyColumns)
	vehicleNFTInsertCacheMut       sync.RWMutex
	vehicleNFTInsertCache          = make(map[string]insertCache)
	vehicleNFTUpdateCacheMut       sync.RWMutex
	vehicleNFTUpdateCache          = make(map[string]updateCache)
	vehicleNFTUpsertCacheMut       sync.RWMutex
	vehicleNFTUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vehicleNFTAfterSelectHooks []VehicleNFTHook

var vehicleNFTBeforeInsertHooks []VehicleNFTHook
var vehicleNFTAfterInsertHooks []VehicleNFTHook

var vehicleNFTBeforeUpdateHooks []VehicleNFTHook
var vehicleNFTAfterUpdateHooks []VehicleNFTHook

var vehicleNFTBeforeDeleteHooks []VehicleNFTHook
var vehicleNFTAfterDeleteHooks []VehicleNFTHook

var vehicleNFTBeforeUpsertHooks []VehicleNFTHook
var vehicleNFTAfterUpsertHooks []VehicleNFTHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VehicleNFT) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleNFTAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VehicleNFT) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleNFTBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VehicleNFT) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleNFTAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VehicleNFT) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleNFTBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VehicleNFT) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleNFTAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VehicleNFT) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleNFTBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VehicleNFT) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleNFTAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VehicleNFT) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleNFTBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VehicleNFT) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleNFTAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVehicleNFTHook registers your hook function for all future operations.
func AddVehicleNFTHook(hookPoint boil.HookPoint, vehicleNFTHook VehicleNFTHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vehicleNFTAfterSelectHooks = append(vehicleNFTAfterSelectHooks, vehicleNFTHook)
	case boil.BeforeInsertHook:
		vehicleNFTBeforeInsertHooks = append(vehicleNFTBeforeInsertHooks, vehicleNFTHook)
	case boil.AfterInsertHook:
		vehicleNFTAfterInsertHooks = append(vehicleNFTAfterInsertHooks, vehicleNFTHook)
	case boil.BeforeUpdateHook:
		vehicleNFTBeforeUpdateHooks = append(vehicleNFTBeforeUpdateHooks, vehicleNFTHook)
	case boil.AfterUpdateHook:
		vehicleNFTAfterUpdateHooks = append(vehicleNFTAfterUpdateHooks, vehicleNFTHook)
	case boil.BeforeDeleteHook:
		vehicleNFTBeforeDeleteHooks = append(vehicleNFTBeforeDeleteHooks, vehicleNFTHook)
	case boil.AfterDeleteHook:
		vehicleNFTAfterDeleteHooks = append(vehicleNFTAfterDeleteHooks, vehicleNFTHook)
	case boil.BeforeUpsertHook:
		vehicleNFTBeforeUpsertHooks = append(vehicleNFTBeforeUpsertHooks, vehicleNFTHook)
	case boil.AfterUpsertHook:
		vehicleNFTAfterUpsertHooks = append(vehicleNFTAfterUpsertHooks, vehicleNFTHook)
	}
}

// One returns a single vehicleNFT record from the query.
func (q vehicleNFTQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VehicleNFT, error) {
	o := &VehicleNFT{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vehicle_nfts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VehicleNFT records from the query.
func (q vehicleNFTQuery) All(ctx context.Context, exec boil.ContextExecutor) (VehicleNFTSlice, error) {
	var o []*VehicleNFT

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VehicleNFT slice")
	}

	if len(vehicleNFTAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VehicleNFT records in the query.
func (q vehicleNFTQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vehicle_nfts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vehicleNFTQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vehicle_nfts exists")
	}

	return count > 0, nil
}

// MintRequest pointed to by the foreign key.
func (o *VehicleNFT) MintRequest(mods ...qm.QueryMod) metaTransactionRequestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MintRequestID),
	}

	queryMods = append(queryMods, mods...)

	return MetaTransactionRequests(queryMods...)
}

// UserDevice pointed to by the foreign key.
func (o *VehicleNFT) UserDevice(mods ...qm.QueryMod) userDeviceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserDeviceID),
	}

	queryMods = append(queryMods, mods...)

	return UserDevices(queryMods...)
}

// VehicleTokenAutopiUnit pointed to by the foreign key.
func (o *VehicleNFT) VehicleTokenAutopiUnit(mods ...qm.QueryMod) autopiUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"vehicle_token_id\" = ?", o.TokenID),
	}

	queryMods = append(queryMods, mods...)

	return AutopiUnits(queryMods...)
}

// LoadMintRequest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vehicleNFTL) LoadMintRequest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVehicleNFT interface{}, mods queries.Applicator) error {
	var slice []*VehicleNFT
	var object *VehicleNFT

	if singular {
		var ok bool
		object, ok = maybeVehicleNFT.(*VehicleNFT)
		if !ok {
			object = new(VehicleNFT)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVehicleNFT)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVehicleNFT))
			}
		}
	} else {
		s, ok := maybeVehicleNFT.(*[]*VehicleNFT)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVehicleNFT)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVehicleNFT))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &vehicleNFTR{}
		}
		args = append(args, object.MintRequestID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vehicleNFTR{}
			}

			for _, a := range args {
				if a == obj.MintRequestID {
					continue Outer
				}
			}

			args = append(args, obj.MintRequestID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.meta_transaction_requests`),
		qm.WhereIn(`devices_api.meta_transaction_requests.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MetaTransactionRequest")
	}

	var resultSlice []*MetaTransactionRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MetaTransactionRequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for meta_transaction_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for meta_transaction_requests")
	}

	if len(metaTransactionRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MintRequest = foreign
		if foreign.R == nil {
			foreign.R = &metaTransactionRequestR{}
		}
		foreign.R.MintRequestVehicleNFT = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MintRequestID == foreign.ID {
				local.R.MintRequest = foreign
				if foreign.R == nil {
					foreign.R = &metaTransactionRequestR{}
				}
				foreign.R.MintRequestVehicleNFT = local
				break
			}
		}
	}

	return nil
}

// LoadUserDevice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vehicleNFTL) LoadUserDevice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVehicleNFT interface{}, mods queries.Applicator) error {
	var slice []*VehicleNFT
	var object *VehicleNFT

	if singular {
		var ok bool
		object, ok = maybeVehicleNFT.(*VehicleNFT)
		if !ok {
			object = new(VehicleNFT)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVehicleNFT)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVehicleNFT))
			}
		}
	} else {
		s, ok := maybeVehicleNFT.(*[]*VehicleNFT)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVehicleNFT)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVehicleNFT))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &vehicleNFTR{}
		}
		if !queries.IsNil(object.UserDeviceID) {
			args = append(args, object.UserDeviceID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vehicleNFTR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserDeviceID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserDeviceID) {
				args = append(args, obj.UserDeviceID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.user_devices`),
		qm.WhereIn(`devices_api.user_devices.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserDevice")
	}

	var resultSlice []*UserDevice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserDevice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_devices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_devices")
	}

	if len(userDeviceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserDevice = foreign
		if foreign.R == nil {
			foreign.R = &userDeviceR{}
		}
		foreign.R.VehicleNFT = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserDeviceID, foreign.ID) {
				local.R.UserDevice = foreign
				if foreign.R == nil {
					foreign.R = &userDeviceR{}
				}
				foreign.R.VehicleNFT = local
				break
			}
		}
	}

	return nil
}

// LoadVehicleTokenAutopiUnit allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (vehicleNFTL) LoadVehicleTokenAutopiUnit(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVehicleNFT interface{}, mods queries.Applicator) error {
	var slice []*VehicleNFT
	var object *VehicleNFT

	if singular {
		var ok bool
		object, ok = maybeVehicleNFT.(*VehicleNFT)
		if !ok {
			object = new(VehicleNFT)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVehicleNFT)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVehicleNFT))
			}
		}
	} else {
		s, ok := maybeVehicleNFT.(*[]*VehicleNFT)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVehicleNFT)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVehicleNFT))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &vehicleNFTR{}
		}
		args = append(args, object.TokenID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vehicleNFTR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TokenID) {
					continue Outer
				}
			}

			args = append(args, obj.TokenID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices_api.autopi_units`),
		qm.WhereIn(`devices_api.autopi_units.vehicle_token_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AutopiUnit")
	}

	var resultSlice []*AutopiUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AutopiUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for autopi_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for autopi_units")
	}

	if len(autopiUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VehicleTokenAutopiUnit = foreign
		if foreign.R == nil {
			foreign.R = &autopiUnitR{}
		}
		foreign.R.VehicleToken = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TokenID, foreign.VehicleTokenID) {
				local.R.VehicleTokenAutopiUnit = foreign
				if foreign.R == nil {
					foreign.R = &autopiUnitR{}
				}
				foreign.R.VehicleToken = local
				break
			}
		}
	}

	return nil
}

// SetMintRequest of the vehicleNFT to the related item.
// Sets o.R.MintRequest to related.
// Adds o to related.R.MintRequestVehicleNFT.
func (o *VehicleNFT) SetMintRequest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MetaTransactionRequest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"vehicle_nfts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mint_request_id"}),
		strmangle.WhereClause("\"", "\"", 2, vehicleNFTPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MintRequestID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MintRequestID = related.ID
	if o.R == nil {
		o.R = &vehicleNFTR{
			MintRequest: related,
		}
	} else {
		o.R.MintRequest = related
	}

	if related.R == nil {
		related.R = &metaTransactionRequestR{
			MintRequestVehicleNFT: o,
		}
	} else {
		related.R.MintRequestVehicleNFT = o
	}

	return nil
}

// SetUserDevice of the vehicleNFT to the related item.
// Sets o.R.UserDevice to related.
// Adds o to related.R.VehicleNFT.
func (o *VehicleNFT) SetUserDevice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserDevice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"devices_api\".\"vehicle_nfts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_device_id"}),
		strmangle.WhereClause("\"", "\"", 2, vehicleNFTPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MintRequestID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserDeviceID, related.ID)
	if o.R == nil {
		o.R = &vehicleNFTR{
			UserDevice: related,
		}
	} else {
		o.R.UserDevice = related
	}

	if related.R == nil {
		related.R = &userDeviceR{
			VehicleNFT: o,
		}
	} else {
		related.R.VehicleNFT = o
	}

	return nil
}

// RemoveUserDevice relationship.
// Sets o.R.UserDevice to nil.
// Removes o from all passed in related items' relationships struct.
func (o *VehicleNFT) RemoveUserDevice(ctx context.Context, exec boil.ContextExecutor, related *UserDevice) error {
	var err error

	queries.SetScanner(&o.UserDeviceID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_device_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UserDevice = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.VehicleNFT = nil
	return nil
}

// SetVehicleTokenAutopiUnit of the vehicleNFT to the related item.
// Sets o.R.VehicleTokenAutopiUnit to related.
// Adds o to related.R.VehicleToken.
func (o *VehicleNFT) SetVehicleTokenAutopiUnit(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AutopiUnit) error {
	var err error

	if insert {
		queries.Assign(&related.VehicleTokenID, o.TokenID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"devices_api\".\"autopi_units\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"vehicle_token_id"}),
			strmangle.WhereClause("\"", "\"", 2, autopiUnitPrimaryKeyColumns),
		)
		values := []interface{}{o.TokenID, related.AutopiUnitID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.VehicleTokenID, o.TokenID)
	}

	if o.R == nil {
		o.R = &vehicleNFTR{
			VehicleTokenAutopiUnit: related,
		}
	} else {
		o.R.VehicleTokenAutopiUnit = related
	}

	if related.R == nil {
		related.R = &autopiUnitR{
			VehicleToken: o,
		}
	} else {
		related.R.VehicleToken = o
	}
	return nil
}

// RemoveVehicleTokenAutopiUnit relationship.
// Sets o.R.VehicleTokenAutopiUnit to nil.
// Removes o from all passed in related items' relationships struct.
func (o *VehicleNFT) RemoveVehicleTokenAutopiUnit(ctx context.Context, exec boil.ContextExecutor, related *AutopiUnit) error {
	var err error

	queries.SetScanner(&related.VehicleTokenID, nil)
	if _, err = related.Update(ctx, exec, boil.Whitelist("vehicle_token_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.VehicleTokenAutopiUnit = nil
	}

	if related == nil || related.R == nil {
		return nil
	}

	related.R.VehicleToken = nil

	return nil
}

// VehicleNFTS retrieves all the records using an executor.
func VehicleNFTS(mods ...qm.QueryMod) vehicleNFTQuery {
	mods = append(mods, qm.From("\"devices_api\".\"vehicle_nfts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"devices_api\".\"vehicle_nfts\".*"})
	}

	return vehicleNFTQuery{q}
}

// FindVehicleNFT retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVehicleNFT(ctx context.Context, exec boil.ContextExecutor, mintRequestID string, selectCols ...string) (*VehicleNFT, error) {
	vehicleNFTObj := &VehicleNFT{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"devices_api\".\"vehicle_nfts\" where \"mint_request_id\"=$1", sel,
	)

	q := queries.Raw(query, mintRequestID)

	err := q.Bind(ctx, exec, vehicleNFTObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vehicle_nfts")
	}

	if err = vehicleNFTObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vehicleNFTObj, err
	}

	return vehicleNFTObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VehicleNFT) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vehicle_nfts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vehicleNFTColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vehicleNFTInsertCacheMut.RLock()
	cache, cached := vehicleNFTInsertCache[key]
	vehicleNFTInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vehicleNFTAllColumns,
			vehicleNFTColumnsWithDefault,
			vehicleNFTColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vehicleNFTType, vehicleNFTMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vehicleNFTType, vehicleNFTMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"devices_api\".\"vehicle_nfts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"devices_api\".\"vehicle_nfts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vehicle_nfts")
	}

	if !cached {
		vehicleNFTInsertCacheMut.Lock()
		vehicleNFTInsertCache[key] = cache
		vehicleNFTInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VehicleNFT.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VehicleNFT) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vehicleNFTUpdateCacheMut.RLock()
	cache, cached := vehicleNFTUpdateCache[key]
	vehicleNFTUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vehicleNFTAllColumns,
			vehicleNFTPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vehicle_nfts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"devices_api\".\"vehicle_nfts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vehicleNFTPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vehicleNFTType, vehicleNFTMapping, append(wl, vehicleNFTPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vehicle_nfts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vehicle_nfts")
	}

	if !cached {
		vehicleNFTUpdateCacheMut.Lock()
		vehicleNFTUpdateCache[key] = cache
		vehicleNFTUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vehicleNFTQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vehicle_nfts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vehicle_nfts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VehicleNFTSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleNFTPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"devices_api\".\"vehicle_nfts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vehicleNFTPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vehicleNFT slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vehicleNFT")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VehicleNFT) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vehicle_nfts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vehicleNFTColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vehicleNFTUpsertCacheMut.RLock()
	cache, cached := vehicleNFTUpsertCache[key]
	vehicleNFTUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			vehicleNFTAllColumns,
			vehicleNFTColumnsWithDefault,
			vehicleNFTColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vehicleNFTAllColumns,
			vehicleNFTPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert vehicle_nfts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(vehicleNFTPrimaryKeyColumns))
			copy(conflict, vehicleNFTPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"devices_api\".\"vehicle_nfts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(vehicleNFTType, vehicleNFTMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vehicleNFTType, vehicleNFTMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vehicle_nfts")
	}

	if !cached {
		vehicleNFTUpsertCacheMut.Lock()
		vehicleNFTUpsertCache[key] = cache
		vehicleNFTUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VehicleNFT record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VehicleNFT) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VehicleNFT provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vehicleNFTPrimaryKeyMapping)
	sql := "DELETE FROM \"devices_api\".\"vehicle_nfts\" WHERE \"mint_request_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vehicle_nfts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vehicle_nfts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vehicleNFTQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vehicleNFTQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vehicle_nfts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vehicle_nfts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VehicleNFTSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vehicleNFTBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleNFTPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"devices_api\".\"vehicle_nfts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vehicleNFTPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vehicleNFT slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vehicle_nfts")
	}

	if len(vehicleNFTAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VehicleNFT) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVehicleNFT(ctx, exec, o.MintRequestID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VehicleNFTSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VehicleNFTSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleNFTPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"devices_api\".\"vehicle_nfts\".* FROM \"devices_api\".\"vehicle_nfts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vehicleNFTPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VehicleNFTSlice")
	}

	*o = slice

	return nil
}

// VehicleNFTExists checks if the VehicleNFT row exists.
func VehicleNFTExists(ctx context.Context, exec boil.ContextExecutor, mintRequestID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"devices_api\".\"vehicle_nfts\" where \"mint_request_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, mintRequestID)
	}
	row := exec.QueryRowContext(ctx, sql, mintRequestID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vehicle_nfts exists")
	}

	return exists, nil
}

// Exists checks if the VehicleNFT row exists.
func (o *VehicleNFT) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VehicleNFTExists(ctx, exec, o.MintRequestID)
}
