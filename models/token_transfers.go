// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// TokenTransfer is an object representing the database table.
type TokenTransfer struct {
	ContractAddress []byte        `boil:"contract_address" json:"contract_address" toml:"contract_address" yaml:"contract_address"`
	UserAddress     []byte        `boil:"user_address" json:"user_address" toml:"user_address" yaml:"user_address"`
	Amount          types.Decimal `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	CreatedAt       time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *tokenTransferR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tokenTransferL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TokenTransferColumns = struct {
	ContractAddress string
	UserAddress     string
	Amount          string
	CreatedAt       string
	UpdatedAt       string
}{
	ContractAddress: "contract_address",
	UserAddress:     "user_address",
	Amount:          "amount",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

var TokenTransferTableColumns = struct {
	ContractAddress string
	UserAddress     string
	Amount          string
	CreatedAt       string
	UpdatedAt       string
}{
	ContractAddress: "token_transfers.contract_address",
	UserAddress:     "token_transfers.user_address",
	Amount:          "token_transfers.amount",
	CreatedAt:       "token_transfers.created_at",
	UpdatedAt:       "token_transfers.updated_at",
}

// Generated where

var TokenTransferWhere = struct {
	ContractAddress whereHelper__byte
	UserAddress     whereHelper__byte
	Amount          whereHelpertypes_Decimal
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
}{
	ContractAddress: whereHelper__byte{field: "\"devices_api\".\"token_transfers\".\"contract_address\""},
	UserAddress:     whereHelper__byte{field: "\"devices_api\".\"token_transfers\".\"user_address\""},
	Amount:          whereHelpertypes_Decimal{field: "\"devices_api\".\"token_transfers\".\"amount\""},
	CreatedAt:       whereHelpertime_Time{field: "\"devices_api\".\"token_transfers\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"devices_api\".\"token_transfers\".\"updated_at\""},
}

// TokenTransferRels is where relationship names are stored.
var TokenTransferRels = struct {
}{}

// tokenTransferR is where relationships are stored.
type tokenTransferR struct {
}

// NewStruct creates a new relationship struct
func (*tokenTransferR) NewStruct() *tokenTransferR {
	return &tokenTransferR{}
}

// tokenTransferL is where Load methods for each relationship are stored.
type tokenTransferL struct{}

var (
	tokenTransferAllColumns            = []string{"contract_address", "user_address", "amount", "created_at", "updated_at"}
	tokenTransferColumnsWithoutDefault = []string{"contract_address", "user_address", "amount"}
	tokenTransferColumnsWithDefault    = []string{"created_at", "updated_at"}
	tokenTransferPrimaryKeyColumns     = []string{"contract_address", "user_address", "amount", "created_at"}
	tokenTransferGeneratedColumns      = []string{}
)

type (
	// TokenTransferSlice is an alias for a slice of pointers to TokenTransfer.
	// This should almost always be used instead of []TokenTransfer.
	TokenTransferSlice []*TokenTransfer
	// TokenTransferHook is the signature for custom TokenTransfer hook methods
	TokenTransferHook func(context.Context, boil.ContextExecutor, *TokenTransfer) error

	tokenTransferQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tokenTransferType                 = reflect.TypeOf(&TokenTransfer{})
	tokenTransferMapping              = queries.MakeStructMapping(tokenTransferType)
	tokenTransferPrimaryKeyMapping, _ = queries.BindMapping(tokenTransferType, tokenTransferMapping, tokenTransferPrimaryKeyColumns)
	tokenTransferInsertCacheMut       sync.RWMutex
	tokenTransferInsertCache          = make(map[string]insertCache)
	tokenTransferUpdateCacheMut       sync.RWMutex
	tokenTransferUpdateCache          = make(map[string]updateCache)
	tokenTransferUpsertCacheMut       sync.RWMutex
	tokenTransferUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tokenTransferAfterSelectHooks []TokenTransferHook

var tokenTransferBeforeInsertHooks []TokenTransferHook
var tokenTransferAfterInsertHooks []TokenTransferHook

var tokenTransferBeforeUpdateHooks []TokenTransferHook
var tokenTransferAfterUpdateHooks []TokenTransferHook

var tokenTransferBeforeDeleteHooks []TokenTransferHook
var tokenTransferAfterDeleteHooks []TokenTransferHook

var tokenTransferBeforeUpsertHooks []TokenTransferHook
var tokenTransferAfterUpsertHooks []TokenTransferHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TokenTransfer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenTransferAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TokenTransfer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenTransferBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TokenTransfer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenTransferAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TokenTransfer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenTransferBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TokenTransfer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenTransferAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TokenTransfer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenTransferBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TokenTransfer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenTransferAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TokenTransfer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenTransferBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TokenTransfer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenTransferAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTokenTransferHook registers your hook function for all future operations.
func AddTokenTransferHook(hookPoint boil.HookPoint, tokenTransferHook TokenTransferHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tokenTransferAfterSelectHooks = append(tokenTransferAfterSelectHooks, tokenTransferHook)
	case boil.BeforeInsertHook:
		tokenTransferBeforeInsertHooks = append(tokenTransferBeforeInsertHooks, tokenTransferHook)
	case boil.AfterInsertHook:
		tokenTransferAfterInsertHooks = append(tokenTransferAfterInsertHooks, tokenTransferHook)
	case boil.BeforeUpdateHook:
		tokenTransferBeforeUpdateHooks = append(tokenTransferBeforeUpdateHooks, tokenTransferHook)
	case boil.AfterUpdateHook:
		tokenTransferAfterUpdateHooks = append(tokenTransferAfterUpdateHooks, tokenTransferHook)
	case boil.BeforeDeleteHook:
		tokenTransferBeforeDeleteHooks = append(tokenTransferBeforeDeleteHooks, tokenTransferHook)
	case boil.AfterDeleteHook:
		tokenTransferAfterDeleteHooks = append(tokenTransferAfterDeleteHooks, tokenTransferHook)
	case boil.BeforeUpsertHook:
		tokenTransferBeforeUpsertHooks = append(tokenTransferBeforeUpsertHooks, tokenTransferHook)
	case boil.AfterUpsertHook:
		tokenTransferAfterUpsertHooks = append(tokenTransferAfterUpsertHooks, tokenTransferHook)
	}
}

// One returns a single tokenTransfer record from the query.
func (q tokenTransferQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TokenTransfer, error) {
	o := &TokenTransfer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for token_transfers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TokenTransfer records from the query.
func (q tokenTransferQuery) All(ctx context.Context, exec boil.ContextExecutor) (TokenTransferSlice, error) {
	var o []*TokenTransfer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TokenTransfer slice")
	}

	if len(tokenTransferAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TokenTransfer records in the query.
func (q tokenTransferQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count token_transfers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tokenTransferQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if token_transfers exists")
	}

	return count > 0, nil
}

// TokenTransfers retrieves all the records using an executor.
func TokenTransfers(mods ...qm.QueryMod) tokenTransferQuery {
	mods = append(mods, qm.From("\"devices_api\".\"token_transfers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"devices_api\".\"token_transfers\".*"})
	}

	return tokenTransferQuery{q}
}

// FindTokenTransfer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTokenTransfer(ctx context.Context, exec boil.ContextExecutor, contractAddress []byte, userAddress []byte, amount types.Decimal, createdAt time.Time, selectCols ...string) (*TokenTransfer, error) {
	tokenTransferObj := &TokenTransfer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"devices_api\".\"token_transfers\" where \"contract_address\"=$1 AND \"user_address\"=$2 AND \"amount\"=$3 AND \"created_at\"=$4", sel,
	)

	q := queries.Raw(query, contractAddress, userAddress, amount, createdAt)

	err := q.Bind(ctx, exec, tokenTransferObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from token_transfers")
	}

	if err = tokenTransferObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tokenTransferObj, err
	}

	return tokenTransferObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TokenTransfer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no token_transfers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tokenTransferColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tokenTransferInsertCacheMut.RLock()
	cache, cached := tokenTransferInsertCache[key]
	tokenTransferInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tokenTransferAllColumns,
			tokenTransferColumnsWithDefault,
			tokenTransferColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tokenTransferType, tokenTransferMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tokenTransferType, tokenTransferMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"devices_api\".\"token_transfers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"devices_api\".\"token_transfers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into token_transfers")
	}

	if !cached {
		tokenTransferInsertCacheMut.Lock()
		tokenTransferInsertCache[key] = cache
		tokenTransferInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TokenTransfer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TokenTransfer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tokenTransferUpdateCacheMut.RLock()
	cache, cached := tokenTransferUpdateCache[key]
	tokenTransferUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tokenTransferAllColumns,
			tokenTransferPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update token_transfers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"devices_api\".\"token_transfers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tokenTransferPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tokenTransferType, tokenTransferMapping, append(wl, tokenTransferPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update token_transfers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for token_transfers")
	}

	if !cached {
		tokenTransferUpdateCacheMut.Lock()
		tokenTransferUpdateCache[key] = cache
		tokenTransferUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tokenTransferQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for token_transfers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for token_transfers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TokenTransferSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenTransferPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"devices_api\".\"token_transfers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tokenTransferPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tokenTransfer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tokenTransfer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TokenTransfer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no token_transfers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tokenTransferColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tokenTransferUpsertCacheMut.RLock()
	cache, cached := tokenTransferUpsertCache[key]
	tokenTransferUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tokenTransferAllColumns,
			tokenTransferColumnsWithDefault,
			tokenTransferColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tokenTransferAllColumns,
			tokenTransferPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert token_transfers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tokenTransferPrimaryKeyColumns))
			copy(conflict, tokenTransferPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"devices_api\".\"token_transfers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tokenTransferType, tokenTransferMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tokenTransferType, tokenTransferMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert token_transfers")
	}

	if !cached {
		tokenTransferUpsertCacheMut.Lock()
		tokenTransferUpsertCache[key] = cache
		tokenTransferUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TokenTransfer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TokenTransfer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TokenTransfer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tokenTransferPrimaryKeyMapping)
	sql := "DELETE FROM \"devices_api\".\"token_transfers\" WHERE \"contract_address\"=$1 AND \"user_address\"=$2 AND \"amount\"=$3 AND \"created_at\"=$4"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from token_transfers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for token_transfers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tokenTransferQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tokenTransferQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from token_transfers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for token_transfers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TokenTransferSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tokenTransferBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenTransferPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"devices_api\".\"token_transfers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tokenTransferPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tokenTransfer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for token_transfers")
	}

	if len(tokenTransferAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TokenTransfer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTokenTransfer(ctx, exec, o.ContractAddress, o.UserAddress, o.Amount, o.CreatedAt)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TokenTransferSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TokenTransferSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenTransferPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"devices_api\".\"token_transfers\".* FROM \"devices_api\".\"token_transfers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tokenTransferPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TokenTransferSlice")
	}

	*o = slice

	return nil
}

// TokenTransferExists checks if the TokenTransfer row exists.
func TokenTransferExists(ctx context.Context, exec boil.ContextExecutor, contractAddress []byte, userAddress []byte, amount types.Decimal, createdAt time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"devices_api\".\"token_transfers\" where \"contract_address\"=$1 AND \"user_address\"=$2 AND \"amount\"=$3 AND \"created_at\"=$4 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, contractAddress, userAddress, amount, createdAt)
	}
	row := exec.QueryRowContext(ctx, sql, contractAddress, userAddress, amount, createdAt)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if token_transfers exists")
	}

	return exists, nil
}

// Exists checks if the TokenTransfer row exists.
func (o *TokenTransfer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TokenTransferExists(ctx, exec, o.ContractAddress, o.UserAddress, o.Amount, o.CreatedAt)
}
