// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DCN is an object representing the database table.
type DCN struct {
	NFTNodeID              []byte      `boil:"nft_node_id" json:"nft_node_id" toml:"nft_node_id" yaml:"nft_node_id"`
	OwnerAddress           null.Bytes  `boil:"owner_address" json:"owner_address,omitempty" toml:"owner_address" yaml:"owner_address,omitempty"`
	Name                   null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Expiration             null.Time   `boil:"expiration" json:"expiration,omitempty" toml:"expiration" yaml:"expiration,omitempty"`
	NFTNodeBlockCreateTime null.Time   `boil:"nft_node_block_create_time" json:"nft_node_block_create_time,omitempty" toml:"nft_node_block_create_time" yaml:"nft_node_block_create_time,omitempty"`
	CreatedAt              time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt              time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *dcnR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dcnL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DCNColumns = struct {
	NFTNodeID              string
	OwnerAddress           string
	Name                   string
	Expiration             string
	NFTNodeBlockCreateTime string
	CreatedAt              string
	UpdatedAt              string
}{
	NFTNodeID:              "nft_node_id",
	OwnerAddress:           "owner_address",
	Name:                   "name",
	Expiration:             "expiration",
	NFTNodeBlockCreateTime: "nft_node_block_create_time",
	CreatedAt:              "created_at",
	UpdatedAt:              "updated_at",
}

var DCNTableColumns = struct {
	NFTNodeID              string
	OwnerAddress           string
	Name                   string
	Expiration             string
	NFTNodeBlockCreateTime string
	CreatedAt              string
	UpdatedAt              string
}{
	NFTNodeID:              "dcn.nft_node_id",
	OwnerAddress:           "dcn.owner_address",
	Name:                   "dcn.name",
	Expiration:             "dcn.expiration",
	NFTNodeBlockCreateTime: "dcn.nft_node_block_create_time",
	CreatedAt:              "dcn.created_at",
	UpdatedAt:              "dcn.updated_at",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var DCNWhere = struct {
	NFTNodeID              whereHelper__byte
	OwnerAddress           whereHelpernull_Bytes
	Name                   whereHelpernull_String
	Expiration             whereHelpernull_Time
	NFTNodeBlockCreateTime whereHelpernull_Time
	CreatedAt              whereHelpertime_Time
	UpdatedAt              whereHelpertime_Time
}{
	NFTNodeID:              whereHelper__byte{field: "\"devices_api\".\"dcn\".\"nft_node_id\""},
	OwnerAddress:           whereHelpernull_Bytes{field: "\"devices_api\".\"dcn\".\"owner_address\""},
	Name:                   whereHelpernull_String{field: "\"devices_api\".\"dcn\".\"name\""},
	Expiration:             whereHelpernull_Time{field: "\"devices_api\".\"dcn\".\"expiration\""},
	NFTNodeBlockCreateTime: whereHelpernull_Time{field: "\"devices_api\".\"dcn\".\"nft_node_block_create_time\""},
	CreatedAt:              whereHelpertime_Time{field: "\"devices_api\".\"dcn\".\"created_at\""},
	UpdatedAt:              whereHelpertime_Time{field: "\"devices_api\".\"dcn\".\"updated_at\""},
}

// DCNRels is where relationship names are stored.
var DCNRels = struct {
}{}

// dcnR is where relationships are stored.
type dcnR struct {
}

// NewStruct creates a new relationship struct
func (*dcnR) NewStruct() *dcnR {
	return &dcnR{}
}

// dcnL is where Load methods for each relationship are stored.
type dcnL struct{}

var (
	dcnAllColumns            = []string{"nft_node_id", "owner_address", "name", "expiration", "nft_node_block_create_time", "created_at", "updated_at"}
	dcnColumnsWithoutDefault = []string{"nft_node_id"}
	dcnColumnsWithDefault    = []string{"owner_address", "name", "expiration", "nft_node_block_create_time", "created_at", "updated_at"}
	dcnPrimaryKeyColumns     = []string{"nft_node_id"}
	dcnGeneratedColumns      = []string{}
)

type (
	// DCNSlice is an alias for a slice of pointers to DCN.
	// This should almost always be used instead of []DCN.
	DCNSlice []*DCN
	// DCNHook is the signature for custom DCN hook methods
	DCNHook func(context.Context, boil.ContextExecutor, *DCN) error

	dcnQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dcnType                 = reflect.TypeOf(&DCN{})
	dcnMapping              = queries.MakeStructMapping(dcnType)
	dcnPrimaryKeyMapping, _ = queries.BindMapping(dcnType, dcnMapping, dcnPrimaryKeyColumns)
	dcnInsertCacheMut       sync.RWMutex
	dcnInsertCache          = make(map[string]insertCache)
	dcnUpdateCacheMut       sync.RWMutex
	dcnUpdateCache          = make(map[string]updateCache)
	dcnUpsertCacheMut       sync.RWMutex
	dcnUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dcnAfterSelectHooks []DCNHook

var dcnBeforeInsertHooks []DCNHook
var dcnAfterInsertHooks []DCNHook

var dcnBeforeUpdateHooks []DCNHook
var dcnAfterUpdateHooks []DCNHook

var dcnBeforeDeleteHooks []DCNHook
var dcnAfterDeleteHooks []DCNHook

var dcnBeforeUpsertHooks []DCNHook
var dcnAfterUpsertHooks []DCNHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DCN) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dcnAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DCN) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dcnBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DCN) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dcnAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DCN) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dcnBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DCN) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dcnAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DCN) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dcnBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DCN) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dcnAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DCN) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dcnBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DCN) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dcnAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDCNHook registers your hook function for all future operations.
func AddDCNHook(hookPoint boil.HookPoint, dcnHook DCNHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dcnAfterSelectHooks = append(dcnAfterSelectHooks, dcnHook)
	case boil.BeforeInsertHook:
		dcnBeforeInsertHooks = append(dcnBeforeInsertHooks, dcnHook)
	case boil.AfterInsertHook:
		dcnAfterInsertHooks = append(dcnAfterInsertHooks, dcnHook)
	case boil.BeforeUpdateHook:
		dcnBeforeUpdateHooks = append(dcnBeforeUpdateHooks, dcnHook)
	case boil.AfterUpdateHook:
		dcnAfterUpdateHooks = append(dcnAfterUpdateHooks, dcnHook)
	case boil.BeforeDeleteHook:
		dcnBeforeDeleteHooks = append(dcnBeforeDeleteHooks, dcnHook)
	case boil.AfterDeleteHook:
		dcnAfterDeleteHooks = append(dcnAfterDeleteHooks, dcnHook)
	case boil.BeforeUpsertHook:
		dcnBeforeUpsertHooks = append(dcnBeforeUpsertHooks, dcnHook)
	case boil.AfterUpsertHook:
		dcnAfterUpsertHooks = append(dcnAfterUpsertHooks, dcnHook)
	}
}

// One returns a single dcn record from the query.
func (q dcnQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DCN, error) {
	o := &DCN{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dcn")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DCN records from the query.
func (q dcnQuery) All(ctx context.Context, exec boil.ContextExecutor) (DCNSlice, error) {
	var o []*DCN

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DCN slice")
	}

	if len(dcnAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DCN records in the query.
func (q dcnQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dcn rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dcnQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dcn exists")
	}

	return count > 0, nil
}

// DCNS retrieves all the records using an executor.
func DCNS(mods ...qm.QueryMod) dcnQuery {
	mods = append(mods, qm.From("\"devices_api\".\"dcn\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"devices_api\".\"dcn\".*"})
	}

	return dcnQuery{q}
}

// FindDCN retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDCN(ctx context.Context, exec boil.ContextExecutor, nFTNodeID []byte, selectCols ...string) (*DCN, error) {
	dcnObj := &DCN{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"devices_api\".\"dcn\" where \"nft_node_id\"=$1", sel,
	)

	q := queries.Raw(query, nFTNodeID)

	err := q.Bind(ctx, exec, dcnObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dcn")
	}

	if err = dcnObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dcnObj, err
	}

	return dcnObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DCN) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dcn provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dcnColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dcnInsertCacheMut.RLock()
	cache, cached := dcnInsertCache[key]
	dcnInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dcnAllColumns,
			dcnColumnsWithDefault,
			dcnColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dcnType, dcnMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dcnType, dcnMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"devices_api\".\"dcn\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"devices_api\".\"dcn\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dcn")
	}

	if !cached {
		dcnInsertCacheMut.Lock()
		dcnInsertCache[key] = cache
		dcnInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DCN.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DCN) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dcnUpdateCacheMut.RLock()
	cache, cached := dcnUpdateCache[key]
	dcnUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dcnAllColumns,
			dcnPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dcn, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"devices_api\".\"dcn\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dcnPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dcnType, dcnMapping, append(wl, dcnPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dcn row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dcn")
	}

	if !cached {
		dcnUpdateCacheMut.Lock()
		dcnUpdateCache[key] = cache
		dcnUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dcnQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dcn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dcn")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DCNSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dcnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"devices_api\".\"dcn\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dcnPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dcn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dcn")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DCN) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dcn provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dcnColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dcnUpsertCacheMut.RLock()
	cache, cached := dcnUpsertCache[key]
	dcnUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dcnAllColumns,
			dcnColumnsWithDefault,
			dcnColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dcnAllColumns,
			dcnPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert dcn, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dcnPrimaryKeyColumns))
			copy(conflict, dcnPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"devices_api\".\"dcn\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dcnType, dcnMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dcnType, dcnMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dcn")
	}

	if !cached {
		dcnUpsertCacheMut.Lock()
		dcnUpsertCache[key] = cache
		dcnUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DCN record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DCN) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DCN provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dcnPrimaryKeyMapping)
	sql := "DELETE FROM \"devices_api\".\"dcn\" WHERE \"nft_node_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dcn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dcn")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dcnQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dcnQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dcn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dcn")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DCNSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dcnBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dcnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"devices_api\".\"dcn\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dcnPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dcn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dcn")
	}

	if len(dcnAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DCN) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDCN(ctx, exec, o.NFTNodeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DCNSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DCNSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dcnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"devices_api\".\"dcn\".* FROM \"devices_api\".\"dcn\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dcnPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DCNSlice")
	}

	*o = slice

	return nil
}

// DCNExists checks if the DCN row exists.
func DCNExists(ctx context.Context, exec boil.ContextExecutor, nFTNodeID []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"devices_api\".\"dcn\" where \"nft_node_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, nFTNodeID)
	}
	row := exec.QueryRowContext(ctx, sql, nFTNodeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dcn exists")
	}

	return exists, nil
}

// Exists checks if the DCN row exists.
func (o *DCN) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DCNExists(ctx, exec, o.NFTNodeID)
}
